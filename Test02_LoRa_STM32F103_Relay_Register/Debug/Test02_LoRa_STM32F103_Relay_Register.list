
Test02_LoRa_STM32F103_Relay_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b40  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08008c50  08008c50  00009c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800926c  0800926c  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800926c  0800926c  0000a26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009274  08009274  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009278  08009278  0000a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800927c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001e4  08009460  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08009460  0000b518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b38  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e21  00000000  00000000  00014d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00016b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000739  00000000  00000000  000174f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186bf  00000000  00000000  00017c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c297  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085cfb  00000000  00000000  0003c57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000c227a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  000c2300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c5fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c38 	.word	0x08008c38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008c38 	.word	0x08008c38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b99e 	b.w	8000ebc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83c 	bl	8000c04 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	f7ff ff0b 	bl	80009bc <__aeabi_dcmplt>
 8000ba6:	b928      	cbnz	r0, 8000bb4 <__aeabi_d2lz+0x1c>
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb0:	f000 b80a 	b.w	8000bc8 <__aeabi_d2ulz>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bba:	f000 f805 	bl	8000bc8 <__aeabi_d2ulz>
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2ulz>:
 8000bc8:	b5d0      	push	{r4, r6, r7, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <__aeabi_d2ulz+0x34>)
 8000bce:	4606      	mov	r6, r0
 8000bd0:	460f      	mov	r7, r1
 8000bd2:	f7ff fc81 	bl	80004d8 <__aeabi_dmul>
 8000bd6:	f7ff ff57 	bl	8000a88 <__aeabi_d2uiz>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	f7ff fc02 	bl	80003e4 <__aeabi_ui2d>
 8000be0:	2200      	movs	r2, #0
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <__aeabi_d2ulz+0x38>)
 8000be4:	f7ff fc78 	bl	80004d8 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4630      	mov	r0, r6
 8000bee:	4639      	mov	r1, r7
 8000bf0:	f7ff faba 	bl	8000168 <__aeabi_dsub>
 8000bf4:	f7ff ff48 	bl	8000a88 <__aeabi_d2uiz>
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfc:	3df00000 	.word	0x3df00000
 8000c00:	41f00000 	.word	0x41f00000

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	9d08      	ldr	r5, [sp, #32]
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14e      	bne.n	8000cae <__udivmoddi4+0xaa>
 8000c10:	4694      	mov	ip, r2
 8000c12:	458c      	cmp	ip, r1
 8000c14:	4686      	mov	lr, r0
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	d962      	bls.n	8000ce2 <__udivmoddi4+0xde>
 8000c1c:	b14a      	cbz	r2, 8000c32 <__udivmoddi4+0x2e>
 8000c1e:	f1c2 0320 	rsb	r3, r2, #32
 8000c22:	4091      	lsls	r1, r2
 8000c24:	fa20 f303 	lsr.w	r3, r0, r3
 8000c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb04 f106 	mul.w	r1, r4, r6
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x64>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5a:	f080 8110 	bcs.w	8000e7e <__udivmoddi4+0x27a>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 810d 	bls.w	8000e7e <__udivmoddi4+0x27a>
 8000c64:	3c02      	subs	r4, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x94>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	f080 80fa 	bcs.w	8000e82 <__udivmoddi4+0x27e>
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	f240 80f7 	bls.w	8000e82 <__udivmoddi4+0x27e>
 8000c94:	4463      	add	r3, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	2100      	movs	r1, #0
 8000c9a:	1b9b      	subs	r3, r3, r6
 8000c9c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa6>
 8000ca2:	40d3      	lsrs	r3, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xba>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb4>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa6>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x150>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xcc>
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	f0c0 80ee 	bcc.w	8000eac <__udivmoddi4+0x2a8>
 8000cd0:	1a86      	subs	r6, r0, r2
 8000cd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d0e6      	beq.n	8000caa <__udivmoddi4+0xa6>
 8000cdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce0:	e7e3      	b.n	8000caa <__udivmoddi4+0xa6>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	f040 808f 	bne.w	8000e06 <__udivmoddi4+0x202>
 8000ce8:	eba1 040c 	sub.w	r4, r1, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x11c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x11a>
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b0>
 8000d1e:	4626      	mov	r6, r4
 8000d20:	1a1c      	subs	r4, r3, r0
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	429f      	cmp	r7, r3
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x148>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x146>
 8000d44:	429f      	cmp	r7, r3
 8000d46:	f200 80ae 	bhi.w	8000ea6 <__udivmoddi4+0x2a2>
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	1bdb      	subs	r3, r3, r7
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x9c>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa24 f607 	lsr.w	r6, r4, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	fb09 6618 	mls	r6, r9, r8, r6
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	408c      	lsls	r4, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	431c      	orrs	r4, r3
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d90a      	bls.n	8000daa <__udivmoddi4+0x1a6>
 8000d94:	eb1c 0303 	adds.w	r3, ip, r3
 8000d98:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d9c:	f080 8081 	bcs.w	8000ea2 <__udivmoddi4+0x29e>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d97e      	bls.n	8000ea2 <__udivmoddi4+0x29e>
 8000da4:	f1a8 0802 	sub.w	r8, r8, #2
 8000da8:	4463      	add	r3, ip
 8000daa:	1a1e      	subs	r6, r3, r0
 8000dac:	fbb6 f3f9 	udiv	r3, r6, r9
 8000db0:	fb09 6613 	mls	r6, r9, r3, r6
 8000db4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x1d0>
 8000dc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dca:	d266      	bcs.n	8000e9a <__udivmoddi4+0x296>
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d964      	bls.n	8000e9a <__udivmoddi4+0x296>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dd8:	fba0 8302 	umull	r8, r3, r0, r2
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	429c      	cmp	r4, r3
 8000de2:	46c6      	mov	lr, r8
 8000de4:	461e      	mov	r6, r3
 8000de6:	d350      	bcc.n	8000e8a <__udivmoddi4+0x286>
 8000de8:	d04d      	beq.n	8000e86 <__udivmoddi4+0x282>
 8000dea:	b155      	cbz	r5, 8000e02 <__udivmoddi4+0x1fe>
 8000dec:	ebba 030e 	subs.w	r3, sl, lr
 8000df0:	eb64 0406 	sbc.w	r4, r4, r6
 8000df4:	fa04 f707 	lsl.w	r7, r4, r7
 8000df8:	40cb      	lsrs	r3, r1
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	e9c5 7400 	strd	r7, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e751      	b.n	8000caa <__udivmoddi4+0xa6>
 8000e06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0a:	f1c2 0320 	rsb	r3, r2, #32
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e20:	fb08 1110 	mls	r1, r8, r0, r1
 8000e24:	4094      	lsls	r4, r2
 8000e26:	431c      	orrs	r4, r3
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x248>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29a>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29a>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e52:	fb08 3311 	mls	r3, r8, r1, r3
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x272>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x292>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x292>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f2      	b.n	8000c68 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e708      	b.n	8000c98 <__udivmoddi4+0x94>
 8000e86:	45c2      	cmp	sl, r8
 8000e88:	d2af      	bcs.n	8000dea <__udivmoddi4+0x1e6>
 8000e8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e8e:	eb63 060c 	sbc.w	r6, r3, ip
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a9      	b.n	8000dea <__udivmoddi4+0x1e6>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x272>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e79a      	b.n	8000dd4 <__udivmoddi4+0x1d0>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x248>
 8000ea2:	46b0      	mov	r8, r6
 8000ea4:	e781      	b.n	8000daa <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74f      	b.n	8000d4c <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e711      	b.n	8000cd8 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6958      	ldr	r0, [r3, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	f001 fb32 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	f107 010f 	add.w	r1, r7, #15
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	2201      	movs	r2, #1
 8000f00:	f001 ffd4 	bl	8002eac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f04:	bf00      	nop
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fbd3 	bl	80036b8 <HAL_SPI_GetState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f6      	bne.n	8000f06 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6998      	ldr	r0, [r3, #24]
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	2201      	movs	r2, #1
 8000f28:	f002 f904 	bl	8003134 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f2c:	bf00      	nop
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fbbf 	bl	80036b8 <HAL_SPI_GetState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d1f6      	bne.n	8000f2e <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6958      	ldr	r0, [r3, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	f001 faff 	bl	8002554 <HAL_GPIO_WritePin>
	return rxByte;
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6958      	ldr	r0, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f001 fae2 	bl	8002554 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6998      	ldr	r0, [r3, #24]
 8000f96:	f107 010f 	add.w	r1, r7, #15
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f001 ff84 	bl	8002eac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fa4:	bf00      	nop
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fb83 	bl	80036b8 <HAL_SPI_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1f6      	bne.n	8000fa6 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6998      	ldr	r0, [r3, #24]
 8000fbe:	1cb9      	adds	r1, r7, #2
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f001 ff71 	bl	8002eac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fca:	bf00      	nop
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fb70 	bl	80036b8 <HAL_SPI_GetState>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1f6      	bne.n	8000fcc <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6958      	ldr	r0, [r3, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f001 fab0 	bl	8002554 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <lora_init>:

uint8_t lora_init(lora_t * module){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f001 fa9d 	bl	8002554 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f001 f80e 	bl	800203c <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fa8f 	bl	8002554 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f001 f800 	bl	800203c <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 800103c:	2142      	movs	r1, #66	@ 0x42
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff3e 	bl	8000ec0 <lora_read_reg>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d001      	beq.n	8001052 <lora_init+0x56>
		return 1;
 800104e:	2301      	movs	r3, #1
 8001050:	e037      	b.n	80010c2 <lora_init+0xc6>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	2101      	movs	r1, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff82 	bl	8000f60 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <lora_init+0xd0>)
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f948 	bl	8001300 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	210e      	movs	r1, #14
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff73 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	210f      	movs	r1, #15
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff6e 	bl	8000f60 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 8001084:	210c      	movs	r1, #12
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff1a 	bl	8000ec0 <lora_read_reg>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f043 0303 	orr.w	r3, r3, #3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	210c      	movs	r1, #12
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff5f 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 80010a2:	2204      	movs	r2, #4
 80010a4:	2126      	movs	r1, #38	@ 0x26
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff5a 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 80010ac:	228f      	movs	r2, #143	@ 0x8f
 80010ae:	2109      	movs	r1, #9
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff55 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 80010b6:	2281      	movs	r2, #129	@ 0x81
 80010b8:	2101      	movs	r1, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff50 	bl	8000f60 <lora_write_reg>
	return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08008dc8 	.word	0x08008dc8

080010d0 <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 80010dc:	2112      	movs	r1, #18
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff feee 	bl	8000ec0 <lora_read_reg>
 80010e4:	4603      	mov	r3, r0
 80010e6:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 80010e8:	2272      	movs	r2, #114	@ 0x72
 80010ea:	211d      	movs	r1, #29
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff37 	bl	8000f60 <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	2112      	movs	r1, #18
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff30 	bl	8000f60 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01d      	beq.n	8001146 <lora_prasePacket+0x76>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d118      	bne.n	8001146 <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 8001114:	2113      	movs	r1, #19
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fed2 	bl	8000ec0 <lora_read_reg>
 800111c:	4603      	mov	r3, r0
 800111e:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 8001120:	2110      	movs	r1, #16
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fecc 	bl	8000ec0 <lora_read_reg>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	210d      	movs	r1, #13
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff16 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8001134:	2281      	movs	r2, #129	@ 0x81
 8001136:	2101      	movs	r1, #1
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff11 	bl	8000f60 <lora_write_reg>
		packetIndex = 0;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <lora_prasePacket+0xb4>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e010      	b.n	8001168 <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001146:	2101      	movs	r1, #1
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff feb9 	bl	8000ec0 <lora_read_reg>
 800114e:	4603      	mov	r3, r0
 8001150:	2b86      	cmp	r3, #134	@ 0x86
 8001152:	d009      	beq.n	8001168 <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	210d      	movs	r1, #13
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff01 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800115e:	2286      	movs	r2, #134	@ 0x86
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fefc 	bl	8000f60 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f003 0320 	and.w	r3, r3, #32
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <lora_prasePacket+0xa8>
		return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e000      	b.n	800117a <lora_prasePacket+0xaa>
	}
	return packetLength;
 8001178:	68fb      	ldr	r3, [r7, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000200 	.word	0x20000200

08001188 <lora_available>:

uint8_t lora_available(lora_t * module){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 8001190:	2113      	movs	r1, #19
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fe94 	bl	8000ec0 <lora_read_reg>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <lora_available+0x24>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000200 	.word	0x20000200

080011b0 <lora_read>:

uint8_t lora_read(lora_t * module){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ffe5 	bl	8001188 <lora_available>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <lora_read+0x18>
		return 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e00a      	b.n	80011de <lora_read+0x2e>
	packetIndex++;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <lora_read+0x38>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <lora_read+0x38>)
 80011d2:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe72 	bl	8000ec0 <lora_read_reg>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000200 	.word	0x20000200

080011ec <lora_begin_packet>:

uint8_t lora_begin_packet(lora_t * module){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	//int ret;
	if ((lora_read_reg(module, REG_OP_MODE) & MODE_TX) == MODE_TX) {
 80011f4:	2101      	movs	r1, #1
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fe62 	bl	8000ec0 <lora_read_reg>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d101      	bne.n	800120a <lora_begin_packet+0x1e>
    return 1;
 8001206:	2301      	movs	r3, #1
 8001208:	e014      	b.n	8001234 <lora_begin_packet+0x48>
  }
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800120a:	2281      	movs	r2, #129	@ 0x81
 800120c:	2101      	movs	r1, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fea6 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 8001214:	2272      	movs	r2, #114	@ 0x72
 8001216:	211d      	movs	r1, #29
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fea1 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	210d      	movs	r1, #13
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe9c 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module, REG_PAYLOAD_LENGTH, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2122      	movs	r1, #34	@ 0x22
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fe97 	bl	8000f60 <lora_write_reg>
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <lora_tx>:

void lora_tx(lora_t * module, uint8_t * buf, uint8_t size){
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	4613      	mov	r3, r2
 8001248:	71fb      	strb	r3, [r7, #7]
	int currentLength = lora_read_reg(module, REG_PAYLOAD_LENGTH);
 800124a:	2122      	movs	r1, #34	@ 0x22
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fe37 	bl	8000ec0 <lora_read_reg>
 8001252:	4603      	mov	r3, r0
 8001254:	613b      	str	r3, [r7, #16]
  if ((currentLength + size > MAX_PKT_LENGTH)){
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4413      	add	r3, r2
 800125c:	2bff      	cmp	r3, #255	@ 0xff
 800125e:	dd03      	ble.n	8001268 <lora_tx+0x2c>
    size = MAX_PKT_LENGTH - currentLength;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	71fb      	strb	r3, [r7, #7]
  }

  for (int i = 0; i < size; i++) {
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00b      	b.n	8001286 <lora_tx+0x4a>
    lora_write_reg(module, REG_FIFO, buf[i]);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff fe70 	bl	8000f60 <lora_write_reg>
  for (int i = 0; i < size; i++) {
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	429a      	cmp	r2, r3
 800128c:	dbef      	blt.n	800126e <lora_tx+0x32>
  }
  lora_write_reg(module, REG_PAYLOAD_LENGTH, currentLength + size);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4413      	add	r3, r2
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2122      	movs	r1, #34	@ 0x22
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff fe5f 	bl	8000f60 <lora_write_reg>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <lora_end_packet>:

uint8_t lora_end_packet(lora_t * module){
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 80012b2:	2364      	movs	r3, #100	@ 0x64
 80012b4:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80012b6:	2283      	movs	r2, #131	@ 0x83
 80012b8:	2101      	movs	r1, #1
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fe50 	bl	8000f60 <lora_write_reg>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80012c0:	e00a      	b.n	80012d8 <lora_end_packet+0x2e>
		if(--timeout==0){
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <lora_end_packet+0x2e>
			HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 feb4 	bl	800203c <HAL_Delay>
			return 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e00e      	b.n	80012f6 <lora_end_packet+0x4c>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80012d8:	2112      	movs	r1, #18
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fdf0 	bl	8000ec0 <lora_read_reg>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0eb      	beq.n	80012c2 <lora_end_packet+0x18>
		}
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80012ea:	2208      	movs	r2, #8
 80012ec:	2112      	movs	r1, #18
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe36 	bl	8000f60 <lora_write_reg>
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <lora_set_frequency>:

void lora_set_frequency(lora_t * module, uint64_t freq){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 800130c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001310:	f04f 0000 	mov.w	r0, #0
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	04d9      	lsls	r1, r3, #19
 800131a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800131e:	04d0      	lsls	r0, r2, #19
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <lora_set_frequency+0x88>)
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	f7ff fc1f 	bl	8000b68 <__aeabi_uldivmod>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001332:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	0c02      	lsrs	r2, r0, #16
 8001340:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001344:	0c0b      	lsrs	r3, r1, #16
 8001346:	b2d3      	uxtb	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	2106      	movs	r1, #6
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff fe07 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 8001352:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	0a02      	lsrs	r2, r0, #8
 8001360:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001364:	0a0b      	lsrs	r3, r1, #8
 8001366:	b2d3      	uxtb	r3, r2
 8001368:	461a      	mov	r2, r3
 800136a:	2107      	movs	r1, #7
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fdf7 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001372:	7c3b      	ldrb	r3, [r7, #16]
 8001374:	461a      	mov	r2, r3
 8001376:	2108      	movs	r1, #8
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fdf1 	bl	8000f60 <lora_write_reg>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	01e84800 	.word	0x01e84800

0800138c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a25      	ldr	r2, [pc, #148]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013a6:	f043 0320 	orr.w	r3, r3, #32
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a19      	ldr	r2, [pc, #100]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_GPIO_Init+0xb0>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2110      	movs	r1, #16
 80013ec:	4814      	ldr	r0, [pc, #80]	@ (8001440 <MX_GPIO_Init+0xb4>)
 80013ee:	f001 f8b1 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2102      	movs	r1, #2
 80013f6:	4813      	ldr	r0, [pc, #76]	@ (8001444 <MX_GPIO_Init+0xb8>)
 80013f8:	f001 f8ac 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80013fc:	2310      	movs	r3, #16
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2302      	movs	r3, #2
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <MX_GPIO_Init+0xb4>)
 8001414:	f000 ff1a 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_GPIO_Init+0xb8>)
 8001430:	f000 ff0c 	bl	800224c <HAL_GPIO_Init>

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00

08001448 <send_broadcast>:
int id_d,id_r,stt=0;
float t,h,x_r,y_r,x_d,y_d;
float t_min = 20,t_max=25, h_min=50, h_max=70;
uint32_t now_tick,tick;
uint8_t time_out =0;
void send_broadcast(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	sprintf(buf,"Open R");
 800144c:	4912      	ldr	r1, [pc, #72]	@ (8001498 <send_broadcast+0x50>)
 800144e:	4813      	ldr	r0, [pc, #76]	@ (800149c <send_broadcast+0x54>)
 8001450:	f003 fb9e 	bl	8004b90 <siprintf>
	lora_begin_packet(&lora);
 8001454:	4812      	ldr	r0, [pc, #72]	@ (80014a0 <send_broadcast+0x58>)
 8001456:	f7ff fec9 	bl	80011ec <lora_begin_packet>
	lora_tx(&lora, (uint8_t *)buf, strlen(buf));
 800145a:	4810      	ldr	r0, [pc, #64]	@ (800149c <send_broadcast+0x54>)
 800145c:	f7fe fe78 	bl	8000150 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <send_broadcast+0x54>)
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <send_broadcast+0x58>)
 800146a:	f7ff fee7 	bl	800123c <lora_tx>
	lora_end_packet(&lora);
 800146e:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <send_broadcast+0x58>)
 8001470:	f7ff ff1b 	bl	80012aa <lora_end_packet>
	sprintf(buf,"Da gui broadcast cho node\r\n");
 8001474:	490b      	ldr	r1, [pc, #44]	@ (80014a4 <send_broadcast+0x5c>)
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <send_broadcast+0x54>)
 8001478:	f003 fb8a 	bl	8004b90 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <send_broadcast+0x54>)
 800147e:	f7fe fe67 	bl	8000150 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	4904      	ldr	r1, [pc, #16]	@ (800149c <send_broadcast+0x54>)
 800148c:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <send_broadcast+0x60>)
 800148e:	f002 fa7c 	bl	800398a <HAL_UART_Transmit>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	08008c50 	.word	0x08008c50
 800149c:	20000268 	.word	0x20000268
 80014a0:	20000220 	.word	0x20000220
 80014a4:	08008c58 	.word	0x08008c58
 80014a8:	20000380 	.word	0x20000380

080014ac <check_format_register>:
bool check_format_register(const char *packet, int *id, float *x, float *y) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
    // Sử dụng sscanf để phân tích gói tin
    if (sscanf(packet, "%d %f %f", id, x, y) == 3) {
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <check_format_register+0x34>)
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f003 fb83 	bl	8004bd0 <siscanf>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d101      	bne.n	80014d4 <check_format_register+0x28>
        // Nếu sscanf trả về 3, nghĩa là id, x, y được đọc thành công
        return true;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <check_format_register+0x2a>
    }
    return false; // Nếu không đọc được đúng định dạng
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	08008c74 	.word	0x08008c74

080014e4 <listen_register>:
void listen_register(void){
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
	uint8_t ret=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
	now_tick=HAL_GetTick();
 80014ee:	f000 fd9b 	bl	8002028 <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a36      	ldr	r2, [pc, #216]	@ (80015d0 <listen_register+0xec>)
 80014f6:	6013      	str	r3, [r2, #0]
	while(!ret){
 80014f8:	e061      	b.n	80015be <listen_register+0xda>
		if((HAL_GetTick()-now_tick)>3000){
 80014fa:	f000 fd95 	bl	8002028 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <listen_register+0xec>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800150a:	4293      	cmp	r3, r2
 800150c:	d912      	bls.n	8001534 <listen_register+0x50>
			time_out =1;
 800150e:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <listen_register+0xf0>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
			sprintf(buf,"time out on listen_register\r\n");
 8001514:	4930      	ldr	r1, [pc, #192]	@ (80015d8 <listen_register+0xf4>)
 8001516:	4831      	ldr	r0, [pc, #196]	@ (80015dc <listen_register+0xf8>)
 8001518:	f003 fb3a 	bl	8004b90 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800151c:	482f      	ldr	r0, [pc, #188]	@ (80015dc <listen_register+0xf8>)
 800151e:	f7fe fe17 	bl	8000150 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	492c      	ldr	r1, [pc, #176]	@ (80015dc <listen_register+0xf8>)
 800152c:	482c      	ldr	r0, [pc, #176]	@ (80015e0 <listen_register+0xfc>)
 800152e:	f002 fa2c 	bl	800398a <HAL_UART_Transmit>
			break;
 8001532:	e048      	b.n	80015c6 <listen_register+0xe2>
		}
		/*sprintf(buf,"Chua nhan duoc dang ky nao\r\n");
		HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);*/
		ret = lora_prasePacket(&lora);
 8001534:	482b      	ldr	r0, [pc, #172]	@ (80015e4 <listen_register+0x100>)
 8001536:	f7ff fdcb 	bl	80010d0 <lora_prasePacket>
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
		if(ret){
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d03c      	beq.n	80015be <listen_register+0xda>
			uint8_t i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	71bb      	strb	r3, [r7, #6]
			while (lora_available(&lora)) {
 8001548:	e00a      	b.n	8001560 <listen_register+0x7c>
			   buf[i] = lora_read(&lora);
 800154a:	79bc      	ldrb	r4, [r7, #6]
 800154c:	4825      	ldr	r0, [pc, #148]	@ (80015e4 <listen_register+0x100>)
 800154e:	f7ff fe2f 	bl	80011b0 <lora_read>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <listen_register+0xf8>)
 8001558:	551a      	strb	r2, [r3, r4]
			   i++;
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	3301      	adds	r3, #1
 800155e:	71bb      	strb	r3, [r7, #6]
			while (lora_available(&lora)) {
 8001560:	4820      	ldr	r0, [pc, #128]	@ (80015e4 <listen_register+0x100>)
 8001562:	f7ff fe11 	bl	8001188 <lora_available>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <listen_register+0x66>
			}
			buf[i] = '\0'; // Kết thúc chuỗi
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <listen_register+0xf8>)
 8001570:	2100      	movs	r1, #0
 8001572:	54d1      	strb	r1, [r2, r3]
			sprintf(data_receive,buf);
 8001574:	4919      	ldr	r1, [pc, #100]	@ (80015dc <listen_register+0xf8>)
 8001576:	481c      	ldr	r0, [pc, #112]	@ (80015e8 <listen_register+0x104>)
 8001578:	f003 fb0a 	bl	8004b90 <siprintf>
			if(check_format_register(data_receive, &id_r, &x_r, &y_r)){
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <listen_register+0x108>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <listen_register+0x10c>)
 8001580:	491c      	ldr	r1, [pc, #112]	@ (80015f4 <listen_register+0x110>)
 8001582:	4819      	ldr	r0, [pc, #100]	@ (80015e8 <listen_register+0x104>)
 8001584:	f7ff ff92 	bl	80014ac <check_format_register>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <listen_register+0xd6>
				sprintf(buf,"Da nhan dang ky: %s\r\n",data_receive);
 800158e:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <listen_register+0x104>)
 8001590:	4919      	ldr	r1, [pc, #100]	@ (80015f8 <listen_register+0x114>)
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <listen_register+0xf8>)
 8001594:	f003 fafc 	bl	8004b90 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001598:	4810      	ldr	r0, [pc, #64]	@ (80015dc <listen_register+0xf8>)
 800159a:	f7fe fdd9 	bl	8000150 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	490d      	ldr	r1, [pc, #52]	@ (80015dc <listen_register+0xf8>)
 80015a8:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <listen_register+0xfc>)
 80015aa:	f002 f9ee 	bl	800398a <HAL_UART_Transmit>
				stt++;
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <listen_register+0x118>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a11      	ldr	r2, [pc, #68]	@ (80015fc <listen_register+0x118>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e001      	b.n	80015be <listen_register+0xda>
			}
			else{
				ret=0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	71fb      	strb	r3, [r7, #7]
	while(!ret){
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d09a      	beq.n	80014fa <listen_register+0x16>
			}
		}
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000318 	.word	0x20000318
 80015d4:	20000320 	.word	0x20000320
 80015d8:	08008c80 	.word	0x08008c80
 80015dc:	20000268 	.word	0x20000268
 80015e0:	20000380 	.word	0x20000380
 80015e4:	20000220 	.word	0x20000220
 80015e8:	200002b8 	.word	0x200002b8
 80015ec:	2000030c 	.word	0x2000030c
 80015f0:	20000308 	.word	0x20000308
 80015f4:	200002f8 	.word	0x200002f8
 80015f8:	08008ca0 	.word	0x08008ca0
 80015fc:	200002fc 	.word	0x200002fc

08001600 <send_stt>:
void send_stt(void){
 8001600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001604:	b099      	sub	sp, #100	@ 0x64
 8001606:	af08      	add	r7, sp, #32
	char data_stt[50];
	sprintf(data_stt,"%d %d %.1f %.1f %.1f %.1f",id_r,stt,t_min,t_max,h_min,h_max);
 8001608:	4b2c      	ldr	r3, [pc, #176]	@ (80016bc <send_stt+0xbc>)
 800160a:	681e      	ldr	r6, [r3, #0]
 800160c:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <send_stt+0xc0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b2c      	ldr	r3, [pc, #176]	@ (80016c4 <send_stt+0xc4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff06 	bl	8000428 <__aeabi_f2d>
 800161c:	4604      	mov	r4, r0
 800161e:	460d      	mov	r5, r1
 8001620:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <send_stt+0xc8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe feff 	bl	8000428 <__aeabi_f2d>
 800162a:	4680      	mov	r8, r0
 800162c:	4689      	mov	r9, r1
 800162e:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <send_stt+0xcc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fef8 	bl	8000428 <__aeabi_f2d>
 8001638:	4682      	mov	sl, r0
 800163a:	468b      	mov	fp, r1
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <send_stt+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	f107 000c 	add.w	r0, r7, #12
 800164e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001652:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001656:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800165a:	e9cd 4500 	strd	r4, r5, [sp]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4632      	mov	r2, r6
 8001662:	491c      	ldr	r1, [pc, #112]	@ (80016d4 <send_stt+0xd4>)
 8001664:	f003 fa94 	bl	8004b90 <siprintf>
	lora_begin_packet(&lora);
 8001668:	481b      	ldr	r0, [pc, #108]	@ (80016d8 <send_stt+0xd8>)
 800166a:	f7ff fdbf 	bl	80011ec <lora_begin_packet>
	lora_tx(&lora, (uint8_t *)data_stt, strlen(data_stt));
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fd6c 	bl	8000150 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4815      	ldr	r0, [pc, #84]	@ (80016d8 <send_stt+0xd8>)
 8001684:	f7ff fdda 	bl	800123c <lora_tx>
	lora_end_packet(&lora);
 8001688:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <send_stt+0xd8>)
 800168a:	f7ff fe0e 	bl	80012aa <lora_end_packet>
	sprintf(buf,"Da gui stt cho node: %s\r\n",data_stt);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	461a      	mov	r2, r3
 8001694:	4911      	ldr	r1, [pc, #68]	@ (80016dc <send_stt+0xdc>)
 8001696:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <send_stt+0xe0>)
 8001698:	f003 fa7a 	bl	8004b90 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800169c:	4810      	ldr	r0, [pc, #64]	@ (80016e0 <send_stt+0xe0>)
 800169e:	f7fe fd57 	bl	8000150 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <send_stt+0xe0>)
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <send_stt+0xe4>)
 80016ae:	f002 f96c 	bl	800398a <HAL_UART_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	3744      	adds	r7, #68	@ 0x44
 80016b6:	46bd      	mov	sp, r7
 80016b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016bc:	200002f8 	.word	0x200002f8
 80016c0:	200002fc 	.word	0x200002fc
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004
 80016cc:	20000008 	.word	0x20000008
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	08008cb8 	.word	0x08008cb8
 80016d8:	20000220 	.word	0x20000220
 80016dc:	08008cd4 	.word	0x08008cd4
 80016e0:	20000268 	.word	0x20000268
 80016e4:	20000380 	.word	0x20000380

080016e8 <check_format_data>:
bool check_format_data(const char *packet, int *id, float *x,float *y,float *t, float *h) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af04      	add	r7, sp, #16
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
    // Sử dụng sscanf để phân tích gói tin
    if (sscanf(packet, "%d %f %f %f %f", id, x, y, t, h) == 5) {
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4907      	ldr	r1, [pc, #28]	@ (8001724 <check_format_data+0x3c>)
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f003 fa61 	bl	8004bd0 <siscanf>
 800170e:	4603      	mov	r3, r0
 8001710:	2b05      	cmp	r3, #5
 8001712:	d101      	bne.n	8001718 <check_format_data+0x30>
        // Nếu sscanf trả về 5, nghĩa là id, x, y, t, h được đọc thành công
        return true;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <check_format_data+0x32>
    }
    return false; // Nếu không đọc được đúng định dạng
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	08008cf0 	.word	0x08008cf0

08001728 <listen_data>:
int listen_data(void){
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af02      	add	r7, sp, #8
	uint8_t ret=0;
 800172e:	2300      	movs	r3, #0
 8001730:	71fb      	strb	r3, [r7, #7]
	tick=HAL_GetTick();
 8001732:	f000 fc79 	bl	8002028 <HAL_GetTick>
 8001736:	4603      	mov	r3, r0
 8001738:	4a32      	ldr	r2, [pc, #200]	@ (8001804 <listen_data+0xdc>)
 800173a:	6013      	str	r3, [r2, #0]
	while(!ret){
 800173c:	e05a      	b.n	80017f4 <listen_data+0xcc>
		if((HAL_GetTick()-now_tick)>=3000){
 800173e:	f000 fc73 	bl	8002028 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <listen_data+0xe0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800174e:	4293      	cmp	r3, r2
 8001750:	d904      	bls.n	800175c <listen_data+0x34>
			time_out=1;
 8001752:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <listen_data+0xe4>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
			return 1;
 8001758:	2301      	movs	r3, #1
 800175a:	e04e      	b.n	80017fa <listen_data+0xd2>
		}
		if((HAL_GetTick()-tick)>=250) return 0;
 800175c:	f000 fc64 	bl	8002028 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <listen_data+0xdc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2bf9      	cmp	r3, #249	@ 0xf9
 800176a:	d901      	bls.n	8001770 <listen_data+0x48>
 800176c:	2300      	movs	r3, #0
 800176e:	e044      	b.n	80017fa <listen_data+0xd2>
		ret = lora_prasePacket(&lora);
 8001770:	4827      	ldr	r0, [pc, #156]	@ (8001810 <listen_data+0xe8>)
 8001772:	f7ff fcad 	bl	80010d0 <lora_prasePacket>
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
		if(ret){
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d039      	beq.n	80017f4 <listen_data+0xcc>
			uint8_t i = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	71bb      	strb	r3, [r7, #6]
			while (lora_available(&lora)) {
 8001784:	e00a      	b.n	800179c <listen_data+0x74>
				buf[i] = lora_read(&lora);
 8001786:	79bc      	ldrb	r4, [r7, #6]
 8001788:	4821      	ldr	r0, [pc, #132]	@ (8001810 <listen_data+0xe8>)
 800178a:	f7ff fd11 	bl	80011b0 <lora_read>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <listen_data+0xec>)
 8001794:	551a      	strb	r2, [r3, r4]
				i++;
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	3301      	adds	r3, #1
 800179a:	71bb      	strb	r3, [r7, #6]
			while (lora_available(&lora)) {
 800179c:	481c      	ldr	r0, [pc, #112]	@ (8001810 <listen_data+0xe8>)
 800179e:	f7ff fcf3 	bl	8001188 <lora_available>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <listen_data+0x5e>
			}
			buf[i] = '\0'; // Kết thúc chuỗi
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001814 <listen_data+0xec>)
 80017ac:	2100      	movs	r1, #0
 80017ae:	54d1      	strb	r1, [r2, r3]
			sprintf(data_receive,buf);
 80017b0:	4918      	ldr	r1, [pc, #96]	@ (8001814 <listen_data+0xec>)
 80017b2:	4819      	ldr	r0, [pc, #100]	@ (8001818 <listen_data+0xf0>)
 80017b4:	f003 f9ec 	bl	8004b90 <siprintf>
			if(check_format_data(data_receive, &id_d, &x_d,&y_d, &t, &h)){
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <listen_data+0xf4>)
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <listen_data+0xf8>)
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <listen_data+0xfc>)
 80017c2:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <listen_data+0x100>)
 80017c4:	4919      	ldr	r1, [pc, #100]	@ (800182c <listen_data+0x104>)
 80017c6:	4814      	ldr	r0, [pc, #80]	@ (8001818 <listen_data+0xf0>)
 80017c8:	f7ff ff8e 	bl	80016e8 <check_format_data>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <listen_data+0xae>
				return 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e011      	b.n	80017fa <listen_data+0xd2>
			}
			else {
				sprintf(buf,"Data nhan duoc khong hop le\r\n");
 80017d6:	4916      	ldr	r1, [pc, #88]	@ (8001830 <listen_data+0x108>)
 80017d8:	480e      	ldr	r0, [pc, #56]	@ (8001814 <listen_data+0xec>)
 80017da:	f003 f9d9 	bl	8004b90 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80017de:	480d      	ldr	r0, [pc, #52]	@ (8001814 <listen_data+0xec>)
 80017e0:	f7fe fcb6 	bl	8000150 <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	4909      	ldr	r1, [pc, #36]	@ (8001814 <listen_data+0xec>)
 80017ee:	4811      	ldr	r0, [pc, #68]	@ (8001834 <listen_data+0x10c>)
 80017f0:	f002 f8cb 	bl	800398a <HAL_UART_Transmit>
	while(!ret){
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0a1      	beq.n	800173e <listen_data+0x16>
			}
		}
	}
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	2000031c 	.word	0x2000031c
 8001808:	20000318 	.word	0x20000318
 800180c:	20000320 	.word	0x20000320
 8001810:	20000220 	.word	0x20000220
 8001814:	20000268 	.word	0x20000268
 8001818:	200002b8 	.word	0x200002b8
 800181c:	20000304 	.word	0x20000304
 8001820:	20000300 	.word	0x20000300
 8001824:	20000314 	.word	0x20000314
 8001828:	20000310 	.word	0x20000310
 800182c:	200002f4 	.word	0x200002f4
 8001830:	08008d00 	.word	0x08008d00
 8001834:	20000380 	.word	0x20000380

08001838 <send_ok>:
void send_ok(void){
 8001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800183c:	b089      	sub	sp, #36	@ 0x24
 800183e:	af08      	add	r7, sp, #32
	sprintf(buf,"Nhan duoc data: %d %.1f %.1f %.1f %.1f\r\n",id_d,x_d,y_d,t,h);
 8001840:	4b30      	ldr	r3, [pc, #192]	@ (8001904 <send_ok+0xcc>)
 8001842:	681e      	ldr	r6, [r3, #0]
 8001844:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <send_ok+0xd0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fded 	bl	8000428 <__aeabi_f2d>
 800184e:	4604      	mov	r4, r0
 8001850:	460d      	mov	r5, r1
 8001852:	4b2e      	ldr	r3, [pc, #184]	@ (800190c <send_ok+0xd4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fde6 	bl	8000428 <__aeabi_f2d>
 800185c:	4680      	mov	r8, r0
 800185e:	4689      	mov	r9, r1
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <send_ok+0xd8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fddf 	bl	8000428 <__aeabi_f2d>
 800186a:	4682      	mov	sl, r0
 800186c:	468b      	mov	fp, r1
 800186e:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <send_ok+0xdc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fdd8 	bl	8000428 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001880:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001884:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001888:	e9cd 4500 	strd	r4, r5, [sp]
 800188c:	4632      	mov	r2, r6
 800188e:	4922      	ldr	r1, [pc, #136]	@ (8001918 <send_ok+0xe0>)
 8001890:	4822      	ldr	r0, [pc, #136]	@ (800191c <send_ok+0xe4>)
 8001892:	f003 f97d 	bl	8004b90 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001896:	4821      	ldr	r0, [pc, #132]	@ (800191c <send_ok+0xe4>)
 8001898:	f7fe fc5a 	bl	8000150 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	491d      	ldr	r1, [pc, #116]	@ (800191c <send_ok+0xe4>)
 80018a6:	481e      	ldr	r0, [pc, #120]	@ (8001920 <send_ok+0xe8>)
 80018a8:	f002 f86f 	bl	800398a <HAL_UART_Transmit>
	sprintf(buf,"Ok to %d",id_r);
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <send_ok+0xec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	491d      	ldr	r1, [pc, #116]	@ (8001928 <send_ok+0xf0>)
 80018b4:	4819      	ldr	r0, [pc, #100]	@ (800191c <send_ok+0xe4>)
 80018b6:	f003 f96b 	bl	8004b90 <siprintf>
	lora_begin_packet(&lora);
 80018ba:	481c      	ldr	r0, [pc, #112]	@ (800192c <send_ok+0xf4>)
 80018bc:	f7ff fc96 	bl	80011ec <lora_begin_packet>
	lora_tx(&lora, (uint8_t *)buf, strlen(buf));
 80018c0:	4816      	ldr	r0, [pc, #88]	@ (800191c <send_ok+0xe4>)
 80018c2:	f7fe fc45 	bl	8000150 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4913      	ldr	r1, [pc, #76]	@ (800191c <send_ok+0xe4>)
 80018ce:	4817      	ldr	r0, [pc, #92]	@ (800192c <send_ok+0xf4>)
 80018d0:	f7ff fcb4 	bl	800123c <lora_tx>
	lora_end_packet(&lora);
 80018d4:	4815      	ldr	r0, [pc, #84]	@ (800192c <send_ok+0xf4>)
 80018d6:	f7ff fce8 	bl	80012aa <lora_end_packet>
	sprintf(buf,"Da gui ok cho node\r\n");
 80018da:	4915      	ldr	r1, [pc, #84]	@ (8001930 <send_ok+0xf8>)
 80018dc:	480f      	ldr	r0, [pc, #60]	@ (800191c <send_ok+0xe4>)
 80018de:	f003 f957 	bl	8004b90 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80018e2:	480e      	ldr	r0, [pc, #56]	@ (800191c <send_ok+0xe4>)
 80018e4:	f7fe fc34 	bl	8000150 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	490a      	ldr	r1, [pc, #40]	@ (800191c <send_ok+0xe4>)
 80018f2:	480b      	ldr	r0, [pc, #44]	@ (8001920 <send_ok+0xe8>)
 80018f4:	f002 f849 	bl	800398a <HAL_UART_Transmit>
}
 80018f8:	bf00      	nop
 80018fa:	3704      	adds	r7, #4
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	200002f4 	.word	0x200002f4
 8001908:	20000310 	.word	0x20000310
 800190c:	20000314 	.word	0x20000314
 8001910:	20000300 	.word	0x20000300
 8001914:	20000304 	.word	0x20000304
 8001918:	08008d20 	.word	0x08008d20
 800191c:	20000268 	.word	0x20000268
 8001920:	20000380 	.word	0x20000380
 8001924:	200002f8 	.word	0x200002f8
 8001928:	08008d4c 	.word	0x08008d4c
 800192c:	20000220 	.word	0x20000220
 8001930:	08008d58 	.word	0x08008d58

08001934 <main>:
  * @brief  The application entry point.
  * @retval int
  */
// Main Function
int main(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  HAL_Init();																	// HAL library Initialization
 8001938:	f000 fb1e 	bl	8001f78 <HAL_Init>
  SystemClock_Config();												// System clock Initialization
 800193c:	f000 f88e 	bl	8001a5c <SystemClock_Config>
  MX_GPIO_Init();															// GPIO Pins Initialization
 8001940:	f7ff fd24 	bl	800138c <MX_GPIO_Init>
  MX_SPI1_Init();															// SPI Communication Initialization
 8001944:	f000 f8d6 	bl	8001af4 <MX_SPI1_Init>
  MX_USART3_UART_Init(); 											// UART1 Communication Initialization
 8001948:	f000 fa7a 	bl	8001e40 <MX_USART3_UART_Init>

	//lora_pins.dio0.port  = LORA_DIO0_PORT;
	//lora_pins.dio0.pin   = LORA_DIO0_PIN;
	lora_pins.nss.port   = LORA_SS_PORT;				// NSS pin to which port is connected
 800194c:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <main+0xfc>)
 800194e:	4a39      	ldr	r2, [pc, #228]	@ (8001a34 <main+0x100>)
 8001950:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;					// NSS pin to which pin is connected
 8001952:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <main+0xfc>)
 8001954:	2210      	movs	r2, #16
 8001956:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;			// RESET pin to which port is connected
 8001958:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <main+0xfc>)
 800195a:	4a37      	ldr	r2, [pc, #220]	@ (8001a38 <main+0x104>)
 800195c:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;			// RESET pin to which pin is connected
 800195e:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <main+0xfc>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <main+0xfc>)
 8001966:	4a35      	ldr	r2, [pc, #212]	@ (8001a3c <main+0x108>)
 8001968:	619a      	str	r2, [r3, #24]

	lora.pin = &lora_pins;
 800196a:	4b35      	ldr	r3, [pc, #212]	@ (8001a40 <main+0x10c>)
 800196c:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <main+0xfc>)
 800196e:	601a      	str	r2, [r3, #0]
	//lora.frequency = FREQ_433MHZ;							// 433MHZ Frequency
	lora.frequency = FREQ_433_02MHZ;						// 433.06MHZ Frequency
 8001970:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <main+0x10c>)
 8001972:	2201      	movs	r2, #1
 8001974:	711a      	strb	r2, [r3, #4]
	//lora.frequency = FREQ_433_15MHZ;							// 433.15 MHZ Frequency
	//lora.frequency = FREQ_865MHZ;								// 865MHZ Frequency
	//lora.frequency = FREQ_866MHZ;								// 866MHZ Frequency
	//lora.frequency = FREQ_867MHZ;								// 867MHZ Frequency

	sprintf(msg,"Configuring LoRa module\r\n");
 8001976:	4933      	ldr	r1, [pc, #204]	@ (8001a44 <main+0x110>)
 8001978:	4833      	ldr	r0, [pc, #204]	@ (8001a48 <main+0x114>)
 800197a:	f003 f909 	bl	8004b90 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)msg,strlen(msg),1000);
 800197e:	4832      	ldr	r0, [pc, #200]	@ (8001a48 <main+0x114>)
 8001980:	f7fe fbe6 	bl	8000150 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198c:	492e      	ldr	r1, [pc, #184]	@ (8001a48 <main+0x114>)
 800198e:	482f      	ldr	r0, [pc, #188]	@ (8001a4c <main+0x118>)
 8001990:	f001 fffb 	bl	800398a <HAL_UART_Transmit>

	while(lora_init(&lora)){										// Initialize the lora module
 8001994:	e012      	b.n	80019bc <main+0x88>
		sprintf(msg,"LoRa Failed\r\n");
 8001996:	492e      	ldr	r1, [pc, #184]	@ (8001a50 <main+0x11c>)
 8001998:	482b      	ldr	r0, [pc, #172]	@ (8001a48 <main+0x114>)
 800199a:	f003 f8f9 	bl	8004b90 <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t *)msg,strlen(msg),1000);
 800199e:	482a      	ldr	r0, [pc, #168]	@ (8001a48 <main+0x114>)
 80019a0:	f7fe fbd6 	bl	8000150 <strlen>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ac:	4926      	ldr	r1, [pc, #152]	@ (8001a48 <main+0x114>)
 80019ae:	4827      	ldr	r0, [pc, #156]	@ (8001a4c <main+0x118>)
 80019b0:	f001 ffeb 	bl	800398a <HAL_UART_Transmit>
		HAL_Delay(1000);
 80019b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b8:	f000 fb40 	bl	800203c <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 80019bc:	4820      	ldr	r0, [pc, #128]	@ (8001a40 <main+0x10c>)
 80019be:	f7ff fb1d 	bl	8000ffc <lora_init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e6      	bne.n	8001996 <main+0x62>
	}
	sprintf(msg,"Done configuring LoRaModule\r\n");
 80019c8:	4922      	ldr	r1, [pc, #136]	@ (8001a54 <main+0x120>)
 80019ca:	481f      	ldr	r0, [pc, #124]	@ (8001a48 <main+0x114>)
 80019cc:	f003 f8e0 	bl	8004b90 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)msg,strlen(msg),1000);
 80019d0:	481d      	ldr	r0, [pc, #116]	@ (8001a48 <main+0x114>)
 80019d2:	f7fe fbbd 	bl	8000150 <strlen>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	491a      	ldr	r1, [pc, #104]	@ (8001a48 <main+0x114>)
 80019e0:	481a      	ldr	r0, [pc, #104]	@ (8001a4c <main+0x118>)
 80019e2:	f001 ffd2 	bl	800398a <HAL_UART_Transmit>

  while (1)																		// Inifinite Loop
  {
	  	time_out =0;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <main+0x124>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
		send_broadcast();
 80019ec:	f7ff fd2c 	bl	8001448 <send_broadcast>
		listen_register();
 80019f0:	f7ff fd78 	bl	80014e4 <listen_register>
		if(time_out) continue;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <main+0x124>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d114      	bne.n	8001a26 <main+0xf2>
		send_stt();
 80019fc:	f7ff fe00 	bl	8001600 <send_stt>
		while(!listen_data()){
 8001a00:	e001      	b.n	8001a06 <main+0xd2>
			send_stt();
 8001a02:	f7ff fdfd 	bl	8001600 <send_stt>
		while(!listen_data()){
 8001a06:	f7ff fe8f 	bl	8001728 <listen_data>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f8      	beq.n	8001a02 <main+0xce>
		}
		if(time_out) continue;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <main+0x124>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d108      	bne.n	8001a2a <main+0xf6>
		send_ok();
 8001a18:	f7ff ff0e 	bl	8001838 <send_ok>
		HAL_Delay(1000);
 8001a1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a20:	f000 fb0c 	bl	800203c <HAL_Delay>
 8001a24:	e7df      	b.n	80019e6 <main+0xb2>
		if(time_out) continue;
 8001a26:	bf00      	nop
 8001a28:	e7dd      	b.n	80019e6 <main+0xb2>
		if(time_out) continue;
 8001a2a:	bf00      	nop
	  	time_out =0;
 8001a2c:	e7db      	b.n	80019e6 <main+0xb2>
 8001a2e:	bf00      	nop
 8001a30:	20000204 	.word	0x20000204
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	20000324 	.word	0x20000324
 8001a40:	20000220 	.word	0x20000220
 8001a44:	08008d70 	.word	0x08008d70
 8001a48:	20000228 	.word	0x20000228
 8001a4c:	20000380 	.word	0x20000380
 8001a50:	08008d8c 	.word	0x08008d8c
 8001a54:	08008d9c 	.word	0x08008d9c
 8001a58:	20000320 	.word	0x20000320

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b090      	sub	sp, #64	@ 0x40
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0318 	add.w	r3, r7, #24
 8001a66:	2228      	movs	r2, #40	@ 0x28
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 f91f 	bl	8004cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	2302      	movs	r3, #2
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a9a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fd6d 	bl	8002584 <HAL_RCC_OscConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ab0:	f000 f819 	bl	8001ae6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 ffda 	bl	8002a88 <HAL_RCC_ClockConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ada:	f000 f804 	bl	8001ae6 <Error_Handler>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3740      	adds	r7, #64	@ 0x40
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aea:	b672      	cpsid	i
}
 8001aec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aee:	bf00      	nop
 8001af0:	e7fd      	b.n	8001aee <Error_Handler+0x8>
	...

08001af4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001afa:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <MX_SPI1_Init+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b28:	2210      	movs	r2, #16
 8001b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b40:	220a      	movs	r2, #10
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b46:	f001 f92d 	bl	8002da4 <HAL_SPI_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b50:	f7ff ffc9 	bl	8001ae6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000324 	.word	0x20000324
 8001b5c:	40013000 	.word	0x40013000

08001b60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d12f      	bne.n	8001be0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001b86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bb0:	23a0      	movs	r3, #160	@ 0xa0
 8001bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480b      	ldr	r0, [pc, #44]	@ (8001bf0 <HAL_SPI_MspInit+0x90>)
 8001bc4:	f000 fb42 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bc8:	2340      	movs	r3, #64	@ 0x40
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <HAL_SPI_MspInit+0x90>)
 8001bdc:	f000 fb36 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40013000 	.word	0x40013000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_MspInit+0x5c>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <HAL_MspInit+0x5c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_MspInit+0x5c>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_MspInit+0x5c>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_MspInit+0x5c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_MspInit+0x5c>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_MspInit+0x60>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <HAL_MspInit+0x60>)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010000 	.word	0x40010000

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <MemManage_Handler+0x4>

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f9ac 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <_kill>:

int _kill(int pid, int sig)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cc8:	f003 f844 	bl	8004d54 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2216      	movs	r2, #22
 8001cd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_exit>:

void _exit (int status)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffe7 	bl	8001cbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <_exit+0x12>

08001cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
  }

  return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x12>
  }
  return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_close>:

int _close(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <_isatty>:

int _isatty(int file)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	@ (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f002 ffac 	bl	8004d54 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20005000 	.word	0x20005000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	2000037c 	.word	0x2000037c
 8001e30:	20000518 	.word	0x20000518

08001e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <MX_USART3_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e78:	f001 fd37 	bl	80038ea <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e82:	f7ff fe30 	bl	8001ae6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000380 	.word	0x20000380
 8001e90:	40004800 	.word	0x40004800

08001e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <HAL_UART_MspInit+0x8c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d131      	bne.n	8001f18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_UART_MspInit+0x90>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f24 <HAL_UART_MspInit+0x90>)
 8001eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ebe:	61d3      	str	r3, [r2, #28]
 8001ec0:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_UART_MspInit+0x90>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <HAL_UART_MspInit+0x90>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <HAL_UART_MspInit+0x90>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_UART_MspInit+0x90>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480b      	ldr	r0, [pc, #44]	@ (8001f28 <HAL_UART_MspInit+0x94>)
 8001efa:	f000 f9a7 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001efe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4619      	mov	r1, r3
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <HAL_UART_MspInit+0x94>)
 8001f14:	f000 f99a 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40004800 	.word	0x40004800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f2c:	f7ff ff82 	bl	8001e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480b      	ldr	r0, [pc, #44]	@ (8001f60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f32:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f34:	4a0c      	ldr	r2, [pc, #48]	@ (8001f68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f48:	4c09      	ldr	r4, [pc, #36]	@ (8001f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f56:	f002 ff03 	bl	8004d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f5a:	f7ff fceb 	bl	8001934 <main>
  bx lr
 8001f5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f68:	0800927c 	.word	0x0800927c
  ldr r2, =_sbss
 8001f6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f70:	20000518 	.word	0x20000518

08001f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC1_2_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_Init+0x28>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <HAL_Init+0x28>)
 8001f82:	f043 0310 	orr.w	r3, r3, #16
 8001f86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f92b 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fe2e 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f935 	bl	8002232 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 f90b 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000018 	.word	0x20000018
 8002000:	20000014 	.word	0x20000014

08002004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_IncTick+0x1c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_IncTick+0x20>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a03      	ldr	r2, [pc, #12]	@ (8002024 <HAL_IncTick+0x20>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	20000018 	.word	0x20000018
 8002024:	200003c8 	.word	0x200003c8

08002028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b02      	ldr	r3, [pc, #8]	@ (8002038 <HAL_GetTick+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	200003c8 	.word	0x200003c8

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fff0 	bl	8002028 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffe0 	bl	8002028 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000018 	.word	0x20000018

08002084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b6:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	@ (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	@ (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff90 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff49 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff5e 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff90 	bl	800213c <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5f 	bl	80020e8 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffb0 	bl	80021a0 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	@ 0x2c
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e169      	b.n	8002534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002260:	2201      	movs	r2, #1
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	429a      	cmp	r2, r3
 800227a:	f040 8158 	bne.w	800252e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a9a      	ldr	r2, [pc, #616]	@ (80024ec <HAL_GPIO_Init+0x2a0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d05e      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002288:	4a98      	ldr	r2, [pc, #608]	@ (80024ec <HAL_GPIO_Init+0x2a0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d875      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800228e:	4a98      	ldr	r2, [pc, #608]	@ (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d058      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002294:	4a96      	ldr	r2, [pc, #600]	@ (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d86f      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800229a:	4a96      	ldr	r2, [pc, #600]	@ (80024f4 <HAL_GPIO_Init+0x2a8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d052      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022a0:	4a94      	ldr	r2, [pc, #592]	@ (80024f4 <HAL_GPIO_Init+0x2a8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d869      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022a6:	4a94      	ldr	r2, [pc, #592]	@ (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04c      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022ac:	4a92      	ldr	r2, [pc, #584]	@ (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d863      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022b2:	4a92      	ldr	r2, [pc, #584]	@ (80024fc <HAL_GPIO_Init+0x2b0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d046      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022b8:	4a90      	ldr	r2, [pc, #576]	@ (80024fc <HAL_GPIO_Init+0x2b0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d85d      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d82a      	bhi.n	8002318 <HAL_GPIO_Init+0xcc>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d859      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022c6:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <HAL_GPIO_Init+0x80>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	08002347 	.word	0x08002347
 80022d0:	08002321 	.word	0x08002321
 80022d4:	08002333 	.word	0x08002333
 80022d8:	08002375 	.word	0x08002375
 80022dc:	0800237b 	.word	0x0800237b
 80022e0:	0800237b 	.word	0x0800237b
 80022e4:	0800237b 	.word	0x0800237b
 80022e8:	0800237b 	.word	0x0800237b
 80022ec:	0800237b 	.word	0x0800237b
 80022f0:	0800237b 	.word	0x0800237b
 80022f4:	0800237b 	.word	0x0800237b
 80022f8:	0800237b 	.word	0x0800237b
 80022fc:	0800237b 	.word	0x0800237b
 8002300:	0800237b 	.word	0x0800237b
 8002304:	0800237b 	.word	0x0800237b
 8002308:	0800237b 	.word	0x0800237b
 800230c:	0800237b 	.word	0x0800237b
 8002310:	08002329 	.word	0x08002329
 8002314:	0800233d 	.word	0x0800233d
 8002318:	4a79      	ldr	r2, [pc, #484]	@ (8002500 <HAL_GPIO_Init+0x2b4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231e:	e02c      	b.n	800237a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e029      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	3304      	adds	r3, #4
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e024      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	3308      	adds	r3, #8
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e01f      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	330c      	adds	r3, #12
 8002342:	623b      	str	r3, [r7, #32]
          break;
 8002344:	e01a      	b.n	800237c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234e:	2304      	movs	r3, #4
 8002350:	623b      	str	r3, [r7, #32]
          break;
 8002352:	e013      	b.n	800237c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	611a      	str	r2, [r3, #16]
          break;
 8002366:	e009      	b.n	800237c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002368:	2308      	movs	r3, #8
 800236a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	615a      	str	r2, [r3, #20]
          break;
 8002372:	e003      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x130>
          break;
 800237a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	@ 0xff
 8002380:	d801      	bhi.n	8002386 <HAL_GPIO_Init+0x13a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	e001      	b.n	800238a <HAL_GPIO_Init+0x13e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	@ 0xff
 8002390:	d802      	bhi.n	8002398 <HAL_GPIO_Init+0x14c>
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x152>
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	3b08      	subs	r3, #8
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	210f      	movs	r1, #15
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80b1 	beq.w	800252e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e4:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_GPIO_Init+0x2bc>)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a40      	ldr	r2, [pc, #256]	@ (800250c <HAL_GPIO_Init+0x2c0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3f      	ldr	r2, [pc, #252]	@ (8002510 <HAL_GPIO_Init+0x2c4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3e      	ldr	r2, [pc, #248]	@ (8002514 <HAL_GPIO_Init+0x2c8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <HAL_GPIO_Init+0x2cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1e0>
 8002428:	2303      	movs	r3, #3
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 800242c:	2304      	movs	r3, #4
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002438:	2300      	movs	r3, #0
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244a:	492f      	ldr	r1, [pc, #188]	@ (8002508 <HAL_GPIO_Init+0x2bc>)
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	492c      	ldr	r1, [pc, #176]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4928      	ldr	r1, [pc, #160]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4922      	ldr	r1, [pc, #136]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	491e      	ldr	r1, [pc, #120]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4918      	ldr	r1, [pc, #96]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4914      	ldr	r1, [pc, #80]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	490e      	ldr	r1, [pc, #56]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e021      	b.n	800252e <HAL_GPIO_Init+0x2e2>
 80024ea:	bf00      	nop
 80024ec:	10320000 	.word	0x10320000
 80024f0:	10310000 	.word	0x10310000
 80024f4:	10220000 	.word	0x10220000
 80024f8:	10210000 	.word	0x10210000
 80024fc:	10120000 	.word	0x10120000
 8002500:	10110000 	.word	0x10110000
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000
 800250c:	40010800 	.word	0x40010800
 8002510:	40010c00 	.word	0x40010c00
 8002514:	40011000 	.word	0x40011000
 8002518:	40011400 	.word	0x40011400
 800251c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	43db      	mvns	r3, r3
 8002528:	4909      	ldr	r1, [pc, #36]	@ (8002550 <HAL_GPIO_Init+0x304>)
 800252a:	4013      	ands	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	f47f ae8e 	bne.w	8002260 <HAL_GPIO_Init+0x14>
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	372c      	adds	r7, #44	@ 0x2c
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e272      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b92      	ldr	r3, [pc, #584]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b0:	4b8f      	ldr	r3, [pc, #572]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
 80025bc:	4b8c      	ldr	r3, [pc, #560]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d06c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x12c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d168      	bne.n	80026b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e24c      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x76>
 80025ec:	4b80      	ldr	r3, [pc, #512]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7f      	ldr	r2, [pc, #508]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e02e      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x98>
 8002602:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7a      	ldr	r2, [pc, #488]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b78      	ldr	r3, [pc, #480]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a77      	ldr	r2, [pc, #476]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0xbc>
 8002626:	4b72      	ldr	r3, [pc, #456]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a71      	ldr	r2, [pc, #452]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b6f      	ldr	r3, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 8002640:	4b6b      	ldr	r3, [pc, #428]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6a      	ldr	r2, [pc, #424]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a67      	ldr	r2, [pc, #412]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fce2 	bl	8002028 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff fcde 	bl	8002028 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e200      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xe4>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fcce 	bl	8002028 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fcca 	bl	8002028 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1ec      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x10c>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026be:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ca:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
 80026d6:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1c0      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4939      	ldr	r1, [pc, #228]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	e03a      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <HAL_RCC_OscConfig+0x270>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff fc83 	bl	8002028 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7ff fc7f 	bl	8002028 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1a1      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4927      	ldr	r1, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <HAL_RCC_OscConfig+0x270>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fc62 	bl	8002028 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002768:	f7ff fc5e 	bl	8002028 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e180      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03a      	beq.n	8002808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d019      	beq.n	80027ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279a:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <HAL_RCC_OscConfig+0x274>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7ff fc42 	bl	8002028 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff fc3e 	bl	8002028 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e160      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 face 	bl	8002d68 <RCC_Delay>
 80027cc:	e01c      	b.n	8002808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_RCC_OscConfig+0x274>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7ff fc28 	bl	8002028 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027da:	e00f      	b.n	80027fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff fc24 	bl	8002028 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d908      	bls.n	80027fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e146      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	42420000 	.word	0x42420000
 80027f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b92      	ldr	r3, [pc, #584]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e9      	bne.n	80027dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a6 	beq.w	8002962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a87      	ldr	r2, [pc, #540]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b85      	ldr	r3, [pc, #532]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b82      	ldr	r3, [pc, #520]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7e      	ldr	r2, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7ff fbe5 	bl	8002028 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7ff fbe1 	bl	8002028 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	@ 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e103      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x312>
 8002888:	4b6f      	ldr	r3, [pc, #444]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e02d      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x334>
 800289e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a69      	ldr	r2, [pc, #420]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b67      	ldr	r3, [pc, #412]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a66      	ldr	r2, [pc, #408]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	e01c      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x356>
 80028c0:	4b61      	ldr	r3, [pc, #388]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a60      	ldr	r2, [pc, #384]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e00b      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028da:	4b5b      	ldr	r3, [pc, #364]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a5a      	ldr	r2, [pc, #360]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b58      	ldr	r3, [pc, #352]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a57      	ldr	r2, [pc, #348]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d015      	beq.n	8002926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff fb95 	bl	8002028 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7ff fb91 	bl	8002028 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0b1      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	4b4b      	ldr	r3, [pc, #300]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ee      	beq.n	8002902 <HAL_RCC_OscConfig+0x37e>
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7ff fb7f 	bl	8002028 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7ff fb7b 	bl	8002028 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e09b      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	4b40      	ldr	r3, [pc, #256]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b3c      	ldr	r3, [pc, #240]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8087 	beq.w	8002a7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d061      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d146      	bne.n	8002a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b33      	ldr	r3, [pc, #204]	@ (8002a50 <HAL_RCC_OscConfig+0x4cc>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7ff fb4f 	bl	8002028 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7ff fb4b 	bl	8002028 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e06d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b4:	d108      	bne.n	80029c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b6:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4921      	ldr	r1, [pc, #132]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a19      	ldr	r1, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	430b      	orrs	r3, r1
 80029da:	491b      	ldr	r1, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCC_OscConfig+0x4cc>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7ff fb1f 	bl	8002028 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7ff fb1b 	bl	8002028 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x46a>
 8002a0c:	e035      	b.n	8002a7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_RCC_OscConfig+0x4cc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7ff fb08 	bl	8002028 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7ff fb04 	bl	8002028 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e026      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x498>
 8002a3a:	e01e      	b.n	8002a7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e019      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCC_OscConfig+0x500>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0d0      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b67      	ldr	r3, [pc, #412]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4965      	ldr	r1, [pc, #404]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d040      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d115      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e073      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e06b      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4936      	ldr	r1, [pc, #216]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b78:	f7ff fa56 	bl	8002028 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7ff fa52 	bl	8002028 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e053      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d210      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0207 	bic.w	r2, r3, #7
 8002bbe:	4922      	ldr	r1, [pc, #136]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f821 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	490a      	ldr	r1, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	5ccb      	ldrb	r3, [r1, r3]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	@ (8002c54 <HAL_RCC_ClockConfig+0x1cc>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1d0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f9b4 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08008df8 	.word	0x08008df8
 8002c54:	20000010 	.word	0x20000010
 8002c58:	20000014 	.word	0x20000014

08002c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x30>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x36>
 8002c8a:	e027      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c8e:	613b      	str	r3, [r7, #16]
      break;
 8002c90:	e027      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002caa:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0c5b      	lsrs	r3, r3, #17
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	4a11      	ldr	r2, [pc, #68]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cbe:	fb03 f202 	mul.w	r2, r3, r2
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e004      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	693b      	ldr	r3, [r7, #16]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	007a1200 	.word	0x007a1200
 8002cf8:	08008e10 	.word	0x08008e10
 8002cfc:	08008e20 	.word	0x08008e20
 8002d00:	003d0900 	.word	0x003d0900

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b02      	ldr	r3, [pc, #8]	@ (8002d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000010 	.word	0x20000010

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff2 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08008e08 	.word	0x08008e08

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	0adb      	lsrs	r3, r3, #11
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08008e08 	.word	0x08008e08

08002d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <RCC_Delay+0x34>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <RCC_Delay+0x38>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0a5b      	lsrs	r3, r3, #9
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d84:	bf00      	nop
  }
  while (Delay --);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	60fa      	str	r2, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f9      	bne.n	8002d84 <RCC_Delay+0x1c>
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	20000010 	.word	0x20000010
 8002da0:	10624dd3 	.word	0x10624dd3

08002da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e076      	b.n	8002ea4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc6:	d009      	beq.n	8002ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
 8002dce:	e005      	b.n	8002ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe feb2 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	0c1a      	lsrs	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f002 0204 	and.w	r2, r2, #4
 8002e82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ebc:	f7ff f8b4 	bl	8002028 <HAL_GetTick>
 8002ec0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e12a      	b.n	800312c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Transmit+0x36>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e122      	b.n	800312c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_SPI_Transmit+0x48>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e11b      	b.n	800312c <HAL_SPI_Transmit+0x280>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2203      	movs	r2, #3
 8002f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f42:	d10f      	bne.n	8002f64 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6e:	2b40      	cmp	r3, #64	@ 0x40
 8002f70:	d007      	beq.n	8002f82 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f8a:	d152      	bne.n	8003032 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_Transmit+0xee>
 8002f94:	8b7b      	ldrh	r3, [r7, #26]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d145      	bne.n	8003026 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	881a      	ldrh	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	1c9a      	adds	r2, r3, #2
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fbe:	e032      	b.n	8003026 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d112      	bne.n	8002ff4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ff2:	e018      	b.n	8003026 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff4:	f7ff f818 	bl	8002028 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d803      	bhi.n	800300c <HAL_SPI_Transmit+0x160>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d102      	bne.n	8003012 <HAL_SPI_Transmit+0x166>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e082      	b.n	800312c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1c7      	bne.n	8002fc0 <HAL_SPI_Transmit+0x114>
 8003030:	e053      	b.n	80030da <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_Transmit+0x194>
 800303a:	8b7b      	ldrh	r3, [r7, #26]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d147      	bne.n	80030d0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003066:	e033      	b.n	80030d0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d113      	bne.n	800309e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800309c:	e018      	b.n	80030d0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309e:	f7fe ffc3 	bl	8002028 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d803      	bhi.n	80030b6 <HAL_SPI_Transmit+0x20a>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d102      	bne.n	80030bc <HAL_SPI_Transmit+0x210>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e02d      	b.n	800312c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1c6      	bne.n	8003068 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fbd2 	bl	8003888 <SPI_EndRxTxTransaction>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800312a:	2300      	movs	r3, #0
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d001      	beq.n	8003154 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
 8003152:	e104      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800315c:	d112      	bne.n	8003184 <HAL_SPI_Receive+0x50>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2204      	movs	r2, #4
 800316a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8f3 	bl	8003366 <HAL_SPI_TransmitReceive>
 8003180:	4603      	mov	r3, r0
 8003182:	e0ec      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003184:	f7fe ff50 	bl	8002028 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Receive+0x62>
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e1      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_SPI_Receive+0x74>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0da      	b.n	800335e <HAL_SPI_Receive+0x22a>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2204      	movs	r2, #4
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f6:	d10f      	bne.n	8003218 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003206:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003222:	2b40      	cmp	r3, #64	@ 0x40
 8003224:	d007      	beq.n	8003236 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d170      	bne.n	8003320 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800323e:	e035      	b.n	80032ac <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d115      	bne.n	800327a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f103 020c 	add.w	r2, r3, #12
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	7812      	ldrb	r2, [r2, #0]
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003278:	e018      	b.n	80032ac <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800327a:	f7fe fed5 	bl	8002028 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d803      	bhi.n	8003292 <HAL_SPI_Receive+0x15e>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d102      	bne.n	8003298 <HAL_SPI_Receive+0x164>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e058      	b.n	800335e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1c4      	bne.n	8003240 <HAL_SPI_Receive+0x10c>
 80032b6:	e038      	b.n	800332a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d113      	bne.n	80032ee <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	b292      	uxth	r2, r2
 80032d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ec:	e018      	b.n	8003320 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ee:	f7fe fe9b 	bl	8002028 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d803      	bhi.n	8003306 <HAL_SPI_Receive+0x1d2>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d102      	bne.n	800330c <HAL_SPI_Receive+0x1d8>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e01e      	b.n	800335e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1c6      	bne.n	80032b8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fa58 	bl	80037e4 <SPI_EndRxTransaction>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800335c:	2300      	movs	r3, #0
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08a      	sub	sp, #40	@ 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003374:	2301      	movs	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003378:	f7fe fe56 	bl	8002028 <HAL_GetTick>
 800337c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003384:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d00c      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x4a>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800339c:	d106      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x46>
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d001      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	e17f      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x5c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x5c>
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e174      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x6e>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e16d      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d003      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2205      	movs	r2, #5
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	887a      	ldrh	r2, [r7, #2]
 8003412:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d007      	beq.n	8003444 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800344c:	d17e      	bne.n	800354c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_SPI_TransmitReceive+0xf6>
 8003456:	8afb      	ldrh	r3, [r7, #22]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d16c      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003480:	e059      	b.n	8003536 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d11b      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x162>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x162>
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d113      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	881a      	ldrh	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d119      	bne.n	800350a <HAL_SPI_TransmitReceive+0x1a4>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d014      	beq.n	800350a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003506:	2301      	movs	r3, #1
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800350a:	f7fe fd8d 	bl	8002028 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003516:	429a      	cmp	r2, r3
 8003518:	d80d      	bhi.n	8003536 <HAL_SPI_TransmitReceive+0x1d0>
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d009      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0bc      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1a0      	bne.n	8003482 <HAL_SPI_TransmitReceive+0x11c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d19b      	bne.n	8003482 <HAL_SPI_TransmitReceive+0x11c>
 800354a:	e082      	b.n	8003652 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_SPI_TransmitReceive+0x1f4>
 8003554:	8afb      	ldrh	r3, [r7, #22]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d171      	bne.n	800363e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003580:	e05d      	b.n	800363e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d11c      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x264>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d017      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x264>
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	2b01      	cmp	r3, #1
 800359e:	d114      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d119      	bne.n	800360c <HAL_SPI_TransmitReceive+0x2a6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d014      	beq.n	800360c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003608:	2301      	movs	r3, #1
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800360c:	f7fe fd0c 	bl	8002028 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003618:	429a      	cmp	r2, r3
 800361a:	d803      	bhi.n	8003624 <HAL_SPI_TransmitReceive+0x2be>
 800361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d102      	bne.n	800362a <HAL_SPI_TransmitReceive+0x2c4>
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e038      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d19c      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x21c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d197      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f916 	bl	8003888 <SPI_EndRxTxTransaction>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e01d      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80036ae:	2300      	movs	r3, #0
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3728      	adds	r7, #40	@ 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036c6:	b2db      	uxtb	r3, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
	...

080036d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036e4:	f7fe fca0 	bl	8002028 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036f4:	f7fe fc98 	bl	8002028 <HAL_GetTick>
 80036f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036fa:	4b39      	ldr	r3, [pc, #228]	@ (80037e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	015b      	lsls	r3, r3, #5
 8003700:	0d1b      	lsrs	r3, r3, #20
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370a:	e054      	b.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d050      	beq.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003714:	f7fe fc88 	bl	8002028 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	429a      	cmp	r2, r3
 8003722:	d902      	bls.n	800372a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d13d      	bne.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003742:	d111      	bne.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800374c:	d004      	beq.n	8003758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003756:	d107      	bne.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	d10f      	bne.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e017      	b.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d19b      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000010 	.word	0x20000010

080037e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f8:	d111      	bne.n	800381e <SPI_EndRxTransaction+0x3a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003802:	d004      	beq.n	800380e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380c:	d107      	bne.n	800381e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003826:	d117      	bne.n	8003858 <SPI_EndRxTransaction+0x74>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003830:	d112      	bne.n	8003858 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2200      	movs	r2, #0
 800383a:	2101      	movs	r1, #1
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff ff49 	bl	80036d4 <SPI_WaitFlagStateUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e013      	b.n	8003880 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	@ 0x80
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff36 	bl	80036d4 <SPI_WaitFlagStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e000      	b.n	8003880 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2201      	movs	r2, #1
 800389c:	2102      	movs	r1, #2
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff ff18 	bl	80036d4 <SPI_WaitFlagStateUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e013      	b.n	80038e2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2180      	movs	r1, #128	@ 0x80
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff ff05 	bl	80036d4 <SPI_WaitFlagStateUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e000      	b.n	80038e2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e042      	b.n	8003982 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fe fabf 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2224      	movs	r2, #36	@ 0x24
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800392c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f972 	bl	8003c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003942:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003952:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003962:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08a      	sub	sp, #40	@ 0x28
 800398e:	af02      	add	r7, sp, #8
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d175      	bne.n	8003a96 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_UART_Transmit+0x2c>
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06e      	b.n	8003a98 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	@ 0x21
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fb2e 	bl	8002028 <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e2:	d108      	bne.n	80039f6 <HAL_UART_Transmit+0x6c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	e003      	b.n	80039fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039fe:	e02e      	b.n	8003a5e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2180      	movs	r1, #128	@ 0x80
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f848 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e03a      	b.n	8003a98 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a36:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e007      	b.n	8003a50 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1cb      	bne.n	8003a00 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2140      	movs	r1, #64	@ 0x40
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f814 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
  }
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab0:	e03b      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d037      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fe fab5 	bl	8002028 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e03a      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d023      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	d020      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b40      	cmp	r3, #64	@ 0x40
 8003aec:	d01d      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d116      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f81d 	bl	8003b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00f      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d0b4      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b095      	sub	sp, #84	@ 0x54
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d119      	bne.n	8003bfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bea:	61ba      	str	r2, [r7, #24]
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c0c:	bf00      	nop
 8003c0e:	3754      	adds	r7, #84	@ 0x54
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
	...

08003c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c52:	f023 030c 	bic.w	r3, r3, #12
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d2c <UART_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c80:	f7ff f85e 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	e002      	b.n	8003c8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7ff f846 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009a      	lsls	r2, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <UART_SetConfig+0x118>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	0119      	lsls	r1, r3, #4
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009a      	lsls	r2, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <UART_SetConfig+0x118>)
 8003cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2064      	movs	r0, #100	@ 0x64
 8003cce:	fb00 f303 	mul.w	r3, r0, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	3332      	adds	r3, #50	@ 0x32
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <UART_SetConfig+0x118>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ce4:	4419      	add	r1, r3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <UART_SetConfig+0x118>)
 8003cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2064      	movs	r0, #100	@ 0x64
 8003d06:	fb00 f303 	mul.w	r3, r0, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	@ 0x32
 8003d10:	4a07      	ldr	r2, [pc, #28]	@ (8003d30 <UART_SetConfig+0x118>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	440a      	add	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	51eb851f 	.word	0x51eb851f

08003d34 <__cvt>:
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	bfbb      	ittet	lt
 8003d3e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003d42:	461d      	movlt	r5, r3
 8003d44:	2300      	movge	r3, #0
 8003d46:	232d      	movlt	r3, #45	@ 0x2d
 8003d48:	b088      	sub	sp, #32
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	bfb8      	it	lt
 8003d4e:	4614      	movlt	r4, r2
 8003d50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d52:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003d54:	7013      	strb	r3, [r2, #0]
 8003d56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d58:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d5c:	f023 0820 	bic.w	r8, r3, #32
 8003d60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d64:	d005      	beq.n	8003d72 <__cvt+0x3e>
 8003d66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d6a:	d100      	bne.n	8003d6e <__cvt+0x3a>
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e000      	b.n	8003d74 <__cvt+0x40>
 8003d72:	2303      	movs	r3, #3
 8003d74:	aa07      	add	r2, sp, #28
 8003d76:	9204      	str	r2, [sp, #16]
 8003d78:	aa06      	add	r2, sp, #24
 8003d7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d7e:	e9cd 3600 	strd	r3, r6, [sp]
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f001 f8af 	bl	8004ee8 <_dtoa_r>
 8003d8a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d8e:	4607      	mov	r7, r0
 8003d90:	d119      	bne.n	8003dc6 <__cvt+0x92>
 8003d92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d94:	07db      	lsls	r3, r3, #31
 8003d96:	d50e      	bpl.n	8003db6 <__cvt+0x82>
 8003d98:	eb00 0906 	add.w	r9, r0, r6
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4620      	mov	r0, r4
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7fc fe00 	bl	80009a8 <__aeabi_dcmpeq>
 8003da8:	b108      	cbz	r0, 8003dae <__cvt+0x7a>
 8003daa:	f8cd 901c 	str.w	r9, [sp, #28]
 8003dae:	2230      	movs	r2, #48	@ 0x30
 8003db0:	9b07      	ldr	r3, [sp, #28]
 8003db2:	454b      	cmp	r3, r9
 8003db4:	d31e      	bcc.n	8003df4 <__cvt+0xc0>
 8003db6:	4638      	mov	r0, r7
 8003db8:	9b07      	ldr	r3, [sp, #28]
 8003dba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003dbc:	1bdb      	subs	r3, r3, r7
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	b008      	add	sp, #32
 8003dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dca:	eb00 0906 	add.w	r9, r0, r6
 8003dce:	d1e5      	bne.n	8003d9c <__cvt+0x68>
 8003dd0:	7803      	ldrb	r3, [r0, #0]
 8003dd2:	2b30      	cmp	r3, #48	@ 0x30
 8003dd4:	d10a      	bne.n	8003dec <__cvt+0xb8>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4620      	mov	r0, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7fc fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8003de2:	b918      	cbnz	r0, 8003dec <__cvt+0xb8>
 8003de4:	f1c6 0601 	rsb	r6, r6, #1
 8003de8:	f8ca 6000 	str.w	r6, [sl]
 8003dec:	f8da 3000 	ldr.w	r3, [sl]
 8003df0:	4499      	add	r9, r3
 8003df2:	e7d3      	b.n	8003d9c <__cvt+0x68>
 8003df4:	1c59      	adds	r1, r3, #1
 8003df6:	9107      	str	r1, [sp, #28]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e7d9      	b.n	8003db0 <__cvt+0x7c>

08003dfc <__exponent>:
 8003dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dfe:	2900      	cmp	r1, #0
 8003e00:	bfb6      	itet	lt
 8003e02:	232d      	movlt	r3, #45	@ 0x2d
 8003e04:	232b      	movge	r3, #43	@ 0x2b
 8003e06:	4249      	neglt	r1, r1
 8003e08:	2909      	cmp	r1, #9
 8003e0a:	7002      	strb	r2, [r0, #0]
 8003e0c:	7043      	strb	r3, [r0, #1]
 8003e0e:	dd29      	ble.n	8003e64 <__exponent+0x68>
 8003e10:	f10d 0307 	add.w	r3, sp, #7
 8003e14:	461d      	mov	r5, r3
 8003e16:	270a      	movs	r7, #10
 8003e18:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	fb07 1416 	mls	r4, r7, r6, r1
 8003e22:	3430      	adds	r4, #48	@ 0x30
 8003e24:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e28:	460c      	mov	r4, r1
 8003e2a:	2c63      	cmp	r4, #99	@ 0x63
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e32:	dcf1      	bgt.n	8003e18 <__exponent+0x1c>
 8003e34:	3130      	adds	r1, #48	@ 0x30
 8003e36:	1e94      	subs	r4, r2, #2
 8003e38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	1c41      	adds	r1, r0, #1
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	d30a      	bcc.n	8003e5a <__exponent+0x5e>
 8003e44:	f10d 0309 	add.w	r3, sp, #9
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	42ac      	cmp	r4, r5
 8003e4c:	bf88      	it	hi
 8003e4e:	2300      	movhi	r3, #0
 8003e50:	3302      	adds	r3, #2
 8003e52:	4403      	add	r3, r0
 8003e54:	1a18      	subs	r0, r3, r0
 8003e56:	b003      	add	sp, #12
 8003e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e62:	e7ed      	b.n	8003e40 <__exponent+0x44>
 8003e64:	2330      	movs	r3, #48	@ 0x30
 8003e66:	3130      	adds	r1, #48	@ 0x30
 8003e68:	7083      	strb	r3, [r0, #2]
 8003e6a:	70c1      	strb	r1, [r0, #3]
 8003e6c:	1d03      	adds	r3, r0, #4
 8003e6e:	e7f1      	b.n	8003e54 <__exponent+0x58>

08003e70 <_printf_float>:
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	b091      	sub	sp, #68	@ 0x44
 8003e76:	460c      	mov	r4, r1
 8003e78:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	461f      	mov	r7, r3
 8003e80:	4605      	mov	r5, r0
 8003e82:	f000 ff1d 	bl	8004cc0 <_localeconv_r>
 8003e86:	6803      	ldr	r3, [r0, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	9308      	str	r3, [sp, #32]
 8003e8c:	f7fc f960 	bl	8000150 <strlen>
 8003e90:	2300      	movs	r3, #0
 8003e92:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e94:	f8d8 3000 	ldr.w	r3, [r8]
 8003e98:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e9a:	3307      	adds	r3, #7
 8003e9c:	f023 0307 	bic.w	r3, r3, #7
 8003ea0:	f103 0208 	add.w	r2, r3, #8
 8003ea4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ea8:	f8d4 b000 	ldr.w	fp, [r4]
 8003eac:	f8c8 2000 	str.w	r2, [r8]
 8003eb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003eb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003eba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ec6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003eca:	4b9c      	ldr	r3, [pc, #624]	@ (800413c <_printf_float+0x2cc>)
 8003ecc:	f7fc fd9e 	bl	8000a0c <__aeabi_dcmpun>
 8003ed0:	bb70      	cbnz	r0, 8003f30 <_printf_float+0xc0>
 8003ed2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	4b98      	ldr	r3, [pc, #608]	@ (800413c <_printf_float+0x2cc>)
 8003edc:	f7fc fd78 	bl	80009d0 <__aeabi_dcmple>
 8003ee0:	bb30      	cbnz	r0, 8003f30 <_printf_float+0xc0>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	4649      	mov	r1, r9
 8003eea:	f7fc fd67 	bl	80009bc <__aeabi_dcmplt>
 8003eee:	b110      	cbz	r0, 8003ef6 <_printf_float+0x86>
 8003ef0:	232d      	movs	r3, #45	@ 0x2d
 8003ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ef6:	4a92      	ldr	r2, [pc, #584]	@ (8004140 <_printf_float+0x2d0>)
 8003ef8:	4b92      	ldr	r3, [pc, #584]	@ (8004144 <_printf_float+0x2d4>)
 8003efa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003efe:	bf94      	ite	ls
 8003f00:	4690      	movls	r8, r2
 8003f02:	4698      	movhi	r8, r3
 8003f04:	2303      	movs	r3, #3
 8003f06:	f04f 0900 	mov.w	r9, #0
 8003f0a:	6123      	str	r3, [r4, #16]
 8003f0c:	f02b 0304 	bic.w	r3, fp, #4
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	4633      	mov	r3, r6
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	9700      	str	r7, [sp, #0]
 8003f1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003f1c:	f000 f9d4 	bl	80042c8 <_printf_common>
 8003f20:	3001      	adds	r0, #1
 8003f22:	f040 8090 	bne.w	8004046 <_printf_float+0x1d6>
 8003f26:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2a:	b011      	add	sp, #68	@ 0x44
 8003f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	4649      	mov	r1, r9
 8003f38:	f7fc fd68 	bl	8000a0c <__aeabi_dcmpun>
 8003f3c:	b148      	cbz	r0, 8003f52 <_printf_float+0xe2>
 8003f3e:	464b      	mov	r3, r9
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bfb8      	it	lt
 8003f44:	232d      	movlt	r3, #45	@ 0x2d
 8003f46:	4a80      	ldr	r2, [pc, #512]	@ (8004148 <_printf_float+0x2d8>)
 8003f48:	bfb8      	it	lt
 8003f4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800414c <_printf_float+0x2dc>)
 8003f50:	e7d3      	b.n	8003efa <_printf_float+0x8a>
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	d13f      	bne.n	8003fdc <_printf_float+0x16c>
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	9206      	str	r2, [sp, #24]
 8003f6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f6c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f70:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f72:	9203      	str	r2, [sp, #12]
 8003f74:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f7c:	6863      	ldr	r3, [r4, #4]
 8003f7e:	4642      	mov	r2, r8
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	4628      	mov	r0, r5
 8003f84:	464b      	mov	r3, r9
 8003f86:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f88:	f7ff fed4 	bl	8003d34 <__cvt>
 8003f8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f8e:	4680      	mov	r8, r0
 8003f90:	2947      	cmp	r1, #71	@ 0x47
 8003f92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f94:	d128      	bne.n	8003fe8 <_printf_float+0x178>
 8003f96:	1cc8      	adds	r0, r1, #3
 8003f98:	db02      	blt.n	8003fa0 <_printf_float+0x130>
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	dd40      	ble.n	8004022 <_printf_float+0x1b2>
 8003fa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8003fa4:	fa5f fa8a 	uxtb.w	sl, sl
 8003fa8:	4652      	mov	r2, sl
 8003faa:	3901      	subs	r1, #1
 8003fac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003fb0:	910d      	str	r1, [sp, #52]	@ 0x34
 8003fb2:	f7ff ff23 	bl	8003dfc <__exponent>
 8003fb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fb8:	4681      	mov	r9, r0
 8003fba:	1813      	adds	r3, r2, r0
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	6123      	str	r3, [r4, #16]
 8003fc0:	dc02      	bgt.n	8003fc8 <_printf_float+0x158>
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	07d2      	lsls	r2, r2, #31
 8003fc6:	d501      	bpl.n	8003fcc <_printf_float+0x15c>
 8003fc8:	3301      	adds	r3, #1
 8003fca:	6123      	str	r3, [r4, #16]
 8003fcc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d09e      	beq.n	8003f12 <_printf_float+0xa2>
 8003fd4:	232d      	movs	r3, #45	@ 0x2d
 8003fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fda:	e79a      	b.n	8003f12 <_printf_float+0xa2>
 8003fdc:	2947      	cmp	r1, #71	@ 0x47
 8003fde:	d1bf      	bne.n	8003f60 <_printf_float+0xf0>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1bd      	bne.n	8003f60 <_printf_float+0xf0>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e7ba      	b.n	8003f5e <_printf_float+0xee>
 8003fe8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fec:	d9dc      	bls.n	8003fa8 <_printf_float+0x138>
 8003fee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ff2:	d118      	bne.n	8004026 <_printf_float+0x1b6>
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	dd0b      	ble.n	8004012 <_printf_float+0x1a2>
 8003ffa:	6121      	str	r1, [r4, #16]
 8003ffc:	b913      	cbnz	r3, 8004004 <_printf_float+0x194>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	07d0      	lsls	r0, r2, #31
 8004002:	d502      	bpl.n	800400a <_printf_float+0x19a>
 8004004:	3301      	adds	r3, #1
 8004006:	440b      	add	r3, r1
 8004008:	6123      	str	r3, [r4, #16]
 800400a:	f04f 0900 	mov.w	r9, #0
 800400e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004010:	e7dc      	b.n	8003fcc <_printf_float+0x15c>
 8004012:	b913      	cbnz	r3, 800401a <_printf_float+0x1aa>
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	07d2      	lsls	r2, r2, #31
 8004018:	d501      	bpl.n	800401e <_printf_float+0x1ae>
 800401a:	3302      	adds	r3, #2
 800401c:	e7f4      	b.n	8004008 <_printf_float+0x198>
 800401e:	2301      	movs	r3, #1
 8004020:	e7f2      	b.n	8004008 <_printf_float+0x198>
 8004022:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004028:	4299      	cmp	r1, r3
 800402a:	db05      	blt.n	8004038 <_printf_float+0x1c8>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	6121      	str	r1, [r4, #16]
 8004030:	07d8      	lsls	r0, r3, #31
 8004032:	d5ea      	bpl.n	800400a <_printf_float+0x19a>
 8004034:	1c4b      	adds	r3, r1, #1
 8004036:	e7e7      	b.n	8004008 <_printf_float+0x198>
 8004038:	2900      	cmp	r1, #0
 800403a:	bfcc      	ite	gt
 800403c:	2201      	movgt	r2, #1
 800403e:	f1c1 0202 	rsble	r2, r1, #2
 8004042:	4413      	add	r3, r2
 8004044:	e7e0      	b.n	8004008 <_printf_float+0x198>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	055a      	lsls	r2, r3, #21
 800404a:	d407      	bmi.n	800405c <_printf_float+0x1ec>
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	4642      	mov	r2, r8
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
 8004054:	47b8      	blx	r7
 8004056:	3001      	adds	r0, #1
 8004058:	d12b      	bne.n	80040b2 <_printf_float+0x242>
 800405a:	e764      	b.n	8003f26 <_printf_float+0xb6>
 800405c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004060:	f240 80dc 	bls.w	800421c <_printf_float+0x3ac>
 8004064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004068:	2200      	movs	r2, #0
 800406a:	2300      	movs	r3, #0
 800406c:	f7fc fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004070:	2800      	cmp	r0, #0
 8004072:	d033      	beq.n	80040dc <_printf_float+0x26c>
 8004074:	2301      	movs	r3, #1
 8004076:	4631      	mov	r1, r6
 8004078:	4628      	mov	r0, r5
 800407a:	4a35      	ldr	r2, [pc, #212]	@ (8004150 <_printf_float+0x2e0>)
 800407c:	47b8      	blx	r7
 800407e:	3001      	adds	r0, #1
 8004080:	f43f af51 	beq.w	8003f26 <_printf_float+0xb6>
 8004084:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004088:	4543      	cmp	r3, r8
 800408a:	db02      	blt.n	8004092 <_printf_float+0x222>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	07d8      	lsls	r0, r3, #31
 8004090:	d50f      	bpl.n	80040b2 <_printf_float+0x242>
 8004092:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004096:	4631      	mov	r1, r6
 8004098:	4628      	mov	r0, r5
 800409a:	47b8      	blx	r7
 800409c:	3001      	adds	r0, #1
 800409e:	f43f af42 	beq.w	8003f26 <_printf_float+0xb6>
 80040a2:	f04f 0900 	mov.w	r9, #0
 80040a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80040aa:	f104 0a1a 	add.w	sl, r4, #26
 80040ae:	45c8      	cmp	r8, r9
 80040b0:	dc09      	bgt.n	80040c6 <_printf_float+0x256>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	079b      	lsls	r3, r3, #30
 80040b6:	f100 8102 	bmi.w	80042be <_printf_float+0x44e>
 80040ba:	68e0      	ldr	r0, [r4, #12]
 80040bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040be:	4298      	cmp	r0, r3
 80040c0:	bfb8      	it	lt
 80040c2:	4618      	movlt	r0, r3
 80040c4:	e731      	b.n	8003f2a <_printf_float+0xba>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4652      	mov	r2, sl
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	f43f af28 	beq.w	8003f26 <_printf_float+0xb6>
 80040d6:	f109 0901 	add.w	r9, r9, #1
 80040da:	e7e8      	b.n	80040ae <_printf_float+0x23e>
 80040dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040de:	2b00      	cmp	r3, #0
 80040e0:	dc38      	bgt.n	8004154 <_printf_float+0x2e4>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4631      	mov	r1, r6
 80040e6:	4628      	mov	r0, r5
 80040e8:	4a19      	ldr	r2, [pc, #100]	@ (8004150 <_printf_float+0x2e0>)
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f af1a 	beq.w	8003f26 <_printf_float+0xb6>
 80040f2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040f6:	ea59 0303 	orrs.w	r3, r9, r3
 80040fa:	d102      	bne.n	8004102 <_printf_float+0x292>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	07d9      	lsls	r1, r3, #31
 8004100:	d5d7      	bpl.n	80040b2 <_printf_float+0x242>
 8004102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	f43f af0a 	beq.w	8003f26 <_printf_float+0xb6>
 8004112:	f04f 0a00 	mov.w	sl, #0
 8004116:	f104 0b1a 	add.w	fp, r4, #26
 800411a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800411c:	425b      	negs	r3, r3
 800411e:	4553      	cmp	r3, sl
 8004120:	dc01      	bgt.n	8004126 <_printf_float+0x2b6>
 8004122:	464b      	mov	r3, r9
 8004124:	e793      	b.n	800404e <_printf_float+0x1de>
 8004126:	2301      	movs	r3, #1
 8004128:	465a      	mov	r2, fp
 800412a:	4631      	mov	r1, r6
 800412c:	4628      	mov	r0, r5
 800412e:	47b8      	blx	r7
 8004130:	3001      	adds	r0, #1
 8004132:	f43f aef8 	beq.w	8003f26 <_printf_float+0xb6>
 8004136:	f10a 0a01 	add.w	sl, sl, #1
 800413a:	e7ee      	b.n	800411a <_printf_float+0x2aa>
 800413c:	7fefffff 	.word	0x7fefffff
 8004140:	08008e22 	.word	0x08008e22
 8004144:	08008e26 	.word	0x08008e26
 8004148:	08008e2a 	.word	0x08008e2a
 800414c:	08008e2e 	.word	0x08008e2e
 8004150:	080091c0 	.word	0x080091c0
 8004154:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004156:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800415a:	4553      	cmp	r3, sl
 800415c:	bfa8      	it	ge
 800415e:	4653      	movge	r3, sl
 8004160:	2b00      	cmp	r3, #0
 8004162:	4699      	mov	r9, r3
 8004164:	dc36      	bgt.n	80041d4 <_printf_float+0x364>
 8004166:	f04f 0b00 	mov.w	fp, #0
 800416a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800416e:	f104 021a 	add.w	r2, r4, #26
 8004172:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004174:	930a      	str	r3, [sp, #40]	@ 0x28
 8004176:	eba3 0309 	sub.w	r3, r3, r9
 800417a:	455b      	cmp	r3, fp
 800417c:	dc31      	bgt.n	80041e2 <_printf_float+0x372>
 800417e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004180:	459a      	cmp	sl, r3
 8004182:	dc3a      	bgt.n	80041fa <_printf_float+0x38a>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	07da      	lsls	r2, r3, #31
 8004188:	d437      	bmi.n	80041fa <_printf_float+0x38a>
 800418a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800418c:	ebaa 0903 	sub.w	r9, sl, r3
 8004190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004192:	ebaa 0303 	sub.w	r3, sl, r3
 8004196:	4599      	cmp	r9, r3
 8004198:	bfa8      	it	ge
 800419a:	4699      	movge	r9, r3
 800419c:	f1b9 0f00 	cmp.w	r9, #0
 80041a0:	dc33      	bgt.n	800420a <_printf_float+0x39a>
 80041a2:	f04f 0800 	mov.w	r8, #0
 80041a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041aa:	f104 0b1a 	add.w	fp, r4, #26
 80041ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041b0:	ebaa 0303 	sub.w	r3, sl, r3
 80041b4:	eba3 0309 	sub.w	r3, r3, r9
 80041b8:	4543      	cmp	r3, r8
 80041ba:	f77f af7a 	ble.w	80040b2 <_printf_float+0x242>
 80041be:	2301      	movs	r3, #1
 80041c0:	465a      	mov	r2, fp
 80041c2:	4631      	mov	r1, r6
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b8      	blx	r7
 80041c8:	3001      	adds	r0, #1
 80041ca:	f43f aeac 	beq.w	8003f26 <_printf_float+0xb6>
 80041ce:	f108 0801 	add.w	r8, r8, #1
 80041d2:	e7ec      	b.n	80041ae <_printf_float+0x33e>
 80041d4:	4642      	mov	r2, r8
 80041d6:	4631      	mov	r1, r6
 80041d8:	4628      	mov	r0, r5
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	d1c2      	bne.n	8004166 <_printf_float+0x2f6>
 80041e0:	e6a1      	b.n	8003f26 <_printf_float+0xb6>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4631      	mov	r1, r6
 80041e6:	4628      	mov	r0, r5
 80041e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80041ea:	47b8      	blx	r7
 80041ec:	3001      	adds	r0, #1
 80041ee:	f43f ae9a 	beq.w	8003f26 <_printf_float+0xb6>
 80041f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041f4:	f10b 0b01 	add.w	fp, fp, #1
 80041f8:	e7bb      	b.n	8004172 <_printf_float+0x302>
 80041fa:	4631      	mov	r1, r6
 80041fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	d1c0      	bne.n	800418a <_printf_float+0x31a>
 8004208:	e68d      	b.n	8003f26 <_printf_float+0xb6>
 800420a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800420c:	464b      	mov	r3, r9
 800420e:	4631      	mov	r1, r6
 8004210:	4628      	mov	r0, r5
 8004212:	4442      	add	r2, r8
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	d1c3      	bne.n	80041a2 <_printf_float+0x332>
 800421a:	e684      	b.n	8003f26 <_printf_float+0xb6>
 800421c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004220:	f1ba 0f01 	cmp.w	sl, #1
 8004224:	dc01      	bgt.n	800422a <_printf_float+0x3ba>
 8004226:	07db      	lsls	r3, r3, #31
 8004228:	d536      	bpl.n	8004298 <_printf_float+0x428>
 800422a:	2301      	movs	r3, #1
 800422c:	4642      	mov	r2, r8
 800422e:	4631      	mov	r1, r6
 8004230:	4628      	mov	r0, r5
 8004232:	47b8      	blx	r7
 8004234:	3001      	adds	r0, #1
 8004236:	f43f ae76 	beq.w	8003f26 <_printf_float+0xb6>
 800423a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	f43f ae6e 	beq.w	8003f26 <_printf_float+0xb6>
 800424a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800424e:	2200      	movs	r2, #0
 8004250:	2300      	movs	r3, #0
 8004252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004256:	f7fc fba7 	bl	80009a8 <__aeabi_dcmpeq>
 800425a:	b9c0      	cbnz	r0, 800428e <_printf_float+0x41e>
 800425c:	4653      	mov	r3, sl
 800425e:	f108 0201 	add.w	r2, r8, #1
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	d10c      	bne.n	8004286 <_printf_float+0x416>
 800426c:	e65b      	b.n	8003f26 <_printf_float+0xb6>
 800426e:	2301      	movs	r3, #1
 8004270:	465a      	mov	r2, fp
 8004272:	4631      	mov	r1, r6
 8004274:	4628      	mov	r0, r5
 8004276:	47b8      	blx	r7
 8004278:	3001      	adds	r0, #1
 800427a:	f43f ae54 	beq.w	8003f26 <_printf_float+0xb6>
 800427e:	f108 0801 	add.w	r8, r8, #1
 8004282:	45d0      	cmp	r8, sl
 8004284:	dbf3      	blt.n	800426e <_printf_float+0x3fe>
 8004286:	464b      	mov	r3, r9
 8004288:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800428c:	e6e0      	b.n	8004050 <_printf_float+0x1e0>
 800428e:	f04f 0800 	mov.w	r8, #0
 8004292:	f104 0b1a 	add.w	fp, r4, #26
 8004296:	e7f4      	b.n	8004282 <_printf_float+0x412>
 8004298:	2301      	movs	r3, #1
 800429a:	4642      	mov	r2, r8
 800429c:	e7e1      	b.n	8004262 <_printf_float+0x3f2>
 800429e:	2301      	movs	r3, #1
 80042a0:	464a      	mov	r2, r9
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	f43f ae3c 	beq.w	8003f26 <_printf_float+0xb6>
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	68e3      	ldr	r3, [r4, #12]
 80042b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80042b6:	1a5b      	subs	r3, r3, r1
 80042b8:	4543      	cmp	r3, r8
 80042ba:	dcf0      	bgt.n	800429e <_printf_float+0x42e>
 80042bc:	e6fd      	b.n	80040ba <_printf_float+0x24a>
 80042be:	f04f 0800 	mov.w	r8, #0
 80042c2:	f104 0919 	add.w	r9, r4, #25
 80042c6:	e7f4      	b.n	80042b2 <_printf_float+0x442>

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4698      	mov	r8, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	4607      	mov	r7, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bfb8      	it	lt
 80042da:	4613      	movlt	r3, r2
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042e2:	460c      	mov	r4, r1
 80042e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc2b      	bgt.n	8004368 <_printf_common+0xa0>
 8004310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	3b00      	subs	r3, #0
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d430      	bmi.n	8004382 <_printf_common+0xba>
 8004320:	4641      	mov	r1, r8
 8004322:	4638      	mov	r0, r7
 8004324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004328:	47c8      	blx	r9
 800432a:	3001      	adds	r0, #1
 800432c:	d023      	beq.n	8004376 <_printf_common+0xae>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf14      	ite	ne
 800433a:	2500      	movne	r5, #0
 800433c:	6833      	ldreq	r3, [r6, #0]
 800433e:	f04f 0600 	mov.w	r6, #0
 8004342:	bf08      	it	eq
 8004344:	68e5      	ldreq	r5, [r4, #12]
 8004346:	f104 041a 	add.w	r4, r4, #26
 800434a:	bf08      	it	eq
 800434c:	1aed      	subeq	r5, r5, r3
 800434e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004352:	bf08      	it	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	4293      	cmp	r3, r2
 800435a:	bfc4      	itt	gt
 800435c:	1a9b      	subgt	r3, r3, r2
 800435e:	18ed      	addgt	r5, r5, r3
 8004360:	42b5      	cmp	r5, r6
 8004362:	d11a      	bne.n	800439a <_printf_common+0xd2>
 8004364:	2000      	movs	r0, #0
 8004366:	e008      	b.n	800437a <_printf_common+0xb2>
 8004368:	2301      	movs	r3, #1
 800436a:	4652      	mov	r2, sl
 800436c:	4641      	mov	r1, r8
 800436e:	4638      	mov	r0, r7
 8004370:	47c8      	blx	r9
 8004372:	3001      	adds	r0, #1
 8004374:	d103      	bne.n	800437e <_printf_common+0xb6>
 8004376:	f04f 30ff 	mov.w	r0, #4294967295
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	3501      	adds	r5, #1
 8004380:	e7c1      	b.n	8004306 <_printf_common+0x3e>
 8004382:	2030      	movs	r0, #48	@ 0x30
 8004384:	18e1      	adds	r1, r4, r3
 8004386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004390:	4422      	add	r2, r4
 8004392:	3302      	adds	r3, #2
 8004394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004398:	e7c2      	b.n	8004320 <_printf_common+0x58>
 800439a:	2301      	movs	r3, #1
 800439c:	4622      	mov	r2, r4
 800439e:	4641      	mov	r1, r8
 80043a0:	4638      	mov	r0, r7
 80043a2:	47c8      	blx	r9
 80043a4:	3001      	adds	r0, #1
 80043a6:	d0e6      	beq.n	8004376 <_printf_common+0xae>
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7d9      	b.n	8004360 <_printf_common+0x98>

080043ac <_printf_i>:
 80043ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b0:	7e0f      	ldrb	r7, [r1, #24]
 80043b2:	4691      	mov	r9, r2
 80043b4:	2f78      	cmp	r7, #120	@ 0x78
 80043b6:	4680      	mov	r8, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	469a      	mov	sl, r3
 80043bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043c2:	d807      	bhi.n	80043d4 <_printf_i+0x28>
 80043c4:	2f62      	cmp	r7, #98	@ 0x62
 80043c6:	d80a      	bhi.n	80043de <_printf_i+0x32>
 80043c8:	2f00      	cmp	r7, #0
 80043ca:	f000 80d3 	beq.w	8004574 <_printf_i+0x1c8>
 80043ce:	2f58      	cmp	r7, #88	@ 0x58
 80043d0:	f000 80ba 	beq.w	8004548 <_printf_i+0x19c>
 80043d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043dc:	e03a      	b.n	8004454 <_printf_i+0xa8>
 80043de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043e2:	2b15      	cmp	r3, #21
 80043e4:	d8f6      	bhi.n	80043d4 <_printf_i+0x28>
 80043e6:	a101      	add	r1, pc, #4	@ (adr r1, 80043ec <_printf_i+0x40>)
 80043e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004459 	.word	0x08004459
 80043f4:	080043d5 	.word	0x080043d5
 80043f8:	080043d5 	.word	0x080043d5
 80043fc:	080043d5 	.word	0x080043d5
 8004400:	080043d5 	.word	0x080043d5
 8004404:	08004459 	.word	0x08004459
 8004408:	080043d5 	.word	0x080043d5
 800440c:	080043d5 	.word	0x080043d5
 8004410:	080043d5 	.word	0x080043d5
 8004414:	080043d5 	.word	0x080043d5
 8004418:	0800455b 	.word	0x0800455b
 800441c:	08004483 	.word	0x08004483
 8004420:	08004515 	.word	0x08004515
 8004424:	080043d5 	.word	0x080043d5
 8004428:	080043d5 	.word	0x080043d5
 800442c:	0800457d 	.word	0x0800457d
 8004430:	080043d5 	.word	0x080043d5
 8004434:	08004483 	.word	0x08004483
 8004438:	080043d5 	.word	0x080043d5
 800443c:	080043d5 	.word	0x080043d5
 8004440:	0800451d 	.word	0x0800451d
 8004444:	6833      	ldr	r3, [r6, #0]
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6032      	str	r2, [r6, #0]
 800444c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004454:	2301      	movs	r3, #1
 8004456:	e09e      	b.n	8004596 <_printf_i+0x1ea>
 8004458:	6833      	ldr	r3, [r6, #0]
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	1d19      	adds	r1, r3, #4
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	0606      	lsls	r6, r0, #24
 8004462:	d501      	bpl.n	8004468 <_printf_i+0xbc>
 8004464:	681d      	ldr	r5, [r3, #0]
 8004466:	e003      	b.n	8004470 <_printf_i+0xc4>
 8004468:	0645      	lsls	r5, r0, #25
 800446a:	d5fb      	bpl.n	8004464 <_printf_i+0xb8>
 800446c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004470:	2d00      	cmp	r5, #0
 8004472:	da03      	bge.n	800447c <_printf_i+0xd0>
 8004474:	232d      	movs	r3, #45	@ 0x2d
 8004476:	426d      	negs	r5, r5
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800447c:	230a      	movs	r3, #10
 800447e:	4859      	ldr	r0, [pc, #356]	@ (80045e4 <_printf_i+0x238>)
 8004480:	e011      	b.n	80044a6 <_printf_i+0xfa>
 8004482:	6821      	ldr	r1, [r4, #0]
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	0608      	lsls	r0, r1, #24
 8004488:	f853 5b04 	ldr.w	r5, [r3], #4
 800448c:	d402      	bmi.n	8004494 <_printf_i+0xe8>
 800448e:	0649      	lsls	r1, r1, #25
 8004490:	bf48      	it	mi
 8004492:	b2ad      	uxthmi	r5, r5
 8004494:	2f6f      	cmp	r7, #111	@ 0x6f
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	bf14      	ite	ne
 800449a:	230a      	movne	r3, #10
 800449c:	2308      	moveq	r3, #8
 800449e:	4851      	ldr	r0, [pc, #324]	@ (80045e4 <_printf_i+0x238>)
 80044a0:	2100      	movs	r1, #0
 80044a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044a6:	6866      	ldr	r6, [r4, #4]
 80044a8:	2e00      	cmp	r6, #0
 80044aa:	bfa8      	it	ge
 80044ac:	6821      	ldrge	r1, [r4, #0]
 80044ae:	60a6      	str	r6, [r4, #8]
 80044b0:	bfa4      	itt	ge
 80044b2:	f021 0104 	bicge.w	r1, r1, #4
 80044b6:	6021      	strge	r1, [r4, #0]
 80044b8:	b90d      	cbnz	r5, 80044be <_printf_i+0x112>
 80044ba:	2e00      	cmp	r6, #0
 80044bc:	d04b      	beq.n	8004556 <_printf_i+0x1aa>
 80044be:	4616      	mov	r6, r2
 80044c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80044c4:	fb03 5711 	mls	r7, r3, r1, r5
 80044c8:	5dc7      	ldrb	r7, [r0, r7]
 80044ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044ce:	462f      	mov	r7, r5
 80044d0:	42bb      	cmp	r3, r7
 80044d2:	460d      	mov	r5, r1
 80044d4:	d9f4      	bls.n	80044c0 <_printf_i+0x114>
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d10b      	bne.n	80044f2 <_printf_i+0x146>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	07df      	lsls	r7, r3, #31
 80044de:	d508      	bpl.n	80044f2 <_printf_i+0x146>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	6861      	ldr	r1, [r4, #4]
 80044e4:	4299      	cmp	r1, r3
 80044e6:	bfde      	ittt	le
 80044e8:	2330      	movle	r3, #48	@ 0x30
 80044ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044f2:	1b92      	subs	r2, r2, r6
 80044f4:	6122      	str	r2, [r4, #16]
 80044f6:	464b      	mov	r3, r9
 80044f8:	4621      	mov	r1, r4
 80044fa:	4640      	mov	r0, r8
 80044fc:	f8cd a000 	str.w	sl, [sp]
 8004500:	aa03      	add	r2, sp, #12
 8004502:	f7ff fee1 	bl	80042c8 <_printf_common>
 8004506:	3001      	adds	r0, #1
 8004508:	d14a      	bne.n	80045a0 <_printf_i+0x1f4>
 800450a:	f04f 30ff 	mov.w	r0, #4294967295
 800450e:	b004      	add	sp, #16
 8004510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	f043 0320 	orr.w	r3, r3, #32
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	2778      	movs	r7, #120	@ 0x78
 800451e:	4832      	ldr	r0, [pc, #200]	@ (80045e8 <_printf_i+0x23c>)
 8004520:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	6831      	ldr	r1, [r6, #0]
 8004528:	061f      	lsls	r7, r3, #24
 800452a:	f851 5b04 	ldr.w	r5, [r1], #4
 800452e:	d402      	bmi.n	8004536 <_printf_i+0x18a>
 8004530:	065f      	lsls	r7, r3, #25
 8004532:	bf48      	it	mi
 8004534:	b2ad      	uxthmi	r5, r5
 8004536:	6031      	str	r1, [r6, #0]
 8004538:	07d9      	lsls	r1, r3, #31
 800453a:	bf44      	itt	mi
 800453c:	f043 0320 	orrmi.w	r3, r3, #32
 8004540:	6023      	strmi	r3, [r4, #0]
 8004542:	b11d      	cbz	r5, 800454c <_printf_i+0x1a0>
 8004544:	2310      	movs	r3, #16
 8004546:	e7ab      	b.n	80044a0 <_printf_i+0xf4>
 8004548:	4826      	ldr	r0, [pc, #152]	@ (80045e4 <_printf_i+0x238>)
 800454a:	e7e9      	b.n	8004520 <_printf_i+0x174>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	f023 0320 	bic.w	r3, r3, #32
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	e7f6      	b.n	8004544 <_printf_i+0x198>
 8004556:	4616      	mov	r6, r2
 8004558:	e7bd      	b.n	80044d6 <_printf_i+0x12a>
 800455a:	6833      	ldr	r3, [r6, #0]
 800455c:	6825      	ldr	r5, [r4, #0]
 800455e:	1d18      	adds	r0, r3, #4
 8004560:	6961      	ldr	r1, [r4, #20]
 8004562:	6030      	str	r0, [r6, #0]
 8004564:	062e      	lsls	r6, r5, #24
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	d501      	bpl.n	800456e <_printf_i+0x1c2>
 800456a:	6019      	str	r1, [r3, #0]
 800456c:	e002      	b.n	8004574 <_printf_i+0x1c8>
 800456e:	0668      	lsls	r0, r5, #25
 8004570:	d5fb      	bpl.n	800456a <_printf_i+0x1be>
 8004572:	8019      	strh	r1, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	4616      	mov	r6, r2
 8004578:	6123      	str	r3, [r4, #16]
 800457a:	e7bc      	b.n	80044f6 <_printf_i+0x14a>
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	2100      	movs	r1, #0
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	6032      	str	r2, [r6, #0]
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	4630      	mov	r0, r6
 800458a:	f000 fc10 	bl	8004dae <memchr>
 800458e:	b108      	cbz	r0, 8004594 <_printf_i+0x1e8>
 8004590:	1b80      	subs	r0, r0, r6
 8004592:	6060      	str	r0, [r4, #4]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	2300      	movs	r3, #0
 800459a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800459e:	e7aa      	b.n	80044f6 <_printf_i+0x14a>
 80045a0:	4632      	mov	r2, r6
 80045a2:	4649      	mov	r1, r9
 80045a4:	4640      	mov	r0, r8
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	47d0      	blx	sl
 80045aa:	3001      	adds	r0, #1
 80045ac:	d0ad      	beq.n	800450a <_printf_i+0x15e>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	079b      	lsls	r3, r3, #30
 80045b2:	d413      	bmi.n	80045dc <_printf_i+0x230>
 80045b4:	68e0      	ldr	r0, [r4, #12]
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	4298      	cmp	r0, r3
 80045ba:	bfb8      	it	lt
 80045bc:	4618      	movlt	r0, r3
 80045be:	e7a6      	b.n	800450e <_printf_i+0x162>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4632      	mov	r2, r6
 80045c4:	4649      	mov	r1, r9
 80045c6:	4640      	mov	r0, r8
 80045c8:	47d0      	blx	sl
 80045ca:	3001      	adds	r0, #1
 80045cc:	d09d      	beq.n	800450a <_printf_i+0x15e>
 80045ce:	3501      	adds	r5, #1
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	9903      	ldr	r1, [sp, #12]
 80045d4:	1a5b      	subs	r3, r3, r1
 80045d6:	42ab      	cmp	r3, r5
 80045d8:	dcf2      	bgt.n	80045c0 <_printf_i+0x214>
 80045da:	e7eb      	b.n	80045b4 <_printf_i+0x208>
 80045dc:	2500      	movs	r5, #0
 80045de:	f104 0619 	add.w	r6, r4, #25
 80045e2:	e7f5      	b.n	80045d0 <_printf_i+0x224>
 80045e4:	08008e32 	.word	0x08008e32
 80045e8:	08008e43 	.word	0x08008e43

080045ec <_scanf_float>:
 80045ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f0:	b087      	sub	sp, #28
 80045f2:	9303      	str	r3, [sp, #12]
 80045f4:	688b      	ldr	r3, [r1, #8]
 80045f6:	4617      	mov	r7, r2
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80045fe:	bf82      	ittt	hi
 8004600:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004604:	eb03 0b05 	addhi.w	fp, r3, r5
 8004608:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800460c:	460a      	mov	r2, r1
 800460e:	f04f 0500 	mov.w	r5, #0
 8004612:	bf88      	it	hi
 8004614:	608b      	strhi	r3, [r1, #8]
 8004616:	680b      	ldr	r3, [r1, #0]
 8004618:	4680      	mov	r8, r0
 800461a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800461e:	f842 3b1c 	str.w	r3, [r2], #28
 8004622:	460c      	mov	r4, r1
 8004624:	bf98      	it	ls
 8004626:	f04f 0b00 	movls.w	fp, #0
 800462a:	4616      	mov	r6, r2
 800462c:	46aa      	mov	sl, r5
 800462e:	46a9      	mov	r9, r5
 8004630:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004634:	9201      	str	r2, [sp, #4]
 8004636:	9502      	str	r5, [sp, #8]
 8004638:	68a2      	ldr	r2, [r4, #8]
 800463a:	b152      	cbz	r2, 8004652 <_scanf_float+0x66>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b4e      	cmp	r3, #78	@ 0x4e
 8004642:	d865      	bhi.n	8004710 <_scanf_float+0x124>
 8004644:	2b40      	cmp	r3, #64	@ 0x40
 8004646:	d83d      	bhi.n	80046c4 <_scanf_float+0xd8>
 8004648:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800464c:	b2c8      	uxtb	r0, r1
 800464e:	280e      	cmp	r0, #14
 8004650:	d93b      	bls.n	80046ca <_scanf_float+0xde>
 8004652:	f1b9 0f00 	cmp.w	r9, #0
 8004656:	d003      	beq.n	8004660 <_scanf_float+0x74>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800465e:	6023      	str	r3, [r4, #0]
 8004660:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004664:	f1ba 0f01 	cmp.w	sl, #1
 8004668:	f200 8118 	bhi.w	800489c <_scanf_float+0x2b0>
 800466c:	9b01      	ldr	r3, [sp, #4]
 800466e:	429e      	cmp	r6, r3
 8004670:	f200 8109 	bhi.w	8004886 <_scanf_float+0x29a>
 8004674:	2001      	movs	r0, #1
 8004676:	b007      	add	sp, #28
 8004678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004680:	2a0d      	cmp	r2, #13
 8004682:	d8e6      	bhi.n	8004652 <_scanf_float+0x66>
 8004684:	a101      	add	r1, pc, #4	@ (adr r1, 800468c <_scanf_float+0xa0>)
 8004686:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800468a:	bf00      	nop
 800468c:	080047d3 	.word	0x080047d3
 8004690:	08004653 	.word	0x08004653
 8004694:	08004653 	.word	0x08004653
 8004698:	08004653 	.word	0x08004653
 800469c:	08004833 	.word	0x08004833
 80046a0:	0800480b 	.word	0x0800480b
 80046a4:	08004653 	.word	0x08004653
 80046a8:	08004653 	.word	0x08004653
 80046ac:	080047e1 	.word	0x080047e1
 80046b0:	08004653 	.word	0x08004653
 80046b4:	08004653 	.word	0x08004653
 80046b8:	08004653 	.word	0x08004653
 80046bc:	08004653 	.word	0x08004653
 80046c0:	08004799 	.word	0x08004799
 80046c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80046c8:	e7da      	b.n	8004680 <_scanf_float+0x94>
 80046ca:	290e      	cmp	r1, #14
 80046cc:	d8c1      	bhi.n	8004652 <_scanf_float+0x66>
 80046ce:	a001      	add	r0, pc, #4	@ (adr r0, 80046d4 <_scanf_float+0xe8>)
 80046d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80046d4:	08004789 	.word	0x08004789
 80046d8:	08004653 	.word	0x08004653
 80046dc:	08004789 	.word	0x08004789
 80046e0:	0800481f 	.word	0x0800481f
 80046e4:	08004653 	.word	0x08004653
 80046e8:	08004731 	.word	0x08004731
 80046ec:	0800476f 	.word	0x0800476f
 80046f0:	0800476f 	.word	0x0800476f
 80046f4:	0800476f 	.word	0x0800476f
 80046f8:	0800476f 	.word	0x0800476f
 80046fc:	0800476f 	.word	0x0800476f
 8004700:	0800476f 	.word	0x0800476f
 8004704:	0800476f 	.word	0x0800476f
 8004708:	0800476f 	.word	0x0800476f
 800470c:	0800476f 	.word	0x0800476f
 8004710:	2b6e      	cmp	r3, #110	@ 0x6e
 8004712:	d809      	bhi.n	8004728 <_scanf_float+0x13c>
 8004714:	2b60      	cmp	r3, #96	@ 0x60
 8004716:	d8b1      	bhi.n	800467c <_scanf_float+0x90>
 8004718:	2b54      	cmp	r3, #84	@ 0x54
 800471a:	d07b      	beq.n	8004814 <_scanf_float+0x228>
 800471c:	2b59      	cmp	r3, #89	@ 0x59
 800471e:	d198      	bne.n	8004652 <_scanf_float+0x66>
 8004720:	2d07      	cmp	r5, #7
 8004722:	d196      	bne.n	8004652 <_scanf_float+0x66>
 8004724:	2508      	movs	r5, #8
 8004726:	e02c      	b.n	8004782 <_scanf_float+0x196>
 8004728:	2b74      	cmp	r3, #116	@ 0x74
 800472a:	d073      	beq.n	8004814 <_scanf_float+0x228>
 800472c:	2b79      	cmp	r3, #121	@ 0x79
 800472e:	e7f6      	b.n	800471e <_scanf_float+0x132>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	05c8      	lsls	r0, r1, #23
 8004734:	d51b      	bpl.n	800476e <_scanf_float+0x182>
 8004736:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800473a:	6021      	str	r1, [r4, #0]
 800473c:	f109 0901 	add.w	r9, r9, #1
 8004740:	f1bb 0f00 	cmp.w	fp, #0
 8004744:	d003      	beq.n	800474e <_scanf_float+0x162>
 8004746:	3201      	adds	r2, #1
 8004748:	f10b 3bff 	add.w	fp, fp, #4294967295
 800474c:	60a2      	str	r2, [r4, #8]
 800474e:	68a3      	ldr	r3, [r4, #8]
 8004750:	3b01      	subs	r3, #1
 8004752:	60a3      	str	r3, [r4, #8]
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	3301      	adds	r3, #1
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3b01      	subs	r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	f340 8087 	ble.w	8004874 <_scanf_float+0x288>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	e764      	b.n	8004638 <_scanf_float+0x4c>
 800476e:	eb1a 0105 	adds.w	r1, sl, r5
 8004772:	f47f af6e 	bne.w	8004652 <_scanf_float+0x66>
 8004776:	460d      	mov	r5, r1
 8004778:	468a      	mov	sl, r1
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004780:	6022      	str	r2, [r4, #0]
 8004782:	f806 3b01 	strb.w	r3, [r6], #1
 8004786:	e7e2      	b.n	800474e <_scanf_float+0x162>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	0610      	lsls	r0, r2, #24
 800478c:	f57f af61 	bpl.w	8004652 <_scanf_float+0x66>
 8004790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	e7f4      	b.n	8004782 <_scanf_float+0x196>
 8004798:	f1ba 0f00 	cmp.w	sl, #0
 800479c:	d10e      	bne.n	80047bc <_scanf_float+0x1d0>
 800479e:	f1b9 0f00 	cmp.w	r9, #0
 80047a2:	d10e      	bne.n	80047c2 <_scanf_float+0x1d6>
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80047aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80047ae:	d108      	bne.n	80047c2 <_scanf_float+0x1d6>
 80047b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80047b4:	f04f 0a01 	mov.w	sl, #1
 80047b8:	6022      	str	r2, [r4, #0]
 80047ba:	e7e2      	b.n	8004782 <_scanf_float+0x196>
 80047bc:	f1ba 0f02 	cmp.w	sl, #2
 80047c0:	d055      	beq.n	800486e <_scanf_float+0x282>
 80047c2:	2d01      	cmp	r5, #1
 80047c4:	d002      	beq.n	80047cc <_scanf_float+0x1e0>
 80047c6:	2d04      	cmp	r5, #4
 80047c8:	f47f af43 	bne.w	8004652 <_scanf_float+0x66>
 80047cc:	3501      	adds	r5, #1
 80047ce:	b2ed      	uxtb	r5, r5
 80047d0:	e7d7      	b.n	8004782 <_scanf_float+0x196>
 80047d2:	f1ba 0f01 	cmp.w	sl, #1
 80047d6:	f47f af3c 	bne.w	8004652 <_scanf_float+0x66>
 80047da:	f04f 0a02 	mov.w	sl, #2
 80047de:	e7d0      	b.n	8004782 <_scanf_float+0x196>
 80047e0:	b97d      	cbnz	r5, 8004802 <_scanf_float+0x216>
 80047e2:	f1b9 0f00 	cmp.w	r9, #0
 80047e6:	f47f af37 	bne.w	8004658 <_scanf_float+0x6c>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80047f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80047f4:	f040 8103 	bne.w	80049fe <_scanf_float+0x412>
 80047f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80047fc:	2501      	movs	r5, #1
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	e7bf      	b.n	8004782 <_scanf_float+0x196>
 8004802:	2d03      	cmp	r5, #3
 8004804:	d0e2      	beq.n	80047cc <_scanf_float+0x1e0>
 8004806:	2d05      	cmp	r5, #5
 8004808:	e7de      	b.n	80047c8 <_scanf_float+0x1dc>
 800480a:	2d02      	cmp	r5, #2
 800480c:	f47f af21 	bne.w	8004652 <_scanf_float+0x66>
 8004810:	2503      	movs	r5, #3
 8004812:	e7b6      	b.n	8004782 <_scanf_float+0x196>
 8004814:	2d06      	cmp	r5, #6
 8004816:	f47f af1c 	bne.w	8004652 <_scanf_float+0x66>
 800481a:	2507      	movs	r5, #7
 800481c:	e7b1      	b.n	8004782 <_scanf_float+0x196>
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	0591      	lsls	r1, r2, #22
 8004822:	f57f af16 	bpl.w	8004652 <_scanf_float+0x66>
 8004826:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004830:	e7a7      	b.n	8004782 <_scanf_float+0x196>
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004838:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800483c:	d006      	beq.n	800484c <_scanf_float+0x260>
 800483e:	0550      	lsls	r0, r2, #21
 8004840:	f57f af07 	bpl.w	8004652 <_scanf_float+0x66>
 8004844:	f1b9 0f00 	cmp.w	r9, #0
 8004848:	f000 80d9 	beq.w	80049fe <_scanf_float+0x412>
 800484c:	0591      	lsls	r1, r2, #22
 800484e:	bf58      	it	pl
 8004850:	9902      	ldrpl	r1, [sp, #8]
 8004852:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004856:	bf58      	it	pl
 8004858:	eba9 0101 	subpl.w	r1, r9, r1
 800485c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004860:	f04f 0900 	mov.w	r9, #0
 8004864:	bf58      	it	pl
 8004866:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800486a:	6022      	str	r2, [r4, #0]
 800486c:	e789      	b.n	8004782 <_scanf_float+0x196>
 800486e:	f04f 0a03 	mov.w	sl, #3
 8004872:	e786      	b.n	8004782 <_scanf_float+0x196>
 8004874:	4639      	mov	r1, r7
 8004876:	4640      	mov	r0, r8
 8004878:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800487c:	4798      	blx	r3
 800487e:	2800      	cmp	r0, #0
 8004880:	f43f aeda 	beq.w	8004638 <_scanf_float+0x4c>
 8004884:	e6e5      	b.n	8004652 <_scanf_float+0x66>
 8004886:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800488a:	463a      	mov	r2, r7
 800488c:	4640      	mov	r0, r8
 800488e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004892:	4798      	blx	r3
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	3b01      	subs	r3, #1
 8004898:	6123      	str	r3, [r4, #16]
 800489a:	e6e7      	b.n	800466c <_scanf_float+0x80>
 800489c:	1e6b      	subs	r3, r5, #1
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d824      	bhi.n	80048ec <_scanf_float+0x300>
 80048a2:	2d02      	cmp	r5, #2
 80048a4:	d836      	bhi.n	8004914 <_scanf_float+0x328>
 80048a6:	9b01      	ldr	r3, [sp, #4]
 80048a8:	429e      	cmp	r6, r3
 80048aa:	f67f aee3 	bls.w	8004674 <_scanf_float+0x88>
 80048ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048b2:	463a      	mov	r2, r7
 80048b4:	4640      	mov	r0, r8
 80048b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048ba:	4798      	blx	r3
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	3b01      	subs	r3, #1
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	e7f0      	b.n	80048a6 <_scanf_float+0x2ba>
 80048c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048c8:	463a      	mov	r2, r7
 80048ca:	4640      	mov	r0, r8
 80048cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80048d0:	4798      	blx	r3
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	6123      	str	r3, [r4, #16]
 80048d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048dc:	fa5f fa8a 	uxtb.w	sl, sl
 80048e0:	f1ba 0f02 	cmp.w	sl, #2
 80048e4:	d1ee      	bne.n	80048c4 <_scanf_float+0x2d8>
 80048e6:	3d03      	subs	r5, #3
 80048e8:	b2ed      	uxtb	r5, r5
 80048ea:	1b76      	subs	r6, r6, r5
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	05da      	lsls	r2, r3, #23
 80048f0:	d530      	bpl.n	8004954 <_scanf_float+0x368>
 80048f2:	055b      	lsls	r3, r3, #21
 80048f4:	d511      	bpl.n	800491a <_scanf_float+0x32e>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	429e      	cmp	r6, r3
 80048fa:	f67f aebb 	bls.w	8004674 <_scanf_float+0x88>
 80048fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004902:	463a      	mov	r2, r7
 8004904:	4640      	mov	r0, r8
 8004906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800490a:	4798      	blx	r3
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	3b01      	subs	r3, #1
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	e7f0      	b.n	80048f6 <_scanf_float+0x30a>
 8004914:	46aa      	mov	sl, r5
 8004916:	46b3      	mov	fp, r6
 8004918:	e7de      	b.n	80048d8 <_scanf_float+0x2ec>
 800491a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	2965      	cmp	r1, #101	@ 0x65
 8004922:	f103 33ff 	add.w	r3, r3, #4294967295
 8004926:	f106 35ff 	add.w	r5, r6, #4294967295
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	d00c      	beq.n	8004948 <_scanf_float+0x35c>
 800492e:	2945      	cmp	r1, #69	@ 0x45
 8004930:	d00a      	beq.n	8004948 <_scanf_float+0x35c>
 8004932:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004936:	463a      	mov	r2, r7
 8004938:	4640      	mov	r0, r8
 800493a:	4798      	blx	r3
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004942:	3b01      	subs	r3, #1
 8004944:	1eb5      	subs	r5, r6, #2
 8004946:	6123      	str	r3, [r4, #16]
 8004948:	463a      	mov	r2, r7
 800494a:	4640      	mov	r0, r8
 800494c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004950:	4798      	blx	r3
 8004952:	462e      	mov	r6, r5
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	f012 0210 	ands.w	r2, r2, #16
 800495a:	d001      	beq.n	8004960 <_scanf_float+0x374>
 800495c:	2000      	movs	r0, #0
 800495e:	e68a      	b.n	8004676 <_scanf_float+0x8a>
 8004960:	7032      	strb	r2, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496c:	d11c      	bne.n	80049a8 <_scanf_float+0x3bc>
 800496e:	9b02      	ldr	r3, [sp, #8]
 8004970:	454b      	cmp	r3, r9
 8004972:	eba3 0209 	sub.w	r2, r3, r9
 8004976:	d123      	bne.n	80049c0 <_scanf_float+0x3d4>
 8004978:	2200      	movs	r2, #0
 800497a:	4640      	mov	r0, r8
 800497c:	9901      	ldr	r1, [sp, #4]
 800497e:	f002 fc1b 	bl	80071b8 <_strtod_r>
 8004982:	9b03      	ldr	r3, [sp, #12]
 8004984:	6825      	ldr	r5, [r4, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f015 0f02 	tst.w	r5, #2
 800498c:	4606      	mov	r6, r0
 800498e:	460f      	mov	r7, r1
 8004990:	f103 0204 	add.w	r2, r3, #4
 8004994:	d01f      	beq.n	80049d6 <_scanf_float+0x3ea>
 8004996:	9903      	ldr	r1, [sp, #12]
 8004998:	600a      	str	r2, [r1, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	e9c3 6700 	strd	r6, r7, [r3]
 80049a0:	68e3      	ldr	r3, [r4, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60e3      	str	r3, [r4, #12]
 80049a6:	e7d9      	b.n	800495c <_scanf_float+0x370>
 80049a8:	9b04      	ldr	r3, [sp, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0e4      	beq.n	8004978 <_scanf_float+0x38c>
 80049ae:	9905      	ldr	r1, [sp, #20]
 80049b0:	230a      	movs	r3, #10
 80049b2:	4640      	mov	r0, r8
 80049b4:	3101      	adds	r1, #1
 80049b6:	f002 fc7f 	bl	80072b8 <_strtol_r>
 80049ba:	9b04      	ldr	r3, [sp, #16]
 80049bc:	9e05      	ldr	r6, [sp, #20]
 80049be:	1ac2      	subs	r2, r0, r3
 80049c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80049c4:	429e      	cmp	r6, r3
 80049c6:	bf28      	it	cs
 80049c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80049cc:	4630      	mov	r0, r6
 80049ce:	490d      	ldr	r1, [pc, #52]	@ (8004a04 <_scanf_float+0x418>)
 80049d0:	f000 f8de 	bl	8004b90 <siprintf>
 80049d4:	e7d0      	b.n	8004978 <_scanf_float+0x38c>
 80049d6:	076d      	lsls	r5, r5, #29
 80049d8:	d4dd      	bmi.n	8004996 <_scanf_float+0x3aa>
 80049da:	9d03      	ldr	r5, [sp, #12]
 80049dc:	602a      	str	r2, [r5, #0]
 80049de:	681d      	ldr	r5, [r3, #0]
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	f7fc f812 	bl	8000a0c <__aeabi_dcmpun>
 80049e8:	b120      	cbz	r0, 80049f4 <_scanf_float+0x408>
 80049ea:	4807      	ldr	r0, [pc, #28]	@ (8004a08 <_scanf_float+0x41c>)
 80049ec:	f000 f9ee 	bl	8004dcc <nanf>
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	e7d5      	b.n	80049a0 <_scanf_float+0x3b4>
 80049f4:	4630      	mov	r0, r6
 80049f6:	4639      	mov	r1, r7
 80049f8:	f7fc f866 	bl	8000ac8 <__aeabi_d2f>
 80049fc:	e7f8      	b.n	80049f0 <_scanf_float+0x404>
 80049fe:	f04f 0900 	mov.w	r9, #0
 8004a02:	e62d      	b.n	8004660 <_scanf_float+0x74>
 8004a04:	08008e54 	.word	0x08008e54
 8004a08:	08009208 	.word	0x08009208

08004a0c <std>:
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	4604      	mov	r4, r0
 8004a12:	e9c0 3300 	strd	r3, r3, [r0]
 8004a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1a:	6083      	str	r3, [r0, #8]
 8004a1c:	8181      	strh	r1, [r0, #12]
 8004a1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a20:	81c2      	strh	r2, [r0, #14]
 8004a22:	6183      	str	r3, [r0, #24]
 8004a24:	4619      	mov	r1, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	305c      	adds	r0, #92	@ 0x5c
 8004a2a:	f000 f940 	bl	8004cae <memset>
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <std+0x58>)
 8004a30:	6224      	str	r4, [r4, #32]
 8004a32:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <std+0x5c>)
 8004a36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a38:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <std+0x60>)
 8004a3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <std+0x64>)
 8004a3e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <std+0x68>)
 8004a42:	429c      	cmp	r4, r3
 8004a44:	d006      	beq.n	8004a54 <std+0x48>
 8004a46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a4a:	4294      	cmp	r4, r2
 8004a4c:	d002      	beq.n	8004a54 <std+0x48>
 8004a4e:	33d0      	adds	r3, #208	@ 0xd0
 8004a50:	429c      	cmp	r4, r3
 8004a52:	d105      	bne.n	8004a60 <std+0x54>
 8004a54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5c:	f000 b9a4 	b.w	8004da8 <__retarget_lock_init_recursive>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	bf00      	nop
 8004a64:	08004c25 	.word	0x08004c25
 8004a68:	08004c4b 	.word	0x08004c4b
 8004a6c:	08004c83 	.word	0x08004c83
 8004a70:	08004ca7 	.word	0x08004ca7
 8004a74:	200003cc 	.word	0x200003cc

08004a78 <stdio_exit_handler>:
 8004a78:	4a02      	ldr	r2, [pc, #8]	@ (8004a84 <stdio_exit_handler+0xc>)
 8004a7a:	4903      	ldr	r1, [pc, #12]	@ (8004a88 <stdio_exit_handler+0x10>)
 8004a7c:	4803      	ldr	r0, [pc, #12]	@ (8004a8c <stdio_exit_handler+0x14>)
 8004a7e:	f000 b869 	b.w	8004b54 <_fwalk_sglue>
 8004a82:	bf00      	nop
 8004a84:	2000001c 	.word	0x2000001c
 8004a88:	08007c99 	.word	0x08007c99
 8004a8c:	2000002c 	.word	0x2000002c

08004a90 <cleanup_stdio>:
 8004a90:	6841      	ldr	r1, [r0, #4]
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <cleanup_stdio+0x34>)
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4299      	cmp	r1, r3
 8004a98:	4604      	mov	r4, r0
 8004a9a:	d001      	beq.n	8004aa0 <cleanup_stdio+0x10>
 8004a9c:	f003 f8fc 	bl	8007c98 <_fflush_r>
 8004aa0:	68a1      	ldr	r1, [r4, #8]
 8004aa2:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <cleanup_stdio+0x38>)
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	d002      	beq.n	8004aae <cleanup_stdio+0x1e>
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f003 f8f5 	bl	8007c98 <_fflush_r>
 8004aae:	68e1      	ldr	r1, [r4, #12]
 8004ab0:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <cleanup_stdio+0x3c>)
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	d004      	beq.n	8004ac0 <cleanup_stdio+0x30>
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abc:	f003 b8ec 	b.w	8007c98 <_fflush_r>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200003cc 	.word	0x200003cc
 8004ac8:	20000434 	.word	0x20000434
 8004acc:	2000049c 	.word	0x2000049c

08004ad0 <global_stdio_init.part.0>:
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <global_stdio_init.part.0+0x30>)
 8004ad4:	4c0b      	ldr	r4, [pc, #44]	@ (8004b04 <global_stdio_init.part.0+0x34>)
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b08 <global_stdio_init.part.0+0x38>)
 8004ad8:	4620      	mov	r0, r4
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	2104      	movs	r1, #4
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f7ff ff94 	bl	8004a0c <std>
 8004ae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ae8:	2201      	movs	r2, #1
 8004aea:	2109      	movs	r1, #9
 8004aec:	f7ff ff8e 	bl	8004a0c <std>
 8004af0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004af4:	2202      	movs	r2, #2
 8004af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004afa:	2112      	movs	r1, #18
 8004afc:	f7ff bf86 	b.w	8004a0c <std>
 8004b00:	20000504 	.word	0x20000504
 8004b04:	200003cc 	.word	0x200003cc
 8004b08:	08004a79 	.word	0x08004a79

08004b0c <__sfp_lock_acquire>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	@ (8004b14 <__sfp_lock_acquire+0x8>)
 8004b0e:	f000 b94c 	b.w	8004daa <__retarget_lock_acquire_recursive>
 8004b12:	bf00      	nop
 8004b14:	2000050d 	.word	0x2000050d

08004b18 <__sfp_lock_release>:
 8004b18:	4801      	ldr	r0, [pc, #4]	@ (8004b20 <__sfp_lock_release+0x8>)
 8004b1a:	f000 b947 	b.w	8004dac <__retarget_lock_release_recursive>
 8004b1e:	bf00      	nop
 8004b20:	2000050d 	.word	0x2000050d

08004b24 <__sinit>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4604      	mov	r4, r0
 8004b28:	f7ff fff0 	bl	8004b0c <__sfp_lock_acquire>
 8004b2c:	6a23      	ldr	r3, [r4, #32]
 8004b2e:	b11b      	cbz	r3, 8004b38 <__sinit+0x14>
 8004b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b34:	f7ff bff0 	b.w	8004b18 <__sfp_lock_release>
 8004b38:	4b04      	ldr	r3, [pc, #16]	@ (8004b4c <__sinit+0x28>)
 8004b3a:	6223      	str	r3, [r4, #32]
 8004b3c:	4b04      	ldr	r3, [pc, #16]	@ (8004b50 <__sinit+0x2c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f5      	bne.n	8004b30 <__sinit+0xc>
 8004b44:	f7ff ffc4 	bl	8004ad0 <global_stdio_init.part.0>
 8004b48:	e7f2      	b.n	8004b30 <__sinit+0xc>
 8004b4a:	bf00      	nop
 8004b4c:	08004a91 	.word	0x08004a91
 8004b50:	20000504 	.word	0x20000504

08004b54 <_fwalk_sglue>:
 8004b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b58:	4607      	mov	r7, r0
 8004b5a:	4688      	mov	r8, r1
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	2600      	movs	r6, #0
 8004b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b64:	f1b9 0901 	subs.w	r9, r9, #1
 8004b68:	d505      	bpl.n	8004b76 <_fwalk_sglue+0x22>
 8004b6a:	6824      	ldr	r4, [r4, #0]
 8004b6c:	2c00      	cmp	r4, #0
 8004b6e:	d1f7      	bne.n	8004b60 <_fwalk_sglue+0xc>
 8004b70:	4630      	mov	r0, r6
 8004b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d907      	bls.n	8004b8c <_fwalk_sglue+0x38>
 8004b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b80:	3301      	adds	r3, #1
 8004b82:	d003      	beq.n	8004b8c <_fwalk_sglue+0x38>
 8004b84:	4629      	mov	r1, r5
 8004b86:	4638      	mov	r0, r7
 8004b88:	47c0      	blx	r8
 8004b8a:	4306      	orrs	r6, r0
 8004b8c:	3568      	adds	r5, #104	@ 0x68
 8004b8e:	e7e9      	b.n	8004b64 <_fwalk_sglue+0x10>

08004b90 <siprintf>:
 8004b90:	b40e      	push	{r1, r2, r3}
 8004b92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b96:	b500      	push	{lr}
 8004b98:	b09c      	sub	sp, #112	@ 0x70
 8004b9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	9006      	str	r0, [sp, #24]
 8004ba0:	9107      	str	r1, [sp, #28]
 8004ba2:	9104      	str	r1, [sp, #16]
 8004ba4:	4808      	ldr	r0, [pc, #32]	@ (8004bc8 <siprintf+0x38>)
 8004ba6:	4909      	ldr	r1, [pc, #36]	@ (8004bcc <siprintf+0x3c>)
 8004ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bac:	9105      	str	r1, [sp, #20]
 8004bae:	6800      	ldr	r0, [r0, #0]
 8004bb0:	a902      	add	r1, sp, #8
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	f002 fbde 	bl	8007374 <_svfiprintf_r>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	9b02      	ldr	r3, [sp, #8]
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	b01c      	add	sp, #112	@ 0x70
 8004bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc4:	b003      	add	sp, #12
 8004bc6:	4770      	bx	lr
 8004bc8:	20000028 	.word	0x20000028
 8004bcc:	ffff0208 	.word	0xffff0208

08004bd0 <siscanf>:
 8004bd0:	b40e      	push	{r1, r2, r3}
 8004bd2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004bd6:	b530      	push	{r4, r5, lr}
 8004bd8:	b09c      	sub	sp, #112	@ 0x70
 8004bda:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004bdc:	f854 5b04 	ldr.w	r5, [r4], #4
 8004be0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004be4:	9002      	str	r0, [sp, #8]
 8004be6:	9006      	str	r0, [sp, #24]
 8004be8:	f7fb fab2 	bl	8000150 <strlen>
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <siscanf+0x4c>)
 8004bee:	9003      	str	r0, [sp, #12]
 8004bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004bf6:	9314      	str	r3, [sp, #80]	@ 0x50
 8004bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bfc:	9007      	str	r0, [sp, #28]
 8004bfe:	4808      	ldr	r0, [pc, #32]	@ (8004c20 <siscanf+0x50>)
 8004c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c04:	462a      	mov	r2, r5
 8004c06:	4623      	mov	r3, r4
 8004c08:	a902      	add	r1, sp, #8
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	9401      	str	r4, [sp, #4]
 8004c0e:	f002 fd05 	bl	800761c <__ssvfiscanf_r>
 8004c12:	b01c      	add	sp, #112	@ 0x70
 8004c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c18:	b003      	add	sp, #12
 8004c1a:	4770      	bx	lr
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	20000028 	.word	0x20000028

08004c24 <__sread>:
 8004c24:	b510      	push	{r4, lr}
 8004c26:	460c      	mov	r4, r1
 8004c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2c:	f000 f86e 	bl	8004d0c <_read_r>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	bfab      	itete	ge
 8004c34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c36:	89a3      	ldrhlt	r3, [r4, #12]
 8004c38:	181b      	addge	r3, r3, r0
 8004c3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c3e:	bfac      	ite	ge
 8004c40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c42:	81a3      	strhlt	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__seofread>:
 8004c46:	2000      	movs	r0, #0
 8004c48:	4770      	bx	lr

08004c4a <__swrite>:
 8004c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4e:	461f      	mov	r7, r3
 8004c50:	898b      	ldrh	r3, [r1, #12]
 8004c52:	4605      	mov	r5, r0
 8004c54:	05db      	lsls	r3, r3, #23
 8004c56:	460c      	mov	r4, r1
 8004c58:	4616      	mov	r6, r2
 8004c5a:	d505      	bpl.n	8004c68 <__swrite+0x1e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c64:	f000 f840 	bl	8004ce8 <_lseek_r>
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	4628      	mov	r0, r5
 8004c74:	463b      	mov	r3, r7
 8004c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7e:	f000 b857 	b.w	8004d30 <_write_r>

08004c82 <__sseek>:
 8004c82:	b510      	push	{r4, lr}
 8004c84:	460c      	mov	r4, r1
 8004c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8a:	f000 f82d 	bl	8004ce8 <_lseek_r>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	bf15      	itete	ne
 8004c94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c9e:	81a3      	strheq	r3, [r4, #12]
 8004ca0:	bf18      	it	ne
 8004ca2:	81a3      	strhne	r3, [r4, #12]
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <__sclose>:
 8004ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004caa:	f000 b80d 	b.w	8004cc8 <_close_r>

08004cae <memset>:
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <memset+0xa>
 8004cb6:	4770      	bx	lr
 8004cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbc:	e7f9      	b.n	8004cb2 <memset+0x4>
	...

08004cc0 <_localeconv_r>:
 8004cc0:	4800      	ldr	r0, [pc, #0]	@ (8004cc4 <_localeconv_r+0x4>)
 8004cc2:	4770      	bx	lr
 8004cc4:	20000168 	.word	0x20000168

08004cc8 <_close_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4d05      	ldr	r5, [pc, #20]	@ (8004ce4 <_close_r+0x1c>)
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fd f847 	bl	8001d66 <_close>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_close_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_close_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000508 	.word	0x20000508

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4d05      	ldr	r5, [pc, #20]	@ (8004d08 <_lseek_r+0x20>)
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fd f859 	bl	8001dae <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000508 	.word	0x20000508

08004d0c <_read_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	2200      	movs	r2, #0
 8004d16:	4d05      	ldr	r5, [pc, #20]	@ (8004d2c <_read_r+0x20>)
 8004d18:	602a      	str	r2, [r5, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f7fc ffea 	bl	8001cf4 <_read>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_read_r+0x1e>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_read_r+0x1e>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	20000508 	.word	0x20000508

08004d30 <_write_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4d05      	ldr	r5, [pc, #20]	@ (8004d50 <_write_r+0x20>)
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fc fff5 	bl	8001d2e <_write>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_write_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_write_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20000508 	.word	0x20000508

08004d54 <__errno>:
 8004d54:	4b01      	ldr	r3, [pc, #4]	@ (8004d5c <__errno+0x8>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000028 	.word	0x20000028

08004d60 <__libc_init_array>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	2600      	movs	r6, #0
 8004d64:	4d0c      	ldr	r5, [pc, #48]	@ (8004d98 <__libc_init_array+0x38>)
 8004d66:	4c0d      	ldr	r4, [pc, #52]	@ (8004d9c <__libc_init_array+0x3c>)
 8004d68:	1b64      	subs	r4, r4, r5
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	42a6      	cmp	r6, r4
 8004d6e:	d109      	bne.n	8004d84 <__libc_init_array+0x24>
 8004d70:	f003 ff62 	bl	8008c38 <_init>
 8004d74:	2600      	movs	r6, #0
 8004d76:	4d0a      	ldr	r5, [pc, #40]	@ (8004da0 <__libc_init_array+0x40>)
 8004d78:	4c0a      	ldr	r4, [pc, #40]	@ (8004da4 <__libc_init_array+0x44>)
 8004d7a:	1b64      	subs	r4, r4, r5
 8004d7c:	10a4      	asrs	r4, r4, #2
 8004d7e:	42a6      	cmp	r6, r4
 8004d80:	d105      	bne.n	8004d8e <__libc_init_array+0x2e>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d88:	4798      	blx	r3
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7ee      	b.n	8004d6c <__libc_init_array+0xc>
 8004d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d92:	4798      	blx	r3
 8004d94:	3601      	adds	r6, #1
 8004d96:	e7f2      	b.n	8004d7e <__libc_init_array+0x1e>
 8004d98:	08009274 	.word	0x08009274
 8004d9c:	08009274 	.word	0x08009274
 8004da0:	08009274 	.word	0x08009274
 8004da4:	08009278 	.word	0x08009278

08004da8 <__retarget_lock_init_recursive>:
 8004da8:	4770      	bx	lr

08004daa <__retarget_lock_acquire_recursive>:
 8004daa:	4770      	bx	lr

08004dac <__retarget_lock_release_recursive>:
 8004dac:	4770      	bx	lr

08004dae <memchr>:
 8004dae:	4603      	mov	r3, r0
 8004db0:	b510      	push	{r4, lr}
 8004db2:	b2c9      	uxtb	r1, r1
 8004db4:	4402      	add	r2, r0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	d101      	bne.n	8004dc0 <memchr+0x12>
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	e003      	b.n	8004dc8 <memchr+0x1a>
 8004dc0:	7804      	ldrb	r4, [r0, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	428c      	cmp	r4, r1
 8004dc6:	d1f6      	bne.n	8004db6 <memchr+0x8>
 8004dc8:	bd10      	pop	{r4, pc}
	...

08004dcc <nanf>:
 8004dcc:	4800      	ldr	r0, [pc, #0]	@ (8004dd0 <nanf+0x4>)
 8004dce:	4770      	bx	lr
 8004dd0:	7fc00000 	.word	0x7fc00000

08004dd4 <quorem>:
 8004dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd8:	6903      	ldr	r3, [r0, #16]
 8004dda:	690c      	ldr	r4, [r1, #16]
 8004ddc:	4607      	mov	r7, r0
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	db7e      	blt.n	8004ee0 <quorem+0x10c>
 8004de2:	3c01      	subs	r4, #1
 8004de4:	00a3      	lsls	r3, r4, #2
 8004de6:	f100 0514 	add.w	r5, r0, #20
 8004dea:	f101 0814 	add.w	r8, r1, #20
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004dfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	429a      	cmp	r2, r3
 8004e02:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e0a:	d32e      	bcc.n	8004e6a <quorem+0x96>
 8004e0c:	f04f 0a00 	mov.w	sl, #0
 8004e10:	46c4      	mov	ip, r8
 8004e12:	46ae      	mov	lr, r5
 8004e14:	46d3      	mov	fp, sl
 8004e16:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e1a:	b298      	uxth	r0, r3
 8004e1c:	fb06 a000 	mla	r0, r6, r0, sl
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	0c02      	lsrs	r2, r0, #16
 8004e24:	fb06 2303 	mla	r3, r6, r3, r2
 8004e28:	f8de 2000 	ldr.w	r2, [lr]
 8004e2c:	b280      	uxth	r0, r0
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	1a12      	subs	r2, r2, r0
 8004e32:	445a      	add	r2, fp
 8004e34:	f8de 0000 	ldr.w	r0, [lr]
 8004e38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e46:	b292      	uxth	r2, r2
 8004e48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e4c:	45e1      	cmp	r9, ip
 8004e4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e52:	f84e 2b04 	str.w	r2, [lr], #4
 8004e56:	d2de      	bcs.n	8004e16 <quorem+0x42>
 8004e58:	9b00      	ldr	r3, [sp, #0]
 8004e5a:	58eb      	ldr	r3, [r5, r3]
 8004e5c:	b92b      	cbnz	r3, 8004e6a <quorem+0x96>
 8004e5e:	9b01      	ldr	r3, [sp, #4]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	429d      	cmp	r5, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	d32f      	bcc.n	8004ec8 <quorem+0xf4>
 8004e68:	613c      	str	r4, [r7, #16]
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f001 f9c4 	bl	80061f8 <__mcmp>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	db25      	blt.n	8004ec0 <quorem+0xec>
 8004e74:	4629      	mov	r1, r5
 8004e76:	2000      	movs	r0, #0
 8004e78:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e7c:	f8d1 c000 	ldr.w	ip, [r1]
 8004e80:	fa1f fe82 	uxth.w	lr, r2
 8004e84:	fa1f f38c 	uxth.w	r3, ip
 8004e88:	eba3 030e 	sub.w	r3, r3, lr
 8004e8c:	4403      	add	r3, r0
 8004e8e:	0c12      	lsrs	r2, r2, #16
 8004e90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e9e:	45c1      	cmp	r9, r8
 8004ea0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ea4:	f841 3b04 	str.w	r3, [r1], #4
 8004ea8:	d2e6      	bcs.n	8004e78 <quorem+0xa4>
 8004eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eb2:	b922      	cbnz	r2, 8004ebe <quorem+0xea>
 8004eb4:	3b04      	subs	r3, #4
 8004eb6:	429d      	cmp	r5, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	d30b      	bcc.n	8004ed4 <quorem+0x100>
 8004ebc:	613c      	str	r4, [r7, #16]
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	b003      	add	sp, #12
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	3b04      	subs	r3, #4
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d1cb      	bne.n	8004e68 <quorem+0x94>
 8004ed0:	3c01      	subs	r4, #1
 8004ed2:	e7c6      	b.n	8004e62 <quorem+0x8e>
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	3b04      	subs	r3, #4
 8004ed8:	2a00      	cmp	r2, #0
 8004eda:	d1ef      	bne.n	8004ebc <quorem+0xe8>
 8004edc:	3c01      	subs	r4, #1
 8004ede:	e7ea      	b.n	8004eb6 <quorem+0xe2>
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e7ee      	b.n	8004ec2 <quorem+0xee>
 8004ee4:	0000      	movs	r0, r0
	...

08004ee8 <_dtoa_r>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	4614      	mov	r4, r2
 8004eee:	461d      	mov	r5, r3
 8004ef0:	69c7      	ldr	r7, [r0, #28]
 8004ef2:	b097      	sub	sp, #92	@ 0x5c
 8004ef4:	4683      	mov	fp, r0
 8004ef6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004efa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004efc:	b97f      	cbnz	r7, 8004f1e <_dtoa_r+0x36>
 8004efe:	2010      	movs	r0, #16
 8004f00:	f000 fe02 	bl	8005b08 <malloc>
 8004f04:	4602      	mov	r2, r0
 8004f06:	f8cb 001c 	str.w	r0, [fp, #28]
 8004f0a:	b920      	cbnz	r0, 8004f16 <_dtoa_r+0x2e>
 8004f0c:	21ef      	movs	r1, #239	@ 0xef
 8004f0e:	4ba8      	ldr	r3, [pc, #672]	@ (80051b0 <_dtoa_r+0x2c8>)
 8004f10:	48a8      	ldr	r0, [pc, #672]	@ (80051b4 <_dtoa_r+0x2cc>)
 8004f12:	f002 ffab 	bl	8007e6c <__assert_func>
 8004f16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f1a:	6007      	str	r7, [r0, #0]
 8004f1c:	60c7      	str	r7, [r0, #12]
 8004f1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	b159      	cbz	r1, 8004f3e <_dtoa_r+0x56>
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4093      	lsls	r3, r2
 8004f2c:	604a      	str	r2, [r1, #4]
 8004f2e:	608b      	str	r3, [r1, #8]
 8004f30:	4658      	mov	r0, fp
 8004f32:	f000 fedf 	bl	8005cf4 <_Bfree>
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	1e2b      	subs	r3, r5, #0
 8004f40:	bfaf      	iteee	ge
 8004f42:	2300      	movge	r3, #0
 8004f44:	2201      	movlt	r2, #1
 8004f46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f4a:	9303      	strlt	r3, [sp, #12]
 8004f4c:	bfa8      	it	ge
 8004f4e:	6033      	strge	r3, [r6, #0]
 8004f50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f54:	4b98      	ldr	r3, [pc, #608]	@ (80051b8 <_dtoa_r+0x2d0>)
 8004f56:	bfb8      	it	lt
 8004f58:	6032      	strlt	r2, [r6, #0]
 8004f5a:	ea33 0308 	bics.w	r3, r3, r8
 8004f5e:	d112      	bne.n	8004f86 <_dtoa_r+0x9e>
 8004f60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004f6c:	4323      	orrs	r3, r4
 8004f6e:	f000 8550 	beq.w	8005a12 <_dtoa_r+0xb2a>
 8004f72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80051bc <_dtoa_r+0x2d4>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8552 	beq.w	8005a22 <_dtoa_r+0xb3a>
 8004f7e:	f10a 0303 	add.w	r3, sl, #3
 8004f82:	f000 bd4c 	b.w	8005a1e <_dtoa_r+0xb36>
 8004f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f92:	2200      	movs	r2, #0
 8004f94:	2300      	movs	r3, #0
 8004f96:	f7fb fd07 	bl	80009a8 <__aeabi_dcmpeq>
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	b158      	cbz	r0, 8004fb6 <_dtoa_r+0xce>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fa6:	b113      	cbz	r3, 8004fae <_dtoa_r+0xc6>
 8004fa8:	4b85      	ldr	r3, [pc, #532]	@ (80051c0 <_dtoa_r+0x2d8>)
 8004faa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80051c4 <_dtoa_r+0x2dc>
 8004fb2:	f000 bd36 	b.w	8005a22 <_dtoa_r+0xb3a>
 8004fb6:	ab14      	add	r3, sp, #80	@ 0x50
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	ab15      	add	r3, sp, #84	@ 0x54
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	4658      	mov	r0, fp
 8004fc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004fc4:	f001 fa30 	bl	8006428 <__d2b>
 8004fc8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004fcc:	4681      	mov	r9, r0
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	d077      	beq.n	80050c2 <_dtoa_r+0x1da>
 8004fd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fd8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004fe4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004fe8:	9712      	str	r7, [sp, #72]	@ 0x48
 8004fea:	4619      	mov	r1, r3
 8004fec:	2200      	movs	r2, #0
 8004fee:	4b76      	ldr	r3, [pc, #472]	@ (80051c8 <_dtoa_r+0x2e0>)
 8004ff0:	f7fb f8ba 	bl	8000168 <__aeabi_dsub>
 8004ff4:	a368      	add	r3, pc, #416	@ (adr r3, 8005198 <_dtoa_r+0x2b0>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fa6d 	bl	80004d8 <__aeabi_dmul>
 8004ffe:	a368      	add	r3, pc, #416	@ (adr r3, 80051a0 <_dtoa_r+0x2b8>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f7fb f8b2 	bl	800016c <__adddf3>
 8005008:	4604      	mov	r4, r0
 800500a:	4630      	mov	r0, r6
 800500c:	460d      	mov	r5, r1
 800500e:	f7fb f9f9 	bl	8000404 <__aeabi_i2d>
 8005012:	a365      	add	r3, pc, #404	@ (adr r3, 80051a8 <_dtoa_r+0x2c0>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f7fb fa5e 	bl	80004d8 <__aeabi_dmul>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4620      	mov	r0, r4
 8005022:	4629      	mov	r1, r5
 8005024:	f7fb f8a2 	bl	800016c <__adddf3>
 8005028:	4604      	mov	r4, r0
 800502a:	460d      	mov	r5, r1
 800502c:	f7fb fd04 	bl	8000a38 <__aeabi_d2iz>
 8005030:	2200      	movs	r2, #0
 8005032:	4607      	mov	r7, r0
 8005034:	2300      	movs	r3, #0
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb fcbf 	bl	80009bc <__aeabi_dcmplt>
 800503e:	b140      	cbz	r0, 8005052 <_dtoa_r+0x16a>
 8005040:	4638      	mov	r0, r7
 8005042:	f7fb f9df 	bl	8000404 <__aeabi_i2d>
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	f7fb fcad 	bl	80009a8 <__aeabi_dcmpeq>
 800504e:	b900      	cbnz	r0, 8005052 <_dtoa_r+0x16a>
 8005050:	3f01      	subs	r7, #1
 8005052:	2f16      	cmp	r7, #22
 8005054:	d853      	bhi.n	80050fe <_dtoa_r+0x216>
 8005056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800505a:	4b5c      	ldr	r3, [pc, #368]	@ (80051cc <_dtoa_r+0x2e4>)
 800505c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb fcaa 	bl	80009bc <__aeabi_dcmplt>
 8005068:	2800      	cmp	r0, #0
 800506a:	d04a      	beq.n	8005102 <_dtoa_r+0x21a>
 800506c:	2300      	movs	r3, #0
 800506e:	3f01      	subs	r7, #1
 8005070:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005072:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005074:	1b9b      	subs	r3, r3, r6
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	bf46      	itte	mi
 800507a:	f1c3 0801 	rsbmi	r8, r3, #1
 800507e:	2300      	movmi	r3, #0
 8005080:	f04f 0800 	movpl.w	r8, #0
 8005084:	9209      	str	r2, [sp, #36]	@ 0x24
 8005086:	bf48      	it	mi
 8005088:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800508a:	2f00      	cmp	r7, #0
 800508c:	db3b      	blt.n	8005106 <_dtoa_r+0x21e>
 800508e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005090:	970e      	str	r7, [sp, #56]	@ 0x38
 8005092:	443b      	add	r3, r7
 8005094:	9309      	str	r3, [sp, #36]	@ 0x24
 8005096:	2300      	movs	r3, #0
 8005098:	930a      	str	r3, [sp, #40]	@ 0x28
 800509a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800509c:	2b09      	cmp	r3, #9
 800509e:	d866      	bhi.n	800516e <_dtoa_r+0x286>
 80050a0:	2b05      	cmp	r3, #5
 80050a2:	bfc4      	itt	gt
 80050a4:	3b04      	subgt	r3, #4
 80050a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80050a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050aa:	bfc8      	it	gt
 80050ac:	2400      	movgt	r4, #0
 80050ae:	f1a3 0302 	sub.w	r3, r3, #2
 80050b2:	bfd8      	it	le
 80050b4:	2401      	movle	r4, #1
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d864      	bhi.n	8005184 <_dtoa_r+0x29c>
 80050ba:	e8df f003 	tbb	[pc, r3]
 80050be:	382b      	.short	0x382b
 80050c0:	5636      	.short	0x5636
 80050c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80050c6:	441e      	add	r6, r3
 80050c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	bfc1      	itttt	gt
 80050d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80050d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80050d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80050dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80050e0:	bfd6      	itet	le
 80050e2:	f1c3 0320 	rsble	r3, r3, #32
 80050e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80050ea:	fa04 f003 	lslle.w	r0, r4, r3
 80050ee:	f7fb f979 	bl	80003e4 <__aeabi_ui2d>
 80050f2:	2201      	movs	r2, #1
 80050f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80050f8:	3e01      	subs	r6, #1
 80050fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80050fc:	e775      	b.n	8004fea <_dtoa_r+0x102>
 80050fe:	2301      	movs	r3, #1
 8005100:	e7b6      	b.n	8005070 <_dtoa_r+0x188>
 8005102:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005104:	e7b5      	b.n	8005072 <_dtoa_r+0x18a>
 8005106:	427b      	negs	r3, r7
 8005108:	930a      	str	r3, [sp, #40]	@ 0x28
 800510a:	2300      	movs	r3, #0
 800510c:	eba8 0807 	sub.w	r8, r8, r7
 8005110:	930e      	str	r3, [sp, #56]	@ 0x38
 8005112:	e7c2      	b.n	800509a <_dtoa_r+0x1b2>
 8005114:	2300      	movs	r3, #0
 8005116:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800511a:	2b00      	cmp	r3, #0
 800511c:	dc35      	bgt.n	800518a <_dtoa_r+0x2a2>
 800511e:	2301      	movs	r3, #1
 8005120:	461a      	mov	r2, r3
 8005122:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005126:	9221      	str	r2, [sp, #132]	@ 0x84
 8005128:	e00b      	b.n	8005142 <_dtoa_r+0x25a>
 800512a:	2301      	movs	r3, #1
 800512c:	e7f3      	b.n	8005116 <_dtoa_r+0x22e>
 800512e:	2300      	movs	r3, #0
 8005130:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005132:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	9308      	str	r3, [sp, #32]
 8005138:	3301      	adds	r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	9307      	str	r3, [sp, #28]
 800513e:	bfb8      	it	lt
 8005140:	2301      	movlt	r3, #1
 8005142:	2100      	movs	r1, #0
 8005144:	2204      	movs	r2, #4
 8005146:	f8db 001c 	ldr.w	r0, [fp, #28]
 800514a:	f102 0514 	add.w	r5, r2, #20
 800514e:	429d      	cmp	r5, r3
 8005150:	d91f      	bls.n	8005192 <_dtoa_r+0x2aa>
 8005152:	6041      	str	r1, [r0, #4]
 8005154:	4658      	mov	r0, fp
 8005156:	f000 fd8d 	bl	8005c74 <_Balloc>
 800515a:	4682      	mov	sl, r0
 800515c:	2800      	cmp	r0, #0
 800515e:	d139      	bne.n	80051d4 <_dtoa_r+0x2ec>
 8005160:	4602      	mov	r2, r0
 8005162:	f240 11af 	movw	r1, #431	@ 0x1af
 8005166:	4b1a      	ldr	r3, [pc, #104]	@ (80051d0 <_dtoa_r+0x2e8>)
 8005168:	e6d2      	b.n	8004f10 <_dtoa_r+0x28>
 800516a:	2301      	movs	r3, #1
 800516c:	e7e0      	b.n	8005130 <_dtoa_r+0x248>
 800516e:	2401      	movs	r4, #1
 8005170:	2300      	movs	r3, #0
 8005172:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005174:	9320      	str	r3, [sp, #128]	@ 0x80
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	2200      	movs	r2, #0
 800517c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005180:	2312      	movs	r3, #18
 8005182:	e7d0      	b.n	8005126 <_dtoa_r+0x23e>
 8005184:	2301      	movs	r3, #1
 8005186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005188:	e7f5      	b.n	8005176 <_dtoa_r+0x28e>
 800518a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800518c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005190:	e7d7      	b.n	8005142 <_dtoa_r+0x25a>
 8005192:	3101      	adds	r1, #1
 8005194:	0052      	lsls	r2, r2, #1
 8005196:	e7d8      	b.n	800514a <_dtoa_r+0x262>
 8005198:	636f4361 	.word	0x636f4361
 800519c:	3fd287a7 	.word	0x3fd287a7
 80051a0:	8b60c8b3 	.word	0x8b60c8b3
 80051a4:	3fc68a28 	.word	0x3fc68a28
 80051a8:	509f79fb 	.word	0x509f79fb
 80051ac:	3fd34413 	.word	0x3fd34413
 80051b0:	08008e66 	.word	0x08008e66
 80051b4:	08008e7d 	.word	0x08008e7d
 80051b8:	7ff00000 	.word	0x7ff00000
 80051bc:	08008e62 	.word	0x08008e62
 80051c0:	080091c1 	.word	0x080091c1
 80051c4:	080091c0 	.word	0x080091c0
 80051c8:	3ff80000 	.word	0x3ff80000
 80051cc:	08008f78 	.word	0x08008f78
 80051d0:	08008ed5 	.word	0x08008ed5
 80051d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80051d8:	6018      	str	r0, [r3, #0]
 80051da:	9b07      	ldr	r3, [sp, #28]
 80051dc:	2b0e      	cmp	r3, #14
 80051de:	f200 80a4 	bhi.w	800532a <_dtoa_r+0x442>
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	f000 80a1 	beq.w	800532a <_dtoa_r+0x442>
 80051e8:	2f00      	cmp	r7, #0
 80051ea:	dd33      	ble.n	8005254 <_dtoa_r+0x36c>
 80051ec:	4b86      	ldr	r3, [pc, #536]	@ (8005408 <_dtoa_r+0x520>)
 80051ee:	f007 020f 	and.w	r2, r7, #15
 80051f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051f6:	05f8      	lsls	r0, r7, #23
 80051f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005200:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005204:	d516      	bpl.n	8005234 <_dtoa_r+0x34c>
 8005206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800520a:	4b80      	ldr	r3, [pc, #512]	@ (800540c <_dtoa_r+0x524>)
 800520c:	2603      	movs	r6, #3
 800520e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005212:	f7fb fa8b 	bl	800072c <__aeabi_ddiv>
 8005216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800521a:	f004 040f 	and.w	r4, r4, #15
 800521e:	4d7b      	ldr	r5, [pc, #492]	@ (800540c <_dtoa_r+0x524>)
 8005220:	b954      	cbnz	r4, 8005238 <_dtoa_r+0x350>
 8005222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800522a:	f7fb fa7f 	bl	800072c <__aeabi_ddiv>
 800522e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005232:	e028      	b.n	8005286 <_dtoa_r+0x39e>
 8005234:	2602      	movs	r6, #2
 8005236:	e7f2      	b.n	800521e <_dtoa_r+0x336>
 8005238:	07e1      	lsls	r1, r4, #31
 800523a:	d508      	bpl.n	800524e <_dtoa_r+0x366>
 800523c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005240:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005244:	f7fb f948 	bl	80004d8 <__aeabi_dmul>
 8005248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800524c:	3601      	adds	r6, #1
 800524e:	1064      	asrs	r4, r4, #1
 8005250:	3508      	adds	r5, #8
 8005252:	e7e5      	b.n	8005220 <_dtoa_r+0x338>
 8005254:	f000 80d2 	beq.w	80053fc <_dtoa_r+0x514>
 8005258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800525c:	427c      	negs	r4, r7
 800525e:	4b6a      	ldr	r3, [pc, #424]	@ (8005408 <_dtoa_r+0x520>)
 8005260:	f004 020f 	and.w	r2, r4, #15
 8005264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7fb f934 	bl	80004d8 <__aeabi_dmul>
 8005270:	2602      	movs	r6, #2
 8005272:	2300      	movs	r3, #0
 8005274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005278:	4d64      	ldr	r5, [pc, #400]	@ (800540c <_dtoa_r+0x524>)
 800527a:	1124      	asrs	r4, r4, #4
 800527c:	2c00      	cmp	r4, #0
 800527e:	f040 80b2 	bne.w	80053e6 <_dtoa_r+0x4fe>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1d3      	bne.n	800522e <_dtoa_r+0x346>
 8005286:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800528a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80b7 	beq.w	8005400 <_dtoa_r+0x518>
 8005292:	2200      	movs	r2, #0
 8005294:	4620      	mov	r0, r4
 8005296:	4629      	mov	r1, r5
 8005298:	4b5d      	ldr	r3, [pc, #372]	@ (8005410 <_dtoa_r+0x528>)
 800529a:	f7fb fb8f 	bl	80009bc <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	f000 80ae 	beq.w	8005400 <_dtoa_r+0x518>
 80052a4:	9b07      	ldr	r3, [sp, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80aa 	beq.w	8005400 <_dtoa_r+0x518>
 80052ac:	9b08      	ldr	r3, [sp, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd37      	ble.n	8005322 <_dtoa_r+0x43a>
 80052b2:	1e7b      	subs	r3, r7, #1
 80052b4:	4620      	mov	r0, r4
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	2200      	movs	r2, #0
 80052ba:	4629      	mov	r1, r5
 80052bc:	4b55      	ldr	r3, [pc, #340]	@ (8005414 <_dtoa_r+0x52c>)
 80052be:	f7fb f90b 	bl	80004d8 <__aeabi_dmul>
 80052c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052c6:	9c08      	ldr	r4, [sp, #32]
 80052c8:	3601      	adds	r6, #1
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7fb f89a 	bl	8000404 <__aeabi_i2d>
 80052d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	2200      	movs	r2, #0
 80052da:	4b4f      	ldr	r3, [pc, #316]	@ (8005418 <_dtoa_r+0x530>)
 80052dc:	f7fa ff46 	bl	800016c <__adddf3>
 80052e0:	4605      	mov	r5, r0
 80052e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80052e6:	2c00      	cmp	r4, #0
 80052e8:	f040 809a 	bne.w	8005420 <_dtoa_r+0x538>
 80052ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	4b4a      	ldr	r3, [pc, #296]	@ (800541c <_dtoa_r+0x534>)
 80052f4:	f7fa ff38 	bl	8000168 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005300:	462a      	mov	r2, r5
 8005302:	4633      	mov	r3, r6
 8005304:	f7fb fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8005308:	2800      	cmp	r0, #0
 800530a:	f040 828e 	bne.w	800582a <_dtoa_r+0x942>
 800530e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005312:	462a      	mov	r2, r5
 8005314:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005318:	f7fb fb50 	bl	80009bc <__aeabi_dcmplt>
 800531c:	2800      	cmp	r0, #0
 800531e:	f040 8127 	bne.w	8005570 <_dtoa_r+0x688>
 8005322:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005326:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800532a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800532c:	2b00      	cmp	r3, #0
 800532e:	f2c0 8163 	blt.w	80055f8 <_dtoa_r+0x710>
 8005332:	2f0e      	cmp	r7, #14
 8005334:	f300 8160 	bgt.w	80055f8 <_dtoa_r+0x710>
 8005338:	4b33      	ldr	r3, [pc, #204]	@ (8005408 <_dtoa_r+0x520>)
 800533a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800533e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005342:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005346:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005348:	2b00      	cmp	r3, #0
 800534a:	da03      	bge.n	8005354 <_dtoa_r+0x46c>
 800534c:	9b07      	ldr	r3, [sp, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f340 8100 	ble.w	8005554 <_dtoa_r+0x66c>
 8005354:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005358:	4656      	mov	r6, sl
 800535a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb f9e3 	bl	800072c <__aeabi_ddiv>
 8005366:	f7fb fb67 	bl	8000a38 <__aeabi_d2iz>
 800536a:	4680      	mov	r8, r0
 800536c:	f7fb f84a 	bl	8000404 <__aeabi_i2d>
 8005370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005374:	f7fb f8b0 	bl	80004d8 <__aeabi_dmul>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fa fef2 	bl	8000168 <__aeabi_dsub>
 8005384:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005388:	9d07      	ldr	r5, [sp, #28]
 800538a:	f806 4b01 	strb.w	r4, [r6], #1
 800538e:	eba6 040a 	sub.w	r4, r6, sl
 8005392:	42a5      	cmp	r5, r4
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	f040 8116 	bne.w	80055c8 <_dtoa_r+0x6e0>
 800539c:	f7fa fee6 	bl	800016c <__adddf3>
 80053a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053a4:	4604      	mov	r4, r0
 80053a6:	460d      	mov	r5, r1
 80053a8:	f7fb fb26 	bl	80009f8 <__aeabi_dcmpgt>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f040 80f8 	bne.w	80055a2 <_dtoa_r+0x6ba>
 80053b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053b6:	4620      	mov	r0, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	f7fb faf5 	bl	80009a8 <__aeabi_dcmpeq>
 80053be:	b118      	cbz	r0, 80053c8 <_dtoa_r+0x4e0>
 80053c0:	f018 0f01 	tst.w	r8, #1
 80053c4:	f040 80ed 	bne.w	80055a2 <_dtoa_r+0x6ba>
 80053c8:	4649      	mov	r1, r9
 80053ca:	4658      	mov	r0, fp
 80053cc:	f000 fc92 	bl	8005cf4 <_Bfree>
 80053d0:	2300      	movs	r3, #0
 80053d2:	7033      	strb	r3, [r6, #0]
 80053d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80053d6:	3701      	adds	r7, #1
 80053d8:	601f      	str	r7, [r3, #0]
 80053da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8320 	beq.w	8005a22 <_dtoa_r+0xb3a>
 80053e2:	601e      	str	r6, [r3, #0]
 80053e4:	e31d      	b.n	8005a22 <_dtoa_r+0xb3a>
 80053e6:	07e2      	lsls	r2, r4, #31
 80053e8:	d505      	bpl.n	80053f6 <_dtoa_r+0x50e>
 80053ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053ee:	f7fb f873 	bl	80004d8 <__aeabi_dmul>
 80053f2:	2301      	movs	r3, #1
 80053f4:	3601      	adds	r6, #1
 80053f6:	1064      	asrs	r4, r4, #1
 80053f8:	3508      	adds	r5, #8
 80053fa:	e73f      	b.n	800527c <_dtoa_r+0x394>
 80053fc:	2602      	movs	r6, #2
 80053fe:	e742      	b.n	8005286 <_dtoa_r+0x39e>
 8005400:	9c07      	ldr	r4, [sp, #28]
 8005402:	9704      	str	r7, [sp, #16]
 8005404:	e761      	b.n	80052ca <_dtoa_r+0x3e2>
 8005406:	bf00      	nop
 8005408:	08008f78 	.word	0x08008f78
 800540c:	08008f50 	.word	0x08008f50
 8005410:	3ff00000 	.word	0x3ff00000
 8005414:	40240000 	.word	0x40240000
 8005418:	401c0000 	.word	0x401c0000
 800541c:	40140000 	.word	0x40140000
 8005420:	4b70      	ldr	r3, [pc, #448]	@ (80055e4 <_dtoa_r+0x6fc>)
 8005422:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800542c:	4454      	add	r4, sl
 800542e:	2900      	cmp	r1, #0
 8005430:	d045      	beq.n	80054be <_dtoa_r+0x5d6>
 8005432:	2000      	movs	r0, #0
 8005434:	496c      	ldr	r1, [pc, #432]	@ (80055e8 <_dtoa_r+0x700>)
 8005436:	f7fb f979 	bl	800072c <__aeabi_ddiv>
 800543a:	4633      	mov	r3, r6
 800543c:	462a      	mov	r2, r5
 800543e:	f7fa fe93 	bl	8000168 <__aeabi_dsub>
 8005442:	4656      	mov	r6, sl
 8005444:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800544c:	f7fb faf4 	bl	8000a38 <__aeabi_d2iz>
 8005450:	4605      	mov	r5, r0
 8005452:	f7fa ffd7 	bl	8000404 <__aeabi_i2d>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800545e:	f7fa fe83 	bl	8000168 <__aeabi_dsub>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	3530      	adds	r5, #48	@ 0x30
 8005468:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800546c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005470:	f806 5b01 	strb.w	r5, [r6], #1
 8005474:	f7fb faa2 	bl	80009bc <__aeabi_dcmplt>
 8005478:	2800      	cmp	r0, #0
 800547a:	d163      	bne.n	8005544 <_dtoa_r+0x65c>
 800547c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005480:	2000      	movs	r0, #0
 8005482:	495a      	ldr	r1, [pc, #360]	@ (80055ec <_dtoa_r+0x704>)
 8005484:	f7fa fe70 	bl	8000168 <__aeabi_dsub>
 8005488:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800548c:	f7fb fa96 	bl	80009bc <__aeabi_dcmplt>
 8005490:	2800      	cmp	r0, #0
 8005492:	f040 8087 	bne.w	80055a4 <_dtoa_r+0x6bc>
 8005496:	42a6      	cmp	r6, r4
 8005498:	f43f af43 	beq.w	8005322 <_dtoa_r+0x43a>
 800549c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b53      	ldr	r3, [pc, #332]	@ (80055f0 <_dtoa_r+0x708>)
 80054a4:	f7fb f818 	bl	80004d8 <__aeabi_dmul>
 80054a8:	2200      	movs	r2, #0
 80054aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b2:	4b4f      	ldr	r3, [pc, #316]	@ (80055f0 <_dtoa_r+0x708>)
 80054b4:	f7fb f810 	bl	80004d8 <__aeabi_dmul>
 80054b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054bc:	e7c4      	b.n	8005448 <_dtoa_r+0x560>
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	f7fb f809 	bl	80004d8 <__aeabi_dmul>
 80054c6:	4656      	mov	r6, sl
 80054c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80054ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d2:	f7fb fab1 	bl	8000a38 <__aeabi_d2iz>
 80054d6:	4605      	mov	r5, r0
 80054d8:	f7fa ff94 	bl	8000404 <__aeabi_i2d>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e4:	f7fa fe40 	bl	8000168 <__aeabi_dsub>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	3530      	adds	r5, #48	@ 0x30
 80054ee:	f806 5b01 	strb.w	r5, [r6], #1
 80054f2:	42a6      	cmp	r6, r4
 80054f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	d124      	bne.n	8005548 <_dtoa_r+0x660>
 80054fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005502:	4b39      	ldr	r3, [pc, #228]	@ (80055e8 <_dtoa_r+0x700>)
 8005504:	f7fa fe32 	bl	800016c <__adddf3>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005510:	f7fb fa72 	bl	80009f8 <__aeabi_dcmpgt>
 8005514:	2800      	cmp	r0, #0
 8005516:	d145      	bne.n	80055a4 <_dtoa_r+0x6bc>
 8005518:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800551c:	2000      	movs	r0, #0
 800551e:	4932      	ldr	r1, [pc, #200]	@ (80055e8 <_dtoa_r+0x700>)
 8005520:	f7fa fe22 	bl	8000168 <__aeabi_dsub>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800552c:	f7fb fa46 	bl	80009bc <__aeabi_dcmplt>
 8005530:	2800      	cmp	r0, #0
 8005532:	f43f aef6 	beq.w	8005322 <_dtoa_r+0x43a>
 8005536:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005538:	1e73      	subs	r3, r6, #1
 800553a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800553c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005540:	2b30      	cmp	r3, #48	@ 0x30
 8005542:	d0f8      	beq.n	8005536 <_dtoa_r+0x64e>
 8005544:	9f04      	ldr	r7, [sp, #16]
 8005546:	e73f      	b.n	80053c8 <_dtoa_r+0x4e0>
 8005548:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <_dtoa_r+0x708>)
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005552:	e7bc      	b.n	80054ce <_dtoa_r+0x5e6>
 8005554:	d10c      	bne.n	8005570 <_dtoa_r+0x688>
 8005556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800555a:	2200      	movs	r2, #0
 800555c:	4b25      	ldr	r3, [pc, #148]	@ (80055f4 <_dtoa_r+0x70c>)
 800555e:	f7fa ffbb 	bl	80004d8 <__aeabi_dmul>
 8005562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005566:	f7fb fa3d 	bl	80009e4 <__aeabi_dcmpge>
 800556a:	2800      	cmp	r0, #0
 800556c:	f000 815b 	beq.w	8005826 <_dtoa_r+0x93e>
 8005570:	2400      	movs	r4, #0
 8005572:	4625      	mov	r5, r4
 8005574:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005576:	4656      	mov	r6, sl
 8005578:	43db      	mvns	r3, r3
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	2700      	movs	r7, #0
 800557e:	4621      	mov	r1, r4
 8005580:	4658      	mov	r0, fp
 8005582:	f000 fbb7 	bl	8005cf4 <_Bfree>
 8005586:	2d00      	cmp	r5, #0
 8005588:	d0dc      	beq.n	8005544 <_dtoa_r+0x65c>
 800558a:	b12f      	cbz	r7, 8005598 <_dtoa_r+0x6b0>
 800558c:	42af      	cmp	r7, r5
 800558e:	d003      	beq.n	8005598 <_dtoa_r+0x6b0>
 8005590:	4639      	mov	r1, r7
 8005592:	4658      	mov	r0, fp
 8005594:	f000 fbae 	bl	8005cf4 <_Bfree>
 8005598:	4629      	mov	r1, r5
 800559a:	4658      	mov	r0, fp
 800559c:	f000 fbaa 	bl	8005cf4 <_Bfree>
 80055a0:	e7d0      	b.n	8005544 <_dtoa_r+0x65c>
 80055a2:	9704      	str	r7, [sp, #16]
 80055a4:	4633      	mov	r3, r6
 80055a6:	461e      	mov	r6, r3
 80055a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055ac:	2a39      	cmp	r2, #57	@ 0x39
 80055ae:	d107      	bne.n	80055c0 <_dtoa_r+0x6d8>
 80055b0:	459a      	cmp	sl, r3
 80055b2:	d1f8      	bne.n	80055a6 <_dtoa_r+0x6be>
 80055b4:	9a04      	ldr	r2, [sp, #16]
 80055b6:	3201      	adds	r2, #1
 80055b8:	9204      	str	r2, [sp, #16]
 80055ba:	2230      	movs	r2, #48	@ 0x30
 80055bc:	f88a 2000 	strb.w	r2, [sl]
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	3201      	adds	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e7bd      	b.n	8005544 <_dtoa_r+0x65c>
 80055c8:	2200      	movs	r2, #0
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <_dtoa_r+0x708>)
 80055cc:	f7fa ff84 	bl	80004d8 <__aeabi_dmul>
 80055d0:	2200      	movs	r2, #0
 80055d2:	2300      	movs	r3, #0
 80055d4:	4604      	mov	r4, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	f7fb f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f43f aebc 	beq.w	800535a <_dtoa_r+0x472>
 80055e2:	e6f1      	b.n	80053c8 <_dtoa_r+0x4e0>
 80055e4:	08008f78 	.word	0x08008f78
 80055e8:	3fe00000 	.word	0x3fe00000
 80055ec:	3ff00000 	.word	0x3ff00000
 80055f0:	40240000 	.word	0x40240000
 80055f4:	40140000 	.word	0x40140000
 80055f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	f000 80db 	beq.w	80057b6 <_dtoa_r+0x8ce>
 8005600:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005602:	2a01      	cmp	r2, #1
 8005604:	f300 80bf 	bgt.w	8005786 <_dtoa_r+0x89e>
 8005608:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800560a:	2a00      	cmp	r2, #0
 800560c:	f000 80b7 	beq.w	800577e <_dtoa_r+0x896>
 8005610:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005614:	4646      	mov	r6, r8
 8005616:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005618:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800561a:	2101      	movs	r1, #1
 800561c:	441a      	add	r2, r3
 800561e:	4658      	mov	r0, fp
 8005620:	4498      	add	r8, r3
 8005622:	9209      	str	r2, [sp, #36]	@ 0x24
 8005624:	f000 fc64 	bl	8005ef0 <__i2b>
 8005628:	4605      	mov	r5, r0
 800562a:	b15e      	cbz	r6, 8005644 <_dtoa_r+0x75c>
 800562c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	dd08      	ble.n	8005644 <_dtoa_r+0x75c>
 8005632:	42b3      	cmp	r3, r6
 8005634:	bfa8      	it	ge
 8005636:	4633      	movge	r3, r6
 8005638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800563a:	eba8 0803 	sub.w	r8, r8, r3
 800563e:	1af6      	subs	r6, r6, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	9309      	str	r3, [sp, #36]	@ 0x24
 8005644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005646:	b1f3      	cbz	r3, 8005686 <_dtoa_r+0x79e>
 8005648:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80b7 	beq.w	80057be <_dtoa_r+0x8d6>
 8005650:	b18c      	cbz	r4, 8005676 <_dtoa_r+0x78e>
 8005652:	4629      	mov	r1, r5
 8005654:	4622      	mov	r2, r4
 8005656:	4658      	mov	r0, fp
 8005658:	f000 fd08 	bl	800606c <__pow5mult>
 800565c:	464a      	mov	r2, r9
 800565e:	4601      	mov	r1, r0
 8005660:	4605      	mov	r5, r0
 8005662:	4658      	mov	r0, fp
 8005664:	f000 fc5a 	bl	8005f1c <__multiply>
 8005668:	4649      	mov	r1, r9
 800566a:	9004      	str	r0, [sp, #16]
 800566c:	4658      	mov	r0, fp
 800566e:	f000 fb41 	bl	8005cf4 <_Bfree>
 8005672:	9b04      	ldr	r3, [sp, #16]
 8005674:	4699      	mov	r9, r3
 8005676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005678:	1b1a      	subs	r2, r3, r4
 800567a:	d004      	beq.n	8005686 <_dtoa_r+0x79e>
 800567c:	4649      	mov	r1, r9
 800567e:	4658      	mov	r0, fp
 8005680:	f000 fcf4 	bl	800606c <__pow5mult>
 8005684:	4681      	mov	r9, r0
 8005686:	2101      	movs	r1, #1
 8005688:	4658      	mov	r0, fp
 800568a:	f000 fc31 	bl	8005ef0 <__i2b>
 800568e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005690:	4604      	mov	r4, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 81c9 	beq.w	8005a2a <_dtoa_r+0xb42>
 8005698:	461a      	mov	r2, r3
 800569a:	4601      	mov	r1, r0
 800569c:	4658      	mov	r0, fp
 800569e:	f000 fce5 	bl	800606c <__pow5mult>
 80056a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056a4:	4604      	mov	r4, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	f300 808f 	bgt.w	80057ca <_dtoa_r+0x8e2>
 80056ac:	9b02      	ldr	r3, [sp, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 8087 	bne.w	80057c2 <_dtoa_r+0x8da>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 8083 	bne.w	80057c6 <_dtoa_r+0x8de>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056c6:	0d1b      	lsrs	r3, r3, #20
 80056c8:	051b      	lsls	r3, r3, #20
 80056ca:	b12b      	cbz	r3, 80056d8 <_dtoa_r+0x7f0>
 80056cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ce:	f108 0801 	add.w	r8, r8, #1
 80056d2:	3301      	adds	r3, #1
 80056d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d6:	2301      	movs	r3, #1
 80056d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80056da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 81aa 	beq.w	8005a36 <_dtoa_r+0xb4e>
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056e8:	6918      	ldr	r0, [r3, #16]
 80056ea:	f000 fbb5 	bl	8005e58 <__hi0bits>
 80056ee:	f1c0 0020 	rsb	r0, r0, #32
 80056f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f4:	4418      	add	r0, r3
 80056f6:	f010 001f 	ands.w	r0, r0, #31
 80056fa:	d071      	beq.n	80057e0 <_dtoa_r+0x8f8>
 80056fc:	f1c0 0320 	rsb	r3, r0, #32
 8005700:	2b04      	cmp	r3, #4
 8005702:	dd65      	ble.n	80057d0 <_dtoa_r+0x8e8>
 8005704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005706:	f1c0 001c 	rsb	r0, r0, #28
 800570a:	4403      	add	r3, r0
 800570c:	4480      	add	r8, r0
 800570e:	4406      	add	r6, r0
 8005710:	9309      	str	r3, [sp, #36]	@ 0x24
 8005712:	f1b8 0f00 	cmp.w	r8, #0
 8005716:	dd05      	ble.n	8005724 <_dtoa_r+0x83c>
 8005718:	4649      	mov	r1, r9
 800571a:	4642      	mov	r2, r8
 800571c:	4658      	mov	r0, fp
 800571e:	f000 fcff 	bl	8006120 <__lshift>
 8005722:	4681      	mov	r9, r0
 8005724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	dd05      	ble.n	8005736 <_dtoa_r+0x84e>
 800572a:	4621      	mov	r1, r4
 800572c:	461a      	mov	r2, r3
 800572e:	4658      	mov	r0, fp
 8005730:	f000 fcf6 	bl	8006120 <__lshift>
 8005734:	4604      	mov	r4, r0
 8005736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d053      	beq.n	80057e4 <_dtoa_r+0x8fc>
 800573c:	4621      	mov	r1, r4
 800573e:	4648      	mov	r0, r9
 8005740:	f000 fd5a 	bl	80061f8 <__mcmp>
 8005744:	2800      	cmp	r0, #0
 8005746:	da4d      	bge.n	80057e4 <_dtoa_r+0x8fc>
 8005748:	1e7b      	subs	r3, r7, #1
 800574a:	4649      	mov	r1, r9
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	220a      	movs	r2, #10
 8005750:	2300      	movs	r3, #0
 8005752:	4658      	mov	r0, fp
 8005754:	f000 faf0 	bl	8005d38 <__multadd>
 8005758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800575a:	4681      	mov	r9, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 816c 	beq.w	8005a3a <_dtoa_r+0xb52>
 8005762:	2300      	movs	r3, #0
 8005764:	4629      	mov	r1, r5
 8005766:	220a      	movs	r2, #10
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fae5 	bl	8005d38 <__multadd>
 800576e:	9b08      	ldr	r3, [sp, #32]
 8005770:	4605      	mov	r5, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	dc61      	bgt.n	800583a <_dtoa_r+0x952>
 8005776:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005778:	2b02      	cmp	r3, #2
 800577a:	dc3b      	bgt.n	80057f4 <_dtoa_r+0x90c>
 800577c:	e05d      	b.n	800583a <_dtoa_r+0x952>
 800577e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005780:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005784:	e746      	b.n	8005614 <_dtoa_r+0x72c>
 8005786:	9b07      	ldr	r3, [sp, #28]
 8005788:	1e5c      	subs	r4, r3, #1
 800578a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800578c:	42a3      	cmp	r3, r4
 800578e:	bfbf      	itttt	lt
 8005790:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005792:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005794:	1ae3      	sublt	r3, r4, r3
 8005796:	18d2      	addlt	r2, r2, r3
 8005798:	bfa8      	it	ge
 800579a:	1b1c      	subge	r4, r3, r4
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	bfbe      	ittt	lt
 80057a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80057a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80057a4:	2400      	movlt	r4, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfb5      	itete	lt
 80057aa:	eba8 0603 	sublt.w	r6, r8, r3
 80057ae:	4646      	movge	r6, r8
 80057b0:	2300      	movlt	r3, #0
 80057b2:	9b07      	ldrge	r3, [sp, #28]
 80057b4:	e730      	b.n	8005618 <_dtoa_r+0x730>
 80057b6:	4646      	mov	r6, r8
 80057b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80057ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80057bc:	e735      	b.n	800562a <_dtoa_r+0x742>
 80057be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057c0:	e75c      	b.n	800567c <_dtoa_r+0x794>
 80057c2:	2300      	movs	r3, #0
 80057c4:	e788      	b.n	80056d8 <_dtoa_r+0x7f0>
 80057c6:	9b02      	ldr	r3, [sp, #8]
 80057c8:	e786      	b.n	80056d8 <_dtoa_r+0x7f0>
 80057ca:	2300      	movs	r3, #0
 80057cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80057ce:	e788      	b.n	80056e2 <_dtoa_r+0x7fa>
 80057d0:	d09f      	beq.n	8005712 <_dtoa_r+0x82a>
 80057d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057d4:	331c      	adds	r3, #28
 80057d6:	441a      	add	r2, r3
 80057d8:	4498      	add	r8, r3
 80057da:	441e      	add	r6, r3
 80057dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80057de:	e798      	b.n	8005712 <_dtoa_r+0x82a>
 80057e0:	4603      	mov	r3, r0
 80057e2:	e7f6      	b.n	80057d2 <_dtoa_r+0x8ea>
 80057e4:	9b07      	ldr	r3, [sp, #28]
 80057e6:	9704      	str	r7, [sp, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc20      	bgt.n	800582e <_dtoa_r+0x946>
 80057ec:	9308      	str	r3, [sp, #32]
 80057ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	dd1e      	ble.n	8005832 <_dtoa_r+0x94a>
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f47f aebc 	bne.w	8005574 <_dtoa_r+0x68c>
 80057fc:	4621      	mov	r1, r4
 80057fe:	2205      	movs	r2, #5
 8005800:	4658      	mov	r0, fp
 8005802:	f000 fa99 	bl	8005d38 <__multadd>
 8005806:	4601      	mov	r1, r0
 8005808:	4604      	mov	r4, r0
 800580a:	4648      	mov	r0, r9
 800580c:	f000 fcf4 	bl	80061f8 <__mcmp>
 8005810:	2800      	cmp	r0, #0
 8005812:	f77f aeaf 	ble.w	8005574 <_dtoa_r+0x68c>
 8005816:	2331      	movs	r3, #49	@ 0x31
 8005818:	4656      	mov	r6, sl
 800581a:	f806 3b01 	strb.w	r3, [r6], #1
 800581e:	9b04      	ldr	r3, [sp, #16]
 8005820:	3301      	adds	r3, #1
 8005822:	9304      	str	r3, [sp, #16]
 8005824:	e6aa      	b.n	800557c <_dtoa_r+0x694>
 8005826:	9c07      	ldr	r4, [sp, #28]
 8005828:	9704      	str	r7, [sp, #16]
 800582a:	4625      	mov	r5, r4
 800582c:	e7f3      	b.n	8005816 <_dtoa_r+0x92e>
 800582e:	9b07      	ldr	r3, [sp, #28]
 8005830:	9308      	str	r3, [sp, #32]
 8005832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8104 	beq.w	8005a42 <_dtoa_r+0xb5a>
 800583a:	2e00      	cmp	r6, #0
 800583c:	dd05      	ble.n	800584a <_dtoa_r+0x962>
 800583e:	4629      	mov	r1, r5
 8005840:	4632      	mov	r2, r6
 8005842:	4658      	mov	r0, fp
 8005844:	f000 fc6c 	bl	8006120 <__lshift>
 8005848:	4605      	mov	r5, r0
 800584a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d05a      	beq.n	8005906 <_dtoa_r+0xa1e>
 8005850:	4658      	mov	r0, fp
 8005852:	6869      	ldr	r1, [r5, #4]
 8005854:	f000 fa0e 	bl	8005c74 <_Balloc>
 8005858:	4606      	mov	r6, r0
 800585a:	b928      	cbnz	r0, 8005868 <_dtoa_r+0x980>
 800585c:	4602      	mov	r2, r0
 800585e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005862:	4b83      	ldr	r3, [pc, #524]	@ (8005a70 <_dtoa_r+0xb88>)
 8005864:	f7ff bb54 	b.w	8004f10 <_dtoa_r+0x28>
 8005868:	692a      	ldr	r2, [r5, #16]
 800586a:	f105 010c 	add.w	r1, r5, #12
 800586e:	3202      	adds	r2, #2
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	300c      	adds	r0, #12
 8005874:	f002 fae6 	bl	8007e44 <memcpy>
 8005878:	2201      	movs	r2, #1
 800587a:	4631      	mov	r1, r6
 800587c:	4658      	mov	r0, fp
 800587e:	f000 fc4f 	bl	8006120 <__lshift>
 8005882:	462f      	mov	r7, r5
 8005884:	4605      	mov	r5, r0
 8005886:	f10a 0301 	add.w	r3, sl, #1
 800588a:	9307      	str	r3, [sp, #28]
 800588c:	9b08      	ldr	r3, [sp, #32]
 800588e:	4453      	add	r3, sl
 8005890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005892:	9b02      	ldr	r3, [sp, #8]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	930a      	str	r3, [sp, #40]	@ 0x28
 800589a:	9b07      	ldr	r3, [sp, #28]
 800589c:	4621      	mov	r1, r4
 800589e:	3b01      	subs	r3, #1
 80058a0:	4648      	mov	r0, r9
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	f7ff fa96 	bl	8004dd4 <quorem>
 80058a8:	4639      	mov	r1, r7
 80058aa:	9008      	str	r0, [sp, #32]
 80058ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058b0:	4648      	mov	r0, r9
 80058b2:	f000 fca1 	bl	80061f8 <__mcmp>
 80058b6:	462a      	mov	r2, r5
 80058b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80058ba:	4621      	mov	r1, r4
 80058bc:	4658      	mov	r0, fp
 80058be:	f000 fcb7 	bl	8006230 <__mdiff>
 80058c2:	68c2      	ldr	r2, [r0, #12]
 80058c4:	4606      	mov	r6, r0
 80058c6:	bb02      	cbnz	r2, 800590a <_dtoa_r+0xa22>
 80058c8:	4601      	mov	r1, r0
 80058ca:	4648      	mov	r0, r9
 80058cc:	f000 fc94 	bl	80061f8 <__mcmp>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4631      	mov	r1, r6
 80058d4:	4658      	mov	r0, fp
 80058d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80058d8:	f000 fa0c 	bl	8005cf4 <_Bfree>
 80058dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058e0:	9e07      	ldr	r6, [sp, #28]
 80058e2:	ea43 0102 	orr.w	r1, r3, r2
 80058e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058e8:	4319      	orrs	r1, r3
 80058ea:	d110      	bne.n	800590e <_dtoa_r+0xa26>
 80058ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058f0:	d029      	beq.n	8005946 <_dtoa_r+0xa5e>
 80058f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dd02      	ble.n	80058fe <_dtoa_r+0xa16>
 80058f8:	9b08      	ldr	r3, [sp, #32]
 80058fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80058fe:	9b02      	ldr	r3, [sp, #8]
 8005900:	f883 8000 	strb.w	r8, [r3]
 8005904:	e63b      	b.n	800557e <_dtoa_r+0x696>
 8005906:	4628      	mov	r0, r5
 8005908:	e7bb      	b.n	8005882 <_dtoa_r+0x99a>
 800590a:	2201      	movs	r2, #1
 800590c:	e7e1      	b.n	80058d2 <_dtoa_r+0x9ea>
 800590e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	db04      	blt.n	800591e <_dtoa_r+0xa36>
 8005914:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005916:	430b      	orrs	r3, r1
 8005918:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800591a:	430b      	orrs	r3, r1
 800591c:	d120      	bne.n	8005960 <_dtoa_r+0xa78>
 800591e:	2a00      	cmp	r2, #0
 8005920:	dded      	ble.n	80058fe <_dtoa_r+0xa16>
 8005922:	4649      	mov	r1, r9
 8005924:	2201      	movs	r2, #1
 8005926:	4658      	mov	r0, fp
 8005928:	f000 fbfa 	bl	8006120 <__lshift>
 800592c:	4621      	mov	r1, r4
 800592e:	4681      	mov	r9, r0
 8005930:	f000 fc62 	bl	80061f8 <__mcmp>
 8005934:	2800      	cmp	r0, #0
 8005936:	dc03      	bgt.n	8005940 <_dtoa_r+0xa58>
 8005938:	d1e1      	bne.n	80058fe <_dtoa_r+0xa16>
 800593a:	f018 0f01 	tst.w	r8, #1
 800593e:	d0de      	beq.n	80058fe <_dtoa_r+0xa16>
 8005940:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005944:	d1d8      	bne.n	80058f8 <_dtoa_r+0xa10>
 8005946:	2339      	movs	r3, #57	@ 0x39
 8005948:	9a02      	ldr	r2, [sp, #8]
 800594a:	7013      	strb	r3, [r2, #0]
 800594c:	4633      	mov	r3, r6
 800594e:	461e      	mov	r6, r3
 8005950:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005954:	3b01      	subs	r3, #1
 8005956:	2a39      	cmp	r2, #57	@ 0x39
 8005958:	d052      	beq.n	8005a00 <_dtoa_r+0xb18>
 800595a:	3201      	adds	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e60e      	b.n	800557e <_dtoa_r+0x696>
 8005960:	2a00      	cmp	r2, #0
 8005962:	dd07      	ble.n	8005974 <_dtoa_r+0xa8c>
 8005964:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005968:	d0ed      	beq.n	8005946 <_dtoa_r+0xa5e>
 800596a:	9a02      	ldr	r2, [sp, #8]
 800596c:	f108 0301 	add.w	r3, r8, #1
 8005970:	7013      	strb	r3, [r2, #0]
 8005972:	e604      	b.n	800557e <_dtoa_r+0x696>
 8005974:	9b07      	ldr	r3, [sp, #28]
 8005976:	9a07      	ldr	r2, [sp, #28]
 8005978:	f803 8c01 	strb.w	r8, [r3, #-1]
 800597c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800597e:	4293      	cmp	r3, r2
 8005980:	d028      	beq.n	80059d4 <_dtoa_r+0xaec>
 8005982:	4649      	mov	r1, r9
 8005984:	2300      	movs	r3, #0
 8005986:	220a      	movs	r2, #10
 8005988:	4658      	mov	r0, fp
 800598a:	f000 f9d5 	bl	8005d38 <__multadd>
 800598e:	42af      	cmp	r7, r5
 8005990:	4681      	mov	r9, r0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	f04f 020a 	mov.w	r2, #10
 800599a:	4639      	mov	r1, r7
 800599c:	4658      	mov	r0, fp
 800599e:	d107      	bne.n	80059b0 <_dtoa_r+0xac8>
 80059a0:	f000 f9ca 	bl	8005d38 <__multadd>
 80059a4:	4607      	mov	r7, r0
 80059a6:	4605      	mov	r5, r0
 80059a8:	9b07      	ldr	r3, [sp, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	9307      	str	r3, [sp, #28]
 80059ae:	e774      	b.n	800589a <_dtoa_r+0x9b2>
 80059b0:	f000 f9c2 	bl	8005d38 <__multadd>
 80059b4:	4629      	mov	r1, r5
 80059b6:	4607      	mov	r7, r0
 80059b8:	2300      	movs	r3, #0
 80059ba:	220a      	movs	r2, #10
 80059bc:	4658      	mov	r0, fp
 80059be:	f000 f9bb 	bl	8005d38 <__multadd>
 80059c2:	4605      	mov	r5, r0
 80059c4:	e7f0      	b.n	80059a8 <_dtoa_r+0xac0>
 80059c6:	9b08      	ldr	r3, [sp, #32]
 80059c8:	2700      	movs	r7, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfcc      	ite	gt
 80059ce:	461e      	movgt	r6, r3
 80059d0:	2601      	movle	r6, #1
 80059d2:	4456      	add	r6, sl
 80059d4:	4649      	mov	r1, r9
 80059d6:	2201      	movs	r2, #1
 80059d8:	4658      	mov	r0, fp
 80059da:	f000 fba1 	bl	8006120 <__lshift>
 80059de:	4621      	mov	r1, r4
 80059e0:	4681      	mov	r9, r0
 80059e2:	f000 fc09 	bl	80061f8 <__mcmp>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	dcb0      	bgt.n	800594c <_dtoa_r+0xa64>
 80059ea:	d102      	bne.n	80059f2 <_dtoa_r+0xb0a>
 80059ec:	f018 0f01 	tst.w	r8, #1
 80059f0:	d1ac      	bne.n	800594c <_dtoa_r+0xa64>
 80059f2:	4633      	mov	r3, r6
 80059f4:	461e      	mov	r6, r3
 80059f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059fa:	2a30      	cmp	r2, #48	@ 0x30
 80059fc:	d0fa      	beq.n	80059f4 <_dtoa_r+0xb0c>
 80059fe:	e5be      	b.n	800557e <_dtoa_r+0x696>
 8005a00:	459a      	cmp	sl, r3
 8005a02:	d1a4      	bne.n	800594e <_dtoa_r+0xa66>
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	3301      	adds	r3, #1
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	2331      	movs	r3, #49	@ 0x31
 8005a0c:	f88a 3000 	strb.w	r3, [sl]
 8005a10:	e5b5      	b.n	800557e <_dtoa_r+0x696>
 8005a12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a14:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005a74 <_dtoa_r+0xb8c>
 8005a18:	b11b      	cbz	r3, 8005a22 <_dtoa_r+0xb3a>
 8005a1a:	f10a 0308 	add.w	r3, sl, #8
 8005a1e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4650      	mov	r0, sl
 8005a24:	b017      	add	sp, #92	@ 0x5c
 8005a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f77f ae3d 	ble.w	80056ac <_dtoa_r+0x7c4>
 8005a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a36:	2001      	movs	r0, #1
 8005a38:	e65b      	b.n	80056f2 <_dtoa_r+0x80a>
 8005a3a:	9b08      	ldr	r3, [sp, #32]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f77f aed6 	ble.w	80057ee <_dtoa_r+0x906>
 8005a42:	4656      	mov	r6, sl
 8005a44:	4621      	mov	r1, r4
 8005a46:	4648      	mov	r0, r9
 8005a48:	f7ff f9c4 	bl	8004dd4 <quorem>
 8005a4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	f806 8b01 	strb.w	r8, [r6], #1
 8005a56:	eba6 020a 	sub.w	r2, r6, sl
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	ddb3      	ble.n	80059c6 <_dtoa_r+0xade>
 8005a5e:	4649      	mov	r1, r9
 8005a60:	2300      	movs	r3, #0
 8005a62:	220a      	movs	r2, #10
 8005a64:	4658      	mov	r0, fp
 8005a66:	f000 f967 	bl	8005d38 <__multadd>
 8005a6a:	4681      	mov	r9, r0
 8005a6c:	e7ea      	b.n	8005a44 <_dtoa_r+0xb5c>
 8005a6e:	bf00      	nop
 8005a70:	08008ed5 	.word	0x08008ed5
 8005a74:	08008e59 	.word	0x08008e59

08005a78 <_free_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	d040      	beq.n	8005b02 <_free_r+0x8a>
 8005a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a84:	1f0c      	subs	r4, r1, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfb8      	it	lt
 8005a8a:	18e4      	addlt	r4, r4, r3
 8005a8c:	f000 f8e6 	bl	8005c5c <__malloc_lock>
 8005a90:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <_free_r+0x8c>)
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	b933      	cbnz	r3, 8005aa4 <_free_r+0x2c>
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	6014      	str	r4, [r2, #0]
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aa0:	f000 b8e2 	b.w	8005c68 <__malloc_unlock>
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d908      	bls.n	8005aba <_free_r+0x42>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	1821      	adds	r1, r4, r0
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf01      	itttt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	1809      	addeq	r1, r1, r0
 8005ab6:	6021      	streq	r1, [r4, #0]
 8005ab8:	e7ed      	b.n	8005a96 <_free_r+0x1e>
 8005aba:	461a      	mov	r2, r3
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b10b      	cbz	r3, 8005ac4 <_free_r+0x4c>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d9fa      	bls.n	8005aba <_free_r+0x42>
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	1850      	adds	r0, r2, r1
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	d10b      	bne.n	8005ae4 <_free_r+0x6c>
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	4401      	add	r1, r0
 8005ad0:	1850      	adds	r0, r2, r1
 8005ad2:	4283      	cmp	r3, r0
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	d1e0      	bne.n	8005a9a <_free_r+0x22>
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4408      	add	r0, r1
 8005ade:	6010      	str	r0, [r2, #0]
 8005ae0:	6053      	str	r3, [r2, #4]
 8005ae2:	e7da      	b.n	8005a9a <_free_r+0x22>
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x74>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	e7d6      	b.n	8005a9a <_free_r+0x22>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	1821      	adds	r1, r4, r0
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf01      	itttt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	1809      	addeq	r1, r1, r0
 8005afa:	6021      	streq	r1, [r4, #0]
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	6054      	str	r4, [r2, #4]
 8005b00:	e7cb      	b.n	8005a9a <_free_r+0x22>
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20000514 	.word	0x20000514

08005b08 <malloc>:
 8005b08:	4b02      	ldr	r3, [pc, #8]	@ (8005b14 <malloc+0xc>)
 8005b0a:	4601      	mov	r1, r0
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	f000 b825 	b.w	8005b5c <_malloc_r>
 8005b12:	bf00      	nop
 8005b14:	20000028 	.word	0x20000028

08005b18 <sbrk_aligned>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b58 <sbrk_aligned+0x40>)
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	6831      	ldr	r1, [r6, #0]
 8005b20:	4605      	mov	r5, r0
 8005b22:	b911      	cbnz	r1, 8005b2a <sbrk_aligned+0x12>
 8005b24:	f002 f97e 	bl	8007e24 <_sbrk_r>
 8005b28:	6030      	str	r0, [r6, #0]
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f002 f979 	bl	8007e24 <_sbrk_r>
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	d103      	bne.n	8005b3e <sbrk_aligned+0x26>
 8005b36:	f04f 34ff 	mov.w	r4, #4294967295
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	1cc4      	adds	r4, r0, #3
 8005b40:	f024 0403 	bic.w	r4, r4, #3
 8005b44:	42a0      	cmp	r0, r4
 8005b46:	d0f8      	beq.n	8005b3a <sbrk_aligned+0x22>
 8005b48:	1a21      	subs	r1, r4, r0
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f002 f96a 	bl	8007e24 <_sbrk_r>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d1f2      	bne.n	8005b3a <sbrk_aligned+0x22>
 8005b54:	e7ef      	b.n	8005b36 <sbrk_aligned+0x1e>
 8005b56:	bf00      	nop
 8005b58:	20000510 	.word	0x20000510

08005b5c <_malloc_r>:
 8005b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	1ccd      	adds	r5, r1, #3
 8005b62:	f025 0503 	bic.w	r5, r5, #3
 8005b66:	3508      	adds	r5, #8
 8005b68:	2d0c      	cmp	r5, #12
 8005b6a:	bf38      	it	cc
 8005b6c:	250c      	movcc	r5, #12
 8005b6e:	2d00      	cmp	r5, #0
 8005b70:	4606      	mov	r6, r0
 8005b72:	db01      	blt.n	8005b78 <_malloc_r+0x1c>
 8005b74:	42a9      	cmp	r1, r5
 8005b76:	d904      	bls.n	8005b82 <_malloc_r+0x26>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c58 <_malloc_r+0xfc>
 8005b86:	f000 f869 	bl	8005c5c <__malloc_lock>
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	461c      	mov	r4, r3
 8005b90:	bb44      	cbnz	r4, 8005be4 <_malloc_r+0x88>
 8005b92:	4629      	mov	r1, r5
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff ffbf 	bl	8005b18 <sbrk_aligned>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	d158      	bne.n	8005c52 <_malloc_r+0xf6>
 8005ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ba4:	4627      	mov	r7, r4
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	d143      	bne.n	8005c32 <_malloc_r+0xd6>
 8005baa:	2c00      	cmp	r4, #0
 8005bac:	d04b      	beq.n	8005c46 <_malloc_r+0xea>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	eb04 0903 	add.w	r9, r4, r3
 8005bb8:	f002 f934 	bl	8007e24 <_sbrk_r>
 8005bbc:	4581      	cmp	r9, r0
 8005bbe:	d142      	bne.n	8005c46 <_malloc_r+0xea>
 8005bc0:	6821      	ldr	r1, [r4, #0]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	1a6d      	subs	r5, r5, r1
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f7ff ffa6 	bl	8005b18 <sbrk_aligned>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d03a      	beq.n	8005c46 <_malloc_r+0xea>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	442b      	add	r3, r5
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	bb62      	cbnz	r2, 8005c38 <_malloc_r+0xdc>
 8005bde:	f8c8 7000 	str.w	r7, [r8]
 8005be2:	e00f      	b.n	8005c04 <_malloc_r+0xa8>
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	1b52      	subs	r2, r2, r5
 8005be8:	d420      	bmi.n	8005c2c <_malloc_r+0xd0>
 8005bea:	2a0b      	cmp	r2, #11
 8005bec:	d917      	bls.n	8005c1e <_malloc_r+0xc2>
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	6025      	str	r5, [r4, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	6059      	strne	r1, [r3, #4]
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	bf08      	it	eq
 8005bfc:	f8c8 1000 	streq.w	r1, [r8]
 8005c00:	5162      	str	r2, [r4, r5]
 8005c02:	604b      	str	r3, [r1, #4]
 8005c04:	4630      	mov	r0, r6
 8005c06:	f000 f82f 	bl	8005c68 <__malloc_unlock>
 8005c0a:	f104 000b 	add.w	r0, r4, #11
 8005c0e:	1d23      	adds	r3, r4, #4
 8005c10:	f020 0007 	bic.w	r0, r0, #7
 8005c14:	1ac2      	subs	r2, r0, r3
 8005c16:	bf1c      	itt	ne
 8005c18:	1a1b      	subne	r3, r3, r0
 8005c1a:	50a3      	strne	r3, [r4, r2]
 8005c1c:	e7af      	b.n	8005b7e <_malloc_r+0x22>
 8005c1e:	6862      	ldr	r2, [r4, #4]
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	bf0c      	ite	eq
 8005c24:	f8c8 2000 	streq.w	r2, [r8]
 8005c28:	605a      	strne	r2, [r3, #4]
 8005c2a:	e7eb      	b.n	8005c04 <_malloc_r+0xa8>
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	6864      	ldr	r4, [r4, #4]
 8005c30:	e7ae      	b.n	8005b90 <_malloc_r+0x34>
 8005c32:	463c      	mov	r4, r7
 8005c34:	687f      	ldr	r7, [r7, #4]
 8005c36:	e7b6      	b.n	8005ba6 <_malloc_r+0x4a>
 8005c38:	461a      	mov	r2, r3
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d1fb      	bne.n	8005c38 <_malloc_r+0xdc>
 8005c40:	2300      	movs	r3, #0
 8005c42:	6053      	str	r3, [r2, #4]
 8005c44:	e7de      	b.n	8005c04 <_malloc_r+0xa8>
 8005c46:	230c      	movs	r3, #12
 8005c48:	4630      	mov	r0, r6
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	f000 f80c 	bl	8005c68 <__malloc_unlock>
 8005c50:	e794      	b.n	8005b7c <_malloc_r+0x20>
 8005c52:	6005      	str	r5, [r0, #0]
 8005c54:	e7d6      	b.n	8005c04 <_malloc_r+0xa8>
 8005c56:	bf00      	nop
 8005c58:	20000514 	.word	0x20000514

08005c5c <__malloc_lock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	@ (8005c64 <__malloc_lock+0x8>)
 8005c5e:	f7ff b8a4 	b.w	8004daa <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	2000050c 	.word	0x2000050c

08005c68 <__malloc_unlock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	@ (8005c70 <__malloc_unlock+0x8>)
 8005c6a:	f7ff b89f 	b.w	8004dac <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	2000050c 	.word	0x2000050c

08005c74 <_Balloc>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	69c6      	ldr	r6, [r0, #28]
 8005c78:	4604      	mov	r4, r0
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	b976      	cbnz	r6, 8005c9c <_Balloc+0x28>
 8005c7e:	2010      	movs	r0, #16
 8005c80:	f7ff ff42 	bl	8005b08 <malloc>
 8005c84:	4602      	mov	r2, r0
 8005c86:	61e0      	str	r0, [r4, #28]
 8005c88:	b920      	cbnz	r0, 8005c94 <_Balloc+0x20>
 8005c8a:	216b      	movs	r1, #107	@ 0x6b
 8005c8c:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <_Balloc+0x78>)
 8005c8e:	4818      	ldr	r0, [pc, #96]	@ (8005cf0 <_Balloc+0x7c>)
 8005c90:	f002 f8ec 	bl	8007e6c <__assert_func>
 8005c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c98:	6006      	str	r6, [r0, #0]
 8005c9a:	60c6      	str	r6, [r0, #12]
 8005c9c:	69e6      	ldr	r6, [r4, #28]
 8005c9e:	68f3      	ldr	r3, [r6, #12]
 8005ca0:	b183      	cbz	r3, 8005cc4 <_Balloc+0x50>
 8005ca2:	69e3      	ldr	r3, [r4, #28]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005caa:	b9b8      	cbnz	r0, 8005cdc <_Balloc+0x68>
 8005cac:	2101      	movs	r1, #1
 8005cae:	fa01 f605 	lsl.w	r6, r1, r5
 8005cb2:	1d72      	adds	r2, r6, #5
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	0092      	lsls	r2, r2, #2
 8005cb8:	f002 f8f6 	bl	8007ea8 <_calloc_r>
 8005cbc:	b160      	cbz	r0, 8005cd8 <_Balloc+0x64>
 8005cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cc2:	e00e      	b.n	8005ce2 <_Balloc+0x6e>
 8005cc4:	2221      	movs	r2, #33	@ 0x21
 8005cc6:	2104      	movs	r1, #4
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f002 f8ed 	bl	8007ea8 <_calloc_r>
 8005cce:	69e3      	ldr	r3, [r4, #28]
 8005cd0:	60f0      	str	r0, [r6, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e4      	bne.n	8005ca2 <_Balloc+0x2e>
 8005cd8:	2000      	movs	r0, #0
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	6802      	ldr	r2, [r0, #0]
 8005cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ce8:	e7f7      	b.n	8005cda <_Balloc+0x66>
 8005cea:	bf00      	nop
 8005cec:	08008e66 	.word	0x08008e66
 8005cf0:	08008ee6 	.word	0x08008ee6

08005cf4 <_Bfree>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	69c6      	ldr	r6, [r0, #28]
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	b976      	cbnz	r6, 8005d1c <_Bfree+0x28>
 8005cfe:	2010      	movs	r0, #16
 8005d00:	f7ff ff02 	bl	8005b08 <malloc>
 8005d04:	4602      	mov	r2, r0
 8005d06:	61e8      	str	r0, [r5, #28]
 8005d08:	b920      	cbnz	r0, 8005d14 <_Bfree+0x20>
 8005d0a:	218f      	movs	r1, #143	@ 0x8f
 8005d0c:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <_Bfree+0x3c>)
 8005d0e:	4809      	ldr	r0, [pc, #36]	@ (8005d34 <_Bfree+0x40>)
 8005d10:	f002 f8ac 	bl	8007e6c <__assert_func>
 8005d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d18:	6006      	str	r6, [r0, #0]
 8005d1a:	60c6      	str	r6, [r0, #12]
 8005d1c:	b13c      	cbz	r4, 8005d2e <_Bfree+0x3a>
 8005d1e:	69eb      	ldr	r3, [r5, #28]
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d28:	6021      	str	r1, [r4, #0]
 8005d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	08008e66 	.word	0x08008e66
 8005d34:	08008ee6 	.word	0x08008ee6

08005d38 <__multadd>:
 8005d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	461e      	mov	r6, r3
 8005d42:	2000      	movs	r0, #0
 8005d44:	690d      	ldr	r5, [r1, #16]
 8005d46:	f101 0c14 	add.w	ip, r1, #20
 8005d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8005d4e:	3001      	adds	r0, #1
 8005d50:	b299      	uxth	r1, r3
 8005d52:	fb02 6101 	mla	r1, r2, r1, r6
 8005d56:	0c1e      	lsrs	r6, r3, #16
 8005d58:	0c0b      	lsrs	r3, r1, #16
 8005d5a:	fb02 3306 	mla	r3, r2, r6, r3
 8005d5e:	b289      	uxth	r1, r1
 8005d60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d64:	4285      	cmp	r5, r0
 8005d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d6e:	dcec      	bgt.n	8005d4a <__multadd+0x12>
 8005d70:	b30e      	cbz	r6, 8005db6 <__multadd+0x7e>
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	dc19      	bgt.n	8005dac <__multadd+0x74>
 8005d78:	6861      	ldr	r1, [r4, #4]
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	3101      	adds	r1, #1
 8005d7e:	f7ff ff79 	bl	8005c74 <_Balloc>
 8005d82:	4680      	mov	r8, r0
 8005d84:	b928      	cbnz	r0, 8005d92 <__multadd+0x5a>
 8005d86:	4602      	mov	r2, r0
 8005d88:	21ba      	movs	r1, #186	@ 0xba
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <__multadd+0x84>)
 8005d8c:	480c      	ldr	r0, [pc, #48]	@ (8005dc0 <__multadd+0x88>)
 8005d8e:	f002 f86d 	bl	8007e6c <__assert_func>
 8005d92:	6922      	ldr	r2, [r4, #16]
 8005d94:	f104 010c 	add.w	r1, r4, #12
 8005d98:	3202      	adds	r2, #2
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	300c      	adds	r0, #12
 8005d9e:	f002 f851 	bl	8007e44 <memcpy>
 8005da2:	4621      	mov	r1, r4
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7ff ffa5 	bl	8005cf4 <_Bfree>
 8005daa:	4644      	mov	r4, r8
 8005dac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005db0:	3501      	adds	r5, #1
 8005db2:	615e      	str	r6, [r3, #20]
 8005db4:	6125      	str	r5, [r4, #16]
 8005db6:	4620      	mov	r0, r4
 8005db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dbc:	08008ed5 	.word	0x08008ed5
 8005dc0:	08008ee6 	.word	0x08008ee6

08005dc4 <__s2b>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4615      	mov	r5, r2
 8005dca:	2209      	movs	r2, #9
 8005dcc:	461f      	mov	r7, r3
 8005dce:	3308      	adds	r3, #8
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2100      	movs	r1, #0
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	db09      	blt.n	8005df4 <__s2b+0x30>
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff ff47 	bl	8005c74 <_Balloc>
 8005de6:	b940      	cbnz	r0, 8005dfa <__s2b+0x36>
 8005de8:	4602      	mov	r2, r0
 8005dea:	21d3      	movs	r1, #211	@ 0xd3
 8005dec:	4b18      	ldr	r3, [pc, #96]	@ (8005e50 <__s2b+0x8c>)
 8005dee:	4819      	ldr	r0, [pc, #100]	@ (8005e54 <__s2b+0x90>)
 8005df0:	f002 f83c 	bl	8007e6c <__assert_func>
 8005df4:	0052      	lsls	r2, r2, #1
 8005df6:	3101      	adds	r1, #1
 8005df8:	e7f0      	b.n	8005ddc <__s2b+0x18>
 8005dfa:	9b08      	ldr	r3, [sp, #32]
 8005dfc:	2d09      	cmp	r5, #9
 8005dfe:	6143      	str	r3, [r0, #20]
 8005e00:	f04f 0301 	mov.w	r3, #1
 8005e04:	6103      	str	r3, [r0, #16]
 8005e06:	dd16      	ble.n	8005e36 <__s2b+0x72>
 8005e08:	f104 0909 	add.w	r9, r4, #9
 8005e0c:	46c8      	mov	r8, r9
 8005e0e:	442c      	add	r4, r5
 8005e10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e14:	4601      	mov	r1, r0
 8005e16:	220a      	movs	r2, #10
 8005e18:	4630      	mov	r0, r6
 8005e1a:	3b30      	subs	r3, #48	@ 0x30
 8005e1c:	f7ff ff8c 	bl	8005d38 <__multadd>
 8005e20:	45a0      	cmp	r8, r4
 8005e22:	d1f5      	bne.n	8005e10 <__s2b+0x4c>
 8005e24:	f1a5 0408 	sub.w	r4, r5, #8
 8005e28:	444c      	add	r4, r9
 8005e2a:	1b2d      	subs	r5, r5, r4
 8005e2c:	1963      	adds	r3, r4, r5
 8005e2e:	42bb      	cmp	r3, r7
 8005e30:	db04      	blt.n	8005e3c <__s2b+0x78>
 8005e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e36:	2509      	movs	r5, #9
 8005e38:	340a      	adds	r4, #10
 8005e3a:	e7f6      	b.n	8005e2a <__s2b+0x66>
 8005e3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e40:	4601      	mov	r1, r0
 8005e42:	220a      	movs	r2, #10
 8005e44:	4630      	mov	r0, r6
 8005e46:	3b30      	subs	r3, #48	@ 0x30
 8005e48:	f7ff ff76 	bl	8005d38 <__multadd>
 8005e4c:	e7ee      	b.n	8005e2c <__s2b+0x68>
 8005e4e:	bf00      	nop
 8005e50:	08008ed5 	.word	0x08008ed5
 8005e54:	08008ee6 	.word	0x08008ee6

08005e58 <__hi0bits>:
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e5e:	bf3a      	itte	cc
 8005e60:	0403      	lslcc	r3, r0, #16
 8005e62:	2010      	movcc	r0, #16
 8005e64:	2000      	movcs	r0, #0
 8005e66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e6a:	bf3c      	itt	cc
 8005e6c:	021b      	lslcc	r3, r3, #8
 8005e6e:	3008      	addcc	r0, #8
 8005e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e74:	bf3c      	itt	cc
 8005e76:	011b      	lslcc	r3, r3, #4
 8005e78:	3004      	addcc	r0, #4
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7e:	bf3c      	itt	cc
 8005e80:	009b      	lslcc	r3, r3, #2
 8005e82:	3002      	addcc	r0, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	db05      	blt.n	8005e94 <__hi0bits+0x3c>
 8005e88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e8c:	f100 0001 	add.w	r0, r0, #1
 8005e90:	bf08      	it	eq
 8005e92:	2020      	moveq	r0, #32
 8005e94:	4770      	bx	lr

08005e96 <__lo0bits>:
 8005e96:	6803      	ldr	r3, [r0, #0]
 8005e98:	4602      	mov	r2, r0
 8005e9a:	f013 0007 	ands.w	r0, r3, #7
 8005e9e:	d00b      	beq.n	8005eb8 <__lo0bits+0x22>
 8005ea0:	07d9      	lsls	r1, r3, #31
 8005ea2:	d421      	bmi.n	8005ee8 <__lo0bits+0x52>
 8005ea4:	0798      	lsls	r0, r3, #30
 8005ea6:	bf49      	itett	mi
 8005ea8:	085b      	lsrmi	r3, r3, #1
 8005eaa:	089b      	lsrpl	r3, r3, #2
 8005eac:	2001      	movmi	r0, #1
 8005eae:	6013      	strmi	r3, [r2, #0]
 8005eb0:	bf5c      	itt	pl
 8005eb2:	2002      	movpl	r0, #2
 8005eb4:	6013      	strpl	r3, [r2, #0]
 8005eb6:	4770      	bx	lr
 8005eb8:	b299      	uxth	r1, r3
 8005eba:	b909      	cbnz	r1, 8005ec0 <__lo0bits+0x2a>
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	b2d9      	uxtb	r1, r3
 8005ec2:	b909      	cbnz	r1, 8005ec8 <__lo0bits+0x32>
 8005ec4:	3008      	adds	r0, #8
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	0719      	lsls	r1, r3, #28
 8005eca:	bf04      	itt	eq
 8005ecc:	091b      	lsreq	r3, r3, #4
 8005ece:	3004      	addeq	r0, #4
 8005ed0:	0799      	lsls	r1, r3, #30
 8005ed2:	bf04      	itt	eq
 8005ed4:	089b      	lsreq	r3, r3, #2
 8005ed6:	3002      	addeq	r0, #2
 8005ed8:	07d9      	lsls	r1, r3, #31
 8005eda:	d403      	bmi.n	8005ee4 <__lo0bits+0x4e>
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	f100 0001 	add.w	r0, r0, #1
 8005ee2:	d003      	beq.n	8005eec <__lo0bits+0x56>
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4770      	bx	lr
 8005ee8:	2000      	movs	r0, #0
 8005eea:	4770      	bx	lr
 8005eec:	2020      	movs	r0, #32
 8005eee:	4770      	bx	lr

08005ef0 <__i2b>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	f7ff febd 	bl	8005c74 <_Balloc>
 8005efa:	4602      	mov	r2, r0
 8005efc:	b928      	cbnz	r0, 8005f0a <__i2b+0x1a>
 8005efe:	f240 1145 	movw	r1, #325	@ 0x145
 8005f02:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <__i2b+0x24>)
 8005f04:	4804      	ldr	r0, [pc, #16]	@ (8005f18 <__i2b+0x28>)
 8005f06:	f001 ffb1 	bl	8007e6c <__assert_func>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	6144      	str	r4, [r0, #20]
 8005f0e:	6103      	str	r3, [r0, #16]
 8005f10:	bd10      	pop	{r4, pc}
 8005f12:	bf00      	nop
 8005f14:	08008ed5 	.word	0x08008ed5
 8005f18:	08008ee6 	.word	0x08008ee6

08005f1c <__multiply>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	4614      	mov	r4, r2
 8005f22:	690a      	ldr	r2, [r1, #16]
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	460f      	mov	r7, r1
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	bfa2      	ittt	ge
 8005f2c:	4623      	movge	r3, r4
 8005f2e:	460c      	movge	r4, r1
 8005f30:	461f      	movge	r7, r3
 8005f32:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f36:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f3a:	68a3      	ldr	r3, [r4, #8]
 8005f3c:	6861      	ldr	r1, [r4, #4]
 8005f3e:	eb0a 0609 	add.w	r6, sl, r9
 8005f42:	42b3      	cmp	r3, r6
 8005f44:	b085      	sub	sp, #20
 8005f46:	bfb8      	it	lt
 8005f48:	3101      	addlt	r1, #1
 8005f4a:	f7ff fe93 	bl	8005c74 <_Balloc>
 8005f4e:	b930      	cbnz	r0, 8005f5e <__multiply+0x42>
 8005f50:	4602      	mov	r2, r0
 8005f52:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f56:	4b43      	ldr	r3, [pc, #268]	@ (8006064 <__multiply+0x148>)
 8005f58:	4843      	ldr	r0, [pc, #268]	@ (8006068 <__multiply+0x14c>)
 8005f5a:	f001 ff87 	bl	8007e6c <__assert_func>
 8005f5e:	f100 0514 	add.w	r5, r0, #20
 8005f62:	462b      	mov	r3, r5
 8005f64:	2200      	movs	r2, #0
 8005f66:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f6a:	4543      	cmp	r3, r8
 8005f6c:	d321      	bcc.n	8005fb2 <__multiply+0x96>
 8005f6e:	f107 0114 	add.w	r1, r7, #20
 8005f72:	f104 0214 	add.w	r2, r4, #20
 8005f76:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005f7a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005f7e:	9302      	str	r3, [sp, #8]
 8005f80:	1b13      	subs	r3, r2, r4
 8005f82:	3b15      	subs	r3, #21
 8005f84:	f023 0303 	bic.w	r3, r3, #3
 8005f88:	3304      	adds	r3, #4
 8005f8a:	f104 0715 	add.w	r7, r4, #21
 8005f8e:	42ba      	cmp	r2, r7
 8005f90:	bf38      	it	cc
 8005f92:	2304      	movcc	r3, #4
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	9b02      	ldr	r3, [sp, #8]
 8005f98:	9103      	str	r1, [sp, #12]
 8005f9a:	428b      	cmp	r3, r1
 8005f9c:	d80c      	bhi.n	8005fb8 <__multiply+0x9c>
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	dd03      	ble.n	8005faa <__multiply+0x8e>
 8005fa2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d05a      	beq.n	8006060 <__multiply+0x144>
 8005faa:	6106      	str	r6, [r0, #16]
 8005fac:	b005      	add	sp, #20
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb2:	f843 2b04 	str.w	r2, [r3], #4
 8005fb6:	e7d8      	b.n	8005f6a <__multiply+0x4e>
 8005fb8:	f8b1 a000 	ldrh.w	sl, [r1]
 8005fbc:	f1ba 0f00 	cmp.w	sl, #0
 8005fc0:	d023      	beq.n	800600a <__multiply+0xee>
 8005fc2:	46a9      	mov	r9, r5
 8005fc4:	f04f 0c00 	mov.w	ip, #0
 8005fc8:	f104 0e14 	add.w	lr, r4, #20
 8005fcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005fd0:	f8d9 3000 	ldr.w	r3, [r9]
 8005fd4:	fa1f fb87 	uxth.w	fp, r7
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	fb0a 330b 	mla	r3, sl, fp, r3
 8005fde:	4463      	add	r3, ip
 8005fe0:	f8d9 c000 	ldr.w	ip, [r9]
 8005fe4:	0c3f      	lsrs	r7, r7, #16
 8005fe6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fea:	fb0a c707 	mla	r7, sl, r7, ip
 8005fee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ff8:	4572      	cmp	r2, lr
 8005ffa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ffe:	f849 3b04 	str.w	r3, [r9], #4
 8006002:	d8e3      	bhi.n	8005fcc <__multiply+0xb0>
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	f845 c003 	str.w	ip, [r5, r3]
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	3104      	adds	r1, #4
 800600e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006012:	f1b9 0f00 	cmp.w	r9, #0
 8006016:	d021      	beq.n	800605c <__multiply+0x140>
 8006018:	46ae      	mov	lr, r5
 800601a:	f04f 0a00 	mov.w	sl, #0
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	f104 0c14 	add.w	ip, r4, #20
 8006024:	f8bc b000 	ldrh.w	fp, [ip]
 8006028:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800602c:	b29b      	uxth	r3, r3
 800602e:	fb09 770b 	mla	r7, r9, fp, r7
 8006032:	4457      	add	r7, sl
 8006034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006038:	f84e 3b04 	str.w	r3, [lr], #4
 800603c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006044:	f8be 3000 	ldrh.w	r3, [lr]
 8006048:	4562      	cmp	r2, ip
 800604a:	fb09 330a 	mla	r3, r9, sl, r3
 800604e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006052:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006056:	d8e5      	bhi.n	8006024 <__multiply+0x108>
 8006058:	9f01      	ldr	r7, [sp, #4]
 800605a:	51eb      	str	r3, [r5, r7]
 800605c:	3504      	adds	r5, #4
 800605e:	e79a      	b.n	8005f96 <__multiply+0x7a>
 8006060:	3e01      	subs	r6, #1
 8006062:	e79c      	b.n	8005f9e <__multiply+0x82>
 8006064:	08008ed5 	.word	0x08008ed5
 8006068:	08008ee6 	.word	0x08008ee6

0800606c <__pow5mult>:
 800606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006070:	4615      	mov	r5, r2
 8006072:	f012 0203 	ands.w	r2, r2, #3
 8006076:	4607      	mov	r7, r0
 8006078:	460e      	mov	r6, r1
 800607a:	d007      	beq.n	800608c <__pow5mult+0x20>
 800607c:	4c25      	ldr	r4, [pc, #148]	@ (8006114 <__pow5mult+0xa8>)
 800607e:	3a01      	subs	r2, #1
 8006080:	2300      	movs	r3, #0
 8006082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006086:	f7ff fe57 	bl	8005d38 <__multadd>
 800608a:	4606      	mov	r6, r0
 800608c:	10ad      	asrs	r5, r5, #2
 800608e:	d03d      	beq.n	800610c <__pow5mult+0xa0>
 8006090:	69fc      	ldr	r4, [r7, #28]
 8006092:	b97c      	cbnz	r4, 80060b4 <__pow5mult+0x48>
 8006094:	2010      	movs	r0, #16
 8006096:	f7ff fd37 	bl	8005b08 <malloc>
 800609a:	4602      	mov	r2, r0
 800609c:	61f8      	str	r0, [r7, #28]
 800609e:	b928      	cbnz	r0, 80060ac <__pow5mult+0x40>
 80060a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006118 <__pow5mult+0xac>)
 80060a6:	481d      	ldr	r0, [pc, #116]	@ (800611c <__pow5mult+0xb0>)
 80060a8:	f001 fee0 	bl	8007e6c <__assert_func>
 80060ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060b0:	6004      	str	r4, [r0, #0]
 80060b2:	60c4      	str	r4, [r0, #12]
 80060b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80060b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060bc:	b94c      	cbnz	r4, 80060d2 <__pow5mult+0x66>
 80060be:	f240 2171 	movw	r1, #625	@ 0x271
 80060c2:	4638      	mov	r0, r7
 80060c4:	f7ff ff14 	bl	8005ef0 <__i2b>
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80060d0:	6003      	str	r3, [r0, #0]
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	07eb      	lsls	r3, r5, #31
 80060d8:	d50a      	bpl.n	80060f0 <__pow5mult+0x84>
 80060da:	4631      	mov	r1, r6
 80060dc:	4622      	mov	r2, r4
 80060de:	4638      	mov	r0, r7
 80060e0:	f7ff ff1c 	bl	8005f1c <__multiply>
 80060e4:	4680      	mov	r8, r0
 80060e6:	4631      	mov	r1, r6
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff fe03 	bl	8005cf4 <_Bfree>
 80060ee:	4646      	mov	r6, r8
 80060f0:	106d      	asrs	r5, r5, #1
 80060f2:	d00b      	beq.n	800610c <__pow5mult+0xa0>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	b938      	cbnz	r0, 8006108 <__pow5mult+0x9c>
 80060f8:	4622      	mov	r2, r4
 80060fa:	4621      	mov	r1, r4
 80060fc:	4638      	mov	r0, r7
 80060fe:	f7ff ff0d 	bl	8005f1c <__multiply>
 8006102:	6020      	str	r0, [r4, #0]
 8006104:	f8c0 9000 	str.w	r9, [r0]
 8006108:	4604      	mov	r4, r0
 800610a:	e7e4      	b.n	80060d6 <__pow5mult+0x6a>
 800610c:	4630      	mov	r0, r6
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006112:	bf00      	nop
 8006114:	08008f40 	.word	0x08008f40
 8006118:	08008e66 	.word	0x08008e66
 800611c:	08008ee6 	.word	0x08008ee6

08006120 <__lshift>:
 8006120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	460c      	mov	r4, r1
 8006126:	4607      	mov	r7, r0
 8006128:	4691      	mov	r9, r2
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	6849      	ldr	r1, [r1, #4]
 800612e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006132:	68a3      	ldr	r3, [r4, #8]
 8006134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006138:	f108 0601 	add.w	r6, r8, #1
 800613c:	42b3      	cmp	r3, r6
 800613e:	db0b      	blt.n	8006158 <__lshift+0x38>
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff fd97 	bl	8005c74 <_Balloc>
 8006146:	4605      	mov	r5, r0
 8006148:	b948      	cbnz	r0, 800615e <__lshift+0x3e>
 800614a:	4602      	mov	r2, r0
 800614c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006150:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <__lshift+0xd0>)
 8006152:	4828      	ldr	r0, [pc, #160]	@ (80061f4 <__lshift+0xd4>)
 8006154:	f001 fe8a 	bl	8007e6c <__assert_func>
 8006158:	3101      	adds	r1, #1
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	e7ee      	b.n	800613c <__lshift+0x1c>
 800615e:	2300      	movs	r3, #0
 8006160:	f100 0114 	add.w	r1, r0, #20
 8006164:	f100 0210 	add.w	r2, r0, #16
 8006168:	4618      	mov	r0, r3
 800616a:	4553      	cmp	r3, sl
 800616c:	db33      	blt.n	80061d6 <__lshift+0xb6>
 800616e:	6920      	ldr	r0, [r4, #16]
 8006170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006174:	f104 0314 	add.w	r3, r4, #20
 8006178:	f019 091f 	ands.w	r9, r9, #31
 800617c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006184:	d02b      	beq.n	80061de <__lshift+0xbe>
 8006186:	468a      	mov	sl, r1
 8006188:	2200      	movs	r2, #0
 800618a:	f1c9 0e20 	rsb	lr, r9, #32
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	fa00 f009 	lsl.w	r0, r0, r9
 8006194:	4310      	orrs	r0, r2
 8006196:	f84a 0b04 	str.w	r0, [sl], #4
 800619a:	f853 2b04 	ldr.w	r2, [r3], #4
 800619e:	459c      	cmp	ip, r3
 80061a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80061a4:	d8f3      	bhi.n	800618e <__lshift+0x6e>
 80061a6:	ebac 0304 	sub.w	r3, ip, r4
 80061aa:	3b15      	subs	r3, #21
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	3304      	adds	r3, #4
 80061b2:	f104 0015 	add.w	r0, r4, #21
 80061b6:	4584      	cmp	ip, r0
 80061b8:	bf38      	it	cc
 80061ba:	2304      	movcc	r3, #4
 80061bc:	50ca      	str	r2, [r1, r3]
 80061be:	b10a      	cbz	r2, 80061c4 <__lshift+0xa4>
 80061c0:	f108 0602 	add.w	r6, r8, #2
 80061c4:	3e01      	subs	r6, #1
 80061c6:	4638      	mov	r0, r7
 80061c8:	4621      	mov	r1, r4
 80061ca:	612e      	str	r6, [r5, #16]
 80061cc:	f7ff fd92 	bl	8005cf4 <_Bfree>
 80061d0:	4628      	mov	r0, r5
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80061da:	3301      	adds	r3, #1
 80061dc:	e7c5      	b.n	800616a <__lshift+0x4a>
 80061de:	3904      	subs	r1, #4
 80061e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e4:	459c      	cmp	ip, r3
 80061e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061ea:	d8f9      	bhi.n	80061e0 <__lshift+0xc0>
 80061ec:	e7ea      	b.n	80061c4 <__lshift+0xa4>
 80061ee:	bf00      	nop
 80061f0:	08008ed5 	.word	0x08008ed5
 80061f4:	08008ee6 	.word	0x08008ee6

080061f8 <__mcmp>:
 80061f8:	4603      	mov	r3, r0
 80061fa:	690a      	ldr	r2, [r1, #16]
 80061fc:	6900      	ldr	r0, [r0, #16]
 80061fe:	b530      	push	{r4, r5, lr}
 8006200:	1a80      	subs	r0, r0, r2
 8006202:	d10e      	bne.n	8006222 <__mcmp+0x2a>
 8006204:	3314      	adds	r3, #20
 8006206:	3114      	adds	r1, #20
 8006208:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800620c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006218:	4295      	cmp	r5, r2
 800621a:	d003      	beq.n	8006224 <__mcmp+0x2c>
 800621c:	d205      	bcs.n	800622a <__mcmp+0x32>
 800621e:	f04f 30ff 	mov.w	r0, #4294967295
 8006222:	bd30      	pop	{r4, r5, pc}
 8006224:	42a3      	cmp	r3, r4
 8006226:	d3f3      	bcc.n	8006210 <__mcmp+0x18>
 8006228:	e7fb      	b.n	8006222 <__mcmp+0x2a>
 800622a:	2001      	movs	r0, #1
 800622c:	e7f9      	b.n	8006222 <__mcmp+0x2a>
	...

08006230 <__mdiff>:
 8006230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	4689      	mov	r9, r1
 8006236:	4606      	mov	r6, r0
 8006238:	4611      	mov	r1, r2
 800623a:	4648      	mov	r0, r9
 800623c:	4614      	mov	r4, r2
 800623e:	f7ff ffdb 	bl	80061f8 <__mcmp>
 8006242:	1e05      	subs	r5, r0, #0
 8006244:	d112      	bne.n	800626c <__mdiff+0x3c>
 8006246:	4629      	mov	r1, r5
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff fd13 	bl	8005c74 <_Balloc>
 800624e:	4602      	mov	r2, r0
 8006250:	b928      	cbnz	r0, 800625e <__mdiff+0x2e>
 8006252:	f240 2137 	movw	r1, #567	@ 0x237
 8006256:	4b3e      	ldr	r3, [pc, #248]	@ (8006350 <__mdiff+0x120>)
 8006258:	483e      	ldr	r0, [pc, #248]	@ (8006354 <__mdiff+0x124>)
 800625a:	f001 fe07 	bl	8007e6c <__assert_func>
 800625e:	2301      	movs	r3, #1
 8006260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006264:	4610      	mov	r0, r2
 8006266:	b003      	add	sp, #12
 8006268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626c:	bfbc      	itt	lt
 800626e:	464b      	movlt	r3, r9
 8006270:	46a1      	movlt	r9, r4
 8006272:	4630      	mov	r0, r6
 8006274:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006278:	bfba      	itte	lt
 800627a:	461c      	movlt	r4, r3
 800627c:	2501      	movlt	r5, #1
 800627e:	2500      	movge	r5, #0
 8006280:	f7ff fcf8 	bl	8005c74 <_Balloc>
 8006284:	4602      	mov	r2, r0
 8006286:	b918      	cbnz	r0, 8006290 <__mdiff+0x60>
 8006288:	f240 2145 	movw	r1, #581	@ 0x245
 800628c:	4b30      	ldr	r3, [pc, #192]	@ (8006350 <__mdiff+0x120>)
 800628e:	e7e3      	b.n	8006258 <__mdiff+0x28>
 8006290:	f100 0b14 	add.w	fp, r0, #20
 8006294:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006298:	f109 0310 	add.w	r3, r9, #16
 800629c:	60c5      	str	r5, [r0, #12]
 800629e:	f04f 0c00 	mov.w	ip, #0
 80062a2:	f109 0514 	add.w	r5, r9, #20
 80062a6:	46d9      	mov	r9, fp
 80062a8:	6926      	ldr	r6, [r4, #16]
 80062aa:	f104 0e14 	add.w	lr, r4, #20
 80062ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80062b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80062be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80062c2:	b281      	uxth	r1, r0
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	fa1f f38a 	uxth.w	r3, sl
 80062ca:	1a5b      	subs	r3, r3, r1
 80062cc:	0c00      	lsrs	r0, r0, #16
 80062ce:	4463      	add	r3, ip
 80062d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80062d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80062de:	4576      	cmp	r6, lr
 80062e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062e4:	f849 3b04 	str.w	r3, [r9], #4
 80062e8:	d8e6      	bhi.n	80062b8 <__mdiff+0x88>
 80062ea:	1b33      	subs	r3, r6, r4
 80062ec:	3b15      	subs	r3, #21
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	3415      	adds	r4, #21
 80062f4:	3304      	adds	r3, #4
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	bf38      	it	cc
 80062fa:	2304      	movcc	r3, #4
 80062fc:	441d      	add	r5, r3
 80062fe:	445b      	add	r3, fp
 8006300:	461e      	mov	r6, r3
 8006302:	462c      	mov	r4, r5
 8006304:	4544      	cmp	r4, r8
 8006306:	d30e      	bcc.n	8006326 <__mdiff+0xf6>
 8006308:	f108 0103 	add.w	r1, r8, #3
 800630c:	1b49      	subs	r1, r1, r5
 800630e:	f021 0103 	bic.w	r1, r1, #3
 8006312:	3d03      	subs	r5, #3
 8006314:	45a8      	cmp	r8, r5
 8006316:	bf38      	it	cc
 8006318:	2100      	movcc	r1, #0
 800631a:	440b      	add	r3, r1
 800631c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006320:	b199      	cbz	r1, 800634a <__mdiff+0x11a>
 8006322:	6117      	str	r7, [r2, #16]
 8006324:	e79e      	b.n	8006264 <__mdiff+0x34>
 8006326:	46e6      	mov	lr, ip
 8006328:	f854 1b04 	ldr.w	r1, [r4], #4
 800632c:	fa1f fc81 	uxth.w	ip, r1
 8006330:	44f4      	add	ip, lr
 8006332:	0c08      	lsrs	r0, r1, #16
 8006334:	4471      	add	r1, lr
 8006336:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800633a:	b289      	uxth	r1, r1
 800633c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006340:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006344:	f846 1b04 	str.w	r1, [r6], #4
 8006348:	e7dc      	b.n	8006304 <__mdiff+0xd4>
 800634a:	3f01      	subs	r7, #1
 800634c:	e7e6      	b.n	800631c <__mdiff+0xec>
 800634e:	bf00      	nop
 8006350:	08008ed5 	.word	0x08008ed5
 8006354:	08008ee6 	.word	0x08008ee6

08006358 <__ulp>:
 8006358:	4b0e      	ldr	r3, [pc, #56]	@ (8006394 <__ulp+0x3c>)
 800635a:	400b      	ands	r3, r1
 800635c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006360:	2b00      	cmp	r3, #0
 8006362:	dc08      	bgt.n	8006376 <__ulp+0x1e>
 8006364:	425b      	negs	r3, r3
 8006366:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800636a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800636e:	da04      	bge.n	800637a <__ulp+0x22>
 8006370:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006374:	4113      	asrs	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	e008      	b.n	800638c <__ulp+0x34>
 800637a:	f1a2 0314 	sub.w	r3, r2, #20
 800637e:	2b1e      	cmp	r3, #30
 8006380:	bfd6      	itet	le
 8006382:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006386:	2201      	movgt	r2, #1
 8006388:	40da      	lsrle	r2, r3
 800638a:	2300      	movs	r3, #0
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	7ff00000 	.word	0x7ff00000

08006398 <__b2d>:
 8006398:	6902      	ldr	r2, [r0, #16]
 800639a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639c:	f100 0614 	add.w	r6, r0, #20
 80063a0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80063a4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80063a8:	4f1e      	ldr	r7, [pc, #120]	@ (8006424 <__b2d+0x8c>)
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff fd54 	bl	8005e58 <__hi0bits>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f1c0 0020 	rsb	r0, r0, #32
 80063b6:	2b0a      	cmp	r3, #10
 80063b8:	f1a2 0504 	sub.w	r5, r2, #4
 80063bc:	6008      	str	r0, [r1, #0]
 80063be:	dc12      	bgt.n	80063e6 <__b2d+0x4e>
 80063c0:	42ae      	cmp	r6, r5
 80063c2:	bf2c      	ite	cs
 80063c4:	2200      	movcs	r2, #0
 80063c6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80063ca:	f1c3 0c0b 	rsb	ip, r3, #11
 80063ce:	3315      	adds	r3, #21
 80063d0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80063d4:	fa04 f303 	lsl.w	r3, r4, r3
 80063d8:	fa22 f20c 	lsr.w	r2, r2, ip
 80063dc:	ea4e 0107 	orr.w	r1, lr, r7
 80063e0:	431a      	orrs	r2, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e6:	42ae      	cmp	r6, r5
 80063e8:	bf36      	itet	cc
 80063ea:	f1a2 0508 	subcc.w	r5, r2, #8
 80063ee:	2200      	movcs	r2, #0
 80063f0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80063f4:	3b0b      	subs	r3, #11
 80063f6:	d012      	beq.n	800641e <__b2d+0x86>
 80063f8:	f1c3 0720 	rsb	r7, r3, #32
 80063fc:	fa22 f107 	lsr.w	r1, r2, r7
 8006400:	409c      	lsls	r4, r3
 8006402:	430c      	orrs	r4, r1
 8006404:	42b5      	cmp	r5, r6
 8006406:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800640a:	bf94      	ite	ls
 800640c:	2400      	movls	r4, #0
 800640e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006412:	409a      	lsls	r2, r3
 8006414:	40fc      	lsrs	r4, r7
 8006416:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800641a:	4322      	orrs	r2, r4
 800641c:	e7e1      	b.n	80063e2 <__b2d+0x4a>
 800641e:	ea44 0107 	orr.w	r1, r4, r7
 8006422:	e7de      	b.n	80063e2 <__b2d+0x4a>
 8006424:	3ff00000 	.word	0x3ff00000

08006428 <__d2b>:
 8006428:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800642c:	2101      	movs	r1, #1
 800642e:	4690      	mov	r8, r2
 8006430:	4699      	mov	r9, r3
 8006432:	9e08      	ldr	r6, [sp, #32]
 8006434:	f7ff fc1e 	bl	8005c74 <_Balloc>
 8006438:	4604      	mov	r4, r0
 800643a:	b930      	cbnz	r0, 800644a <__d2b+0x22>
 800643c:	4602      	mov	r2, r0
 800643e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006442:	4b23      	ldr	r3, [pc, #140]	@ (80064d0 <__d2b+0xa8>)
 8006444:	4823      	ldr	r0, [pc, #140]	@ (80064d4 <__d2b+0xac>)
 8006446:	f001 fd11 	bl	8007e6c <__assert_func>
 800644a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800644e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006452:	b10d      	cbz	r5, 8006458 <__d2b+0x30>
 8006454:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	f1b8 0300 	subs.w	r3, r8, #0
 800645e:	d024      	beq.n	80064aa <__d2b+0x82>
 8006460:	4668      	mov	r0, sp
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	f7ff fd17 	bl	8005e96 <__lo0bits>
 8006468:	e9dd 1200 	ldrd	r1, r2, [sp]
 800646c:	b1d8      	cbz	r0, 80064a6 <__d2b+0x7e>
 800646e:	f1c0 0320 	rsb	r3, r0, #32
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	430b      	orrs	r3, r1
 8006478:	40c2      	lsrs	r2, r0
 800647a:	6163      	str	r3, [r4, #20]
 800647c:	9201      	str	r2, [sp, #4]
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf0c      	ite	eq
 8006484:	2201      	moveq	r2, #1
 8006486:	2202      	movne	r2, #2
 8006488:	61a3      	str	r3, [r4, #24]
 800648a:	6122      	str	r2, [r4, #16]
 800648c:	b1ad      	cbz	r5, 80064ba <__d2b+0x92>
 800648e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006492:	4405      	add	r5, r0
 8006494:	6035      	str	r5, [r6, #0]
 8006496:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800649a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800649c:	6018      	str	r0, [r3, #0]
 800649e:	4620      	mov	r0, r4
 80064a0:	b002      	add	sp, #8
 80064a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80064a6:	6161      	str	r1, [r4, #20]
 80064a8:	e7e9      	b.n	800647e <__d2b+0x56>
 80064aa:	a801      	add	r0, sp, #4
 80064ac:	f7ff fcf3 	bl	8005e96 <__lo0bits>
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	6163      	str	r3, [r4, #20]
 80064b6:	3020      	adds	r0, #32
 80064b8:	e7e7      	b.n	800648a <__d2b+0x62>
 80064ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80064be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064c2:	6030      	str	r0, [r6, #0]
 80064c4:	6918      	ldr	r0, [r3, #16]
 80064c6:	f7ff fcc7 	bl	8005e58 <__hi0bits>
 80064ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064ce:	e7e4      	b.n	800649a <__d2b+0x72>
 80064d0:	08008ed5 	.word	0x08008ed5
 80064d4:	08008ee6 	.word	0x08008ee6

080064d8 <__ratio>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	b085      	sub	sp, #20
 80064de:	e9cd 1000 	strd	r1, r0, [sp]
 80064e2:	a902      	add	r1, sp, #8
 80064e4:	f7ff ff58 	bl	8006398 <__b2d>
 80064e8:	468b      	mov	fp, r1
 80064ea:	4606      	mov	r6, r0
 80064ec:	460f      	mov	r7, r1
 80064ee:	9800      	ldr	r0, [sp, #0]
 80064f0:	a903      	add	r1, sp, #12
 80064f2:	f7ff ff51 	bl	8006398 <__b2d>
 80064f6:	460d      	mov	r5, r1
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	4689      	mov	r9, r1
 80064fc:	6919      	ldr	r1, [r3, #16]
 80064fe:	9b00      	ldr	r3, [sp, #0]
 8006500:	4604      	mov	r4, r0
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4630      	mov	r0, r6
 8006506:	1ac9      	subs	r1, r1, r3
 8006508:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006512:	2b00      	cmp	r3, #0
 8006514:	bfcd      	iteet	gt
 8006516:	463a      	movgt	r2, r7
 8006518:	462a      	movle	r2, r5
 800651a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800651e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006522:	bfd8      	it	le
 8006524:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006528:	464b      	mov	r3, r9
 800652a:	4622      	mov	r2, r4
 800652c:	4659      	mov	r1, fp
 800652e:	f7fa f8fd 	bl	800072c <__aeabi_ddiv>
 8006532:	b005      	add	sp, #20
 8006534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006538 <__copybits>:
 8006538:	3901      	subs	r1, #1
 800653a:	b570      	push	{r4, r5, r6, lr}
 800653c:	1149      	asrs	r1, r1, #5
 800653e:	6914      	ldr	r4, [r2, #16]
 8006540:	3101      	adds	r1, #1
 8006542:	f102 0314 	add.w	r3, r2, #20
 8006546:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800654a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800654e:	1f05      	subs	r5, r0, #4
 8006550:	42a3      	cmp	r3, r4
 8006552:	d30c      	bcc.n	800656e <__copybits+0x36>
 8006554:	1aa3      	subs	r3, r4, r2
 8006556:	3b11      	subs	r3, #17
 8006558:	f023 0303 	bic.w	r3, r3, #3
 800655c:	3211      	adds	r2, #17
 800655e:	42a2      	cmp	r2, r4
 8006560:	bf88      	it	hi
 8006562:	2300      	movhi	r3, #0
 8006564:	4418      	add	r0, r3
 8006566:	2300      	movs	r3, #0
 8006568:	4288      	cmp	r0, r1
 800656a:	d305      	bcc.n	8006578 <__copybits+0x40>
 800656c:	bd70      	pop	{r4, r5, r6, pc}
 800656e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006572:	f845 6f04 	str.w	r6, [r5, #4]!
 8006576:	e7eb      	b.n	8006550 <__copybits+0x18>
 8006578:	f840 3b04 	str.w	r3, [r0], #4
 800657c:	e7f4      	b.n	8006568 <__copybits+0x30>

0800657e <__any_on>:
 800657e:	f100 0214 	add.w	r2, r0, #20
 8006582:	6900      	ldr	r0, [r0, #16]
 8006584:	114b      	asrs	r3, r1, #5
 8006586:	4298      	cmp	r0, r3
 8006588:	b510      	push	{r4, lr}
 800658a:	db11      	blt.n	80065b0 <__any_on+0x32>
 800658c:	dd0a      	ble.n	80065a4 <__any_on+0x26>
 800658e:	f011 011f 	ands.w	r1, r1, #31
 8006592:	d007      	beq.n	80065a4 <__any_on+0x26>
 8006594:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006598:	fa24 f001 	lsr.w	r0, r4, r1
 800659c:	fa00 f101 	lsl.w	r1, r0, r1
 80065a0:	428c      	cmp	r4, r1
 80065a2:	d10b      	bne.n	80065bc <__any_on+0x3e>
 80065a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d803      	bhi.n	80065b4 <__any_on+0x36>
 80065ac:	2000      	movs	r0, #0
 80065ae:	bd10      	pop	{r4, pc}
 80065b0:	4603      	mov	r3, r0
 80065b2:	e7f7      	b.n	80065a4 <__any_on+0x26>
 80065b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065b8:	2900      	cmp	r1, #0
 80065ba:	d0f5      	beq.n	80065a8 <__any_on+0x2a>
 80065bc:	2001      	movs	r0, #1
 80065be:	e7f6      	b.n	80065ae <__any_on+0x30>

080065c0 <sulp>:
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	460f      	mov	r7, r1
 80065c6:	4690      	mov	r8, r2
 80065c8:	f7ff fec6 	bl	8006358 <__ulp>
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	f1b8 0f00 	cmp.w	r8, #0
 80065d4:	d011      	beq.n	80065fa <sulp+0x3a>
 80065d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80065da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dd0b      	ble.n	80065fa <sulp+0x3a>
 80065e2:	2400      	movs	r4, #0
 80065e4:	051b      	lsls	r3, r3, #20
 80065e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80065ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	4604      	mov	r4, r0
 80065f8:	460d      	mov	r5, r1
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006602:	0000      	movs	r0, r0
 8006604:	0000      	movs	r0, r0
	...

08006608 <_strtod_l>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	b09f      	sub	sp, #124	@ 0x7c
 800660e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006610:	2200      	movs	r2, #0
 8006612:	460c      	mov	r4, r1
 8006614:	921a      	str	r2, [sp, #104]	@ 0x68
 8006616:	f04f 0a00 	mov.w	sl, #0
 800661a:	f04f 0b00 	mov.w	fp, #0
 800661e:	460a      	mov	r2, r1
 8006620:	9005      	str	r0, [sp, #20]
 8006622:	9219      	str	r2, [sp, #100]	@ 0x64
 8006624:	7811      	ldrb	r1, [r2, #0]
 8006626:	292b      	cmp	r1, #43	@ 0x2b
 8006628:	d048      	beq.n	80066bc <_strtod_l+0xb4>
 800662a:	d836      	bhi.n	800669a <_strtod_l+0x92>
 800662c:	290d      	cmp	r1, #13
 800662e:	d830      	bhi.n	8006692 <_strtod_l+0x8a>
 8006630:	2908      	cmp	r1, #8
 8006632:	d830      	bhi.n	8006696 <_strtod_l+0x8e>
 8006634:	2900      	cmp	r1, #0
 8006636:	d039      	beq.n	80066ac <_strtod_l+0xa4>
 8006638:	2200      	movs	r2, #0
 800663a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800663c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800663e:	782a      	ldrb	r2, [r5, #0]
 8006640:	2a30      	cmp	r2, #48	@ 0x30
 8006642:	f040 80b1 	bne.w	80067a8 <_strtod_l+0x1a0>
 8006646:	786a      	ldrb	r2, [r5, #1]
 8006648:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800664c:	2a58      	cmp	r2, #88	@ 0x58
 800664e:	d16c      	bne.n	800672a <_strtod_l+0x122>
 8006650:	9302      	str	r3, [sp, #8]
 8006652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006654:	4a8e      	ldr	r2, [pc, #568]	@ (8006890 <_strtod_l+0x288>)
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	ab1a      	add	r3, sp, #104	@ 0x68
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	9805      	ldr	r0, [sp, #20]
 800665e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006660:	a919      	add	r1, sp, #100	@ 0x64
 8006662:	f001 fc9d 	bl	8007fa0 <__gethex>
 8006666:	f010 060f 	ands.w	r6, r0, #15
 800666a:	4604      	mov	r4, r0
 800666c:	d005      	beq.n	800667a <_strtod_l+0x72>
 800666e:	2e06      	cmp	r6, #6
 8006670:	d126      	bne.n	80066c0 <_strtod_l+0xb8>
 8006672:	2300      	movs	r3, #0
 8006674:	3501      	adds	r5, #1
 8006676:	9519      	str	r5, [sp, #100]	@ 0x64
 8006678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800667a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 8584 	bne.w	800718a <_strtod_l+0xb82>
 8006682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006684:	b1bb      	cbz	r3, 80066b6 <_strtod_l+0xae>
 8006686:	4650      	mov	r0, sl
 8006688:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800668c:	b01f      	add	sp, #124	@ 0x7c
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	2920      	cmp	r1, #32
 8006694:	d1d0      	bne.n	8006638 <_strtod_l+0x30>
 8006696:	3201      	adds	r2, #1
 8006698:	e7c3      	b.n	8006622 <_strtod_l+0x1a>
 800669a:	292d      	cmp	r1, #45	@ 0x2d
 800669c:	d1cc      	bne.n	8006638 <_strtod_l+0x30>
 800669e:	2101      	movs	r1, #1
 80066a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80066a2:	1c51      	adds	r1, r2, #1
 80066a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80066a6:	7852      	ldrb	r2, [r2, #1]
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	d1c7      	bne.n	800663c <_strtod_l+0x34>
 80066ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80066ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 8568 	bne.w	8007186 <_strtod_l+0xb7e>
 80066b6:	4650      	mov	r0, sl
 80066b8:	4659      	mov	r1, fp
 80066ba:	e7e7      	b.n	800668c <_strtod_l+0x84>
 80066bc:	2100      	movs	r1, #0
 80066be:	e7ef      	b.n	80066a0 <_strtod_l+0x98>
 80066c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80066c2:	b13a      	cbz	r2, 80066d4 <_strtod_l+0xcc>
 80066c4:	2135      	movs	r1, #53	@ 0x35
 80066c6:	a81c      	add	r0, sp, #112	@ 0x70
 80066c8:	f7ff ff36 	bl	8006538 <__copybits>
 80066cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066ce:	9805      	ldr	r0, [sp, #20]
 80066d0:	f7ff fb10 	bl	8005cf4 <_Bfree>
 80066d4:	3e01      	subs	r6, #1
 80066d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80066d8:	2e04      	cmp	r6, #4
 80066da:	d806      	bhi.n	80066ea <_strtod_l+0xe2>
 80066dc:	e8df f006 	tbb	[pc, r6]
 80066e0:	201d0314 	.word	0x201d0314
 80066e4:	14          	.byte	0x14
 80066e5:	00          	.byte	0x00
 80066e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80066ea:	05e1      	lsls	r1, r4, #23
 80066ec:	bf48      	it	mi
 80066ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80066f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066f6:	0d1b      	lsrs	r3, r3, #20
 80066f8:	051b      	lsls	r3, r3, #20
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1bd      	bne.n	800667a <_strtod_l+0x72>
 80066fe:	f7fe fb29 	bl	8004d54 <__errno>
 8006702:	2322      	movs	r3, #34	@ 0x22
 8006704:	6003      	str	r3, [r0, #0]
 8006706:	e7b8      	b.n	800667a <_strtod_l+0x72>
 8006708:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800670c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006710:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006714:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006718:	e7e7      	b.n	80066ea <_strtod_l+0xe2>
 800671a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006894 <_strtod_l+0x28c>
 800671e:	e7e4      	b.n	80066ea <_strtod_l+0xe2>
 8006720:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006724:	f04f 3aff 	mov.w	sl, #4294967295
 8006728:	e7df      	b.n	80066ea <_strtod_l+0xe2>
 800672a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b30      	cmp	r3, #48	@ 0x30
 8006734:	d0f9      	beq.n	800672a <_strtod_l+0x122>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d09f      	beq.n	800667a <_strtod_l+0x72>
 800673a:	2301      	movs	r3, #1
 800673c:	9309      	str	r3, [sp, #36]	@ 0x24
 800673e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006740:	220a      	movs	r2, #10
 8006742:	930c      	str	r3, [sp, #48]	@ 0x30
 8006744:	2300      	movs	r3, #0
 8006746:	461f      	mov	r7, r3
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	930a      	str	r3, [sp, #40]	@ 0x28
 800674c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800674e:	7805      	ldrb	r5, [r0, #0]
 8006750:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006754:	b2d9      	uxtb	r1, r3
 8006756:	2909      	cmp	r1, #9
 8006758:	d928      	bls.n	80067ac <_strtod_l+0x1a4>
 800675a:	2201      	movs	r2, #1
 800675c:	494e      	ldr	r1, [pc, #312]	@ (8006898 <_strtod_l+0x290>)
 800675e:	f001 fb4e 	bl	8007dfe <strncmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d032      	beq.n	80067cc <_strtod_l+0x1c4>
 8006766:	2000      	movs	r0, #0
 8006768:	462a      	mov	r2, r5
 800676a:	4681      	mov	r9, r0
 800676c:	463d      	mov	r5, r7
 800676e:	4603      	mov	r3, r0
 8006770:	2a65      	cmp	r2, #101	@ 0x65
 8006772:	d001      	beq.n	8006778 <_strtod_l+0x170>
 8006774:	2a45      	cmp	r2, #69	@ 0x45
 8006776:	d114      	bne.n	80067a2 <_strtod_l+0x19a>
 8006778:	b91d      	cbnz	r5, 8006782 <_strtod_l+0x17a>
 800677a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800677c:	4302      	orrs	r2, r0
 800677e:	d095      	beq.n	80066ac <_strtod_l+0xa4>
 8006780:	2500      	movs	r5, #0
 8006782:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006784:	1c62      	adds	r2, r4, #1
 8006786:	9219      	str	r2, [sp, #100]	@ 0x64
 8006788:	7862      	ldrb	r2, [r4, #1]
 800678a:	2a2b      	cmp	r2, #43	@ 0x2b
 800678c:	d077      	beq.n	800687e <_strtod_l+0x276>
 800678e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006790:	d07b      	beq.n	800688a <_strtod_l+0x282>
 8006792:	f04f 0c00 	mov.w	ip, #0
 8006796:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800679a:	2909      	cmp	r1, #9
 800679c:	f240 8082 	bls.w	80068a4 <_strtod_l+0x29c>
 80067a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	e0a2      	b.n	80068ee <_strtod_l+0x2e6>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e7c7      	b.n	800673c <_strtod_l+0x134>
 80067ac:	2f08      	cmp	r7, #8
 80067ae:	bfd5      	itete	le
 80067b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80067b2:	9908      	ldrgt	r1, [sp, #32]
 80067b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80067b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80067bc:	f100 0001 	add.w	r0, r0, #1
 80067c0:	bfd4      	ite	le
 80067c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80067c4:	9308      	strgt	r3, [sp, #32]
 80067c6:	3701      	adds	r7, #1
 80067c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80067ca:	e7bf      	b.n	800674c <_strtod_l+0x144>
 80067cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80067d2:	785a      	ldrb	r2, [r3, #1]
 80067d4:	b37f      	cbz	r7, 8006836 <_strtod_l+0x22e>
 80067d6:	4681      	mov	r9, r0
 80067d8:	463d      	mov	r5, r7
 80067da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d912      	bls.n	8006808 <_strtod_l+0x200>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7c4      	b.n	8006770 <_strtod_l+0x168>
 80067e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067e8:	3001      	adds	r0, #1
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80067ee:	785a      	ldrb	r2, [r3, #1]
 80067f0:	2a30      	cmp	r2, #48	@ 0x30
 80067f2:	d0f8      	beq.n	80067e6 <_strtod_l+0x1de>
 80067f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	f200 84cb 	bhi.w	8007194 <_strtod_l+0xb8c>
 80067fe:	4681      	mov	r9, r0
 8006800:	2000      	movs	r0, #0
 8006802:	4605      	mov	r5, r0
 8006804:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006806:	930c      	str	r3, [sp, #48]	@ 0x30
 8006808:	3a30      	subs	r2, #48	@ 0x30
 800680a:	f100 0301 	add.w	r3, r0, #1
 800680e:	d02a      	beq.n	8006866 <_strtod_l+0x25e>
 8006810:	4499      	add	r9, r3
 8006812:	210a      	movs	r1, #10
 8006814:	462b      	mov	r3, r5
 8006816:	eb00 0c05 	add.w	ip, r0, r5
 800681a:	4563      	cmp	r3, ip
 800681c:	d10d      	bne.n	800683a <_strtod_l+0x232>
 800681e:	1c69      	adds	r1, r5, #1
 8006820:	4401      	add	r1, r0
 8006822:	4428      	add	r0, r5
 8006824:	2808      	cmp	r0, #8
 8006826:	dc16      	bgt.n	8006856 <_strtod_l+0x24e>
 8006828:	230a      	movs	r3, #10
 800682a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800682c:	fb03 2300 	mla	r3, r3, r0, r2
 8006830:	930a      	str	r3, [sp, #40]	@ 0x28
 8006832:	2300      	movs	r3, #0
 8006834:	e018      	b.n	8006868 <_strtod_l+0x260>
 8006836:	4638      	mov	r0, r7
 8006838:	e7da      	b.n	80067f0 <_strtod_l+0x1e8>
 800683a:	2b08      	cmp	r3, #8
 800683c:	f103 0301 	add.w	r3, r3, #1
 8006840:	dc03      	bgt.n	800684a <_strtod_l+0x242>
 8006842:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006844:	434e      	muls	r6, r1
 8006846:	960a      	str	r6, [sp, #40]	@ 0x28
 8006848:	e7e7      	b.n	800681a <_strtod_l+0x212>
 800684a:	2b10      	cmp	r3, #16
 800684c:	bfde      	ittt	le
 800684e:	9e08      	ldrle	r6, [sp, #32]
 8006850:	434e      	mulle	r6, r1
 8006852:	9608      	strle	r6, [sp, #32]
 8006854:	e7e1      	b.n	800681a <_strtod_l+0x212>
 8006856:	280f      	cmp	r0, #15
 8006858:	dceb      	bgt.n	8006832 <_strtod_l+0x22a>
 800685a:	230a      	movs	r3, #10
 800685c:	9808      	ldr	r0, [sp, #32]
 800685e:	fb03 2300 	mla	r3, r3, r0, r2
 8006862:	9308      	str	r3, [sp, #32]
 8006864:	e7e5      	b.n	8006832 <_strtod_l+0x22a>
 8006866:	4629      	mov	r1, r5
 8006868:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800686a:	460d      	mov	r5, r1
 800686c:	1c50      	adds	r0, r2, #1
 800686e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006870:	7852      	ldrb	r2, [r2, #1]
 8006872:	4618      	mov	r0, r3
 8006874:	e7b1      	b.n	80067da <_strtod_l+0x1d2>
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	2301      	movs	r3, #1
 800687c:	e77d      	b.n	800677a <_strtod_l+0x172>
 800687e:	f04f 0c00 	mov.w	ip, #0
 8006882:	1ca2      	adds	r2, r4, #2
 8006884:	9219      	str	r2, [sp, #100]	@ 0x64
 8006886:	78a2      	ldrb	r2, [r4, #2]
 8006888:	e785      	b.n	8006796 <_strtod_l+0x18e>
 800688a:	f04f 0c01 	mov.w	ip, #1
 800688e:	e7f8      	b.n	8006882 <_strtod_l+0x27a>
 8006890:	08009058 	.word	0x08009058
 8006894:	7ff00000 	.word	0x7ff00000
 8006898:	08009040 	.word	0x08009040
 800689c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800689e:	1c51      	adds	r1, r2, #1
 80068a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80068a2:	7852      	ldrb	r2, [r2, #1]
 80068a4:	2a30      	cmp	r2, #48	@ 0x30
 80068a6:	d0f9      	beq.n	800689c <_strtod_l+0x294>
 80068a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80068ac:	2908      	cmp	r1, #8
 80068ae:	f63f af78 	bhi.w	80067a2 <_strtod_l+0x19a>
 80068b2:	f04f 080a 	mov.w	r8, #10
 80068b6:	3a30      	subs	r2, #48	@ 0x30
 80068b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80068be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068c0:	1c56      	adds	r6, r2, #1
 80068c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80068c4:	7852      	ldrb	r2, [r2, #1]
 80068c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80068ca:	f1be 0f09 	cmp.w	lr, #9
 80068ce:	d939      	bls.n	8006944 <_strtod_l+0x33c>
 80068d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80068d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80068d6:	1a76      	subs	r6, r6, r1
 80068d8:	2e08      	cmp	r6, #8
 80068da:	dc03      	bgt.n	80068e4 <_strtod_l+0x2dc>
 80068dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068de:	4588      	cmp	r8, r1
 80068e0:	bfa8      	it	ge
 80068e2:	4688      	movge	r8, r1
 80068e4:	f1bc 0f00 	cmp.w	ip, #0
 80068e8:	d001      	beq.n	80068ee <_strtod_l+0x2e6>
 80068ea:	f1c8 0800 	rsb	r8, r8, #0
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	d14e      	bne.n	8006990 <_strtod_l+0x388>
 80068f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068f4:	4308      	orrs	r0, r1
 80068f6:	f47f aec0 	bne.w	800667a <_strtod_l+0x72>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f47f aed6 	bne.w	80066ac <_strtod_l+0xa4>
 8006900:	2a69      	cmp	r2, #105	@ 0x69
 8006902:	d028      	beq.n	8006956 <_strtod_l+0x34e>
 8006904:	dc25      	bgt.n	8006952 <_strtod_l+0x34a>
 8006906:	2a49      	cmp	r2, #73	@ 0x49
 8006908:	d025      	beq.n	8006956 <_strtod_l+0x34e>
 800690a:	2a4e      	cmp	r2, #78	@ 0x4e
 800690c:	f47f aece 	bne.w	80066ac <_strtod_l+0xa4>
 8006910:	499a      	ldr	r1, [pc, #616]	@ (8006b7c <_strtod_l+0x574>)
 8006912:	a819      	add	r0, sp, #100	@ 0x64
 8006914:	f001 fd66 	bl	80083e4 <__match>
 8006918:	2800      	cmp	r0, #0
 800691a:	f43f aec7 	beq.w	80066ac <_strtod_l+0xa4>
 800691e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b28      	cmp	r3, #40	@ 0x28
 8006924:	d12e      	bne.n	8006984 <_strtod_l+0x37c>
 8006926:	4996      	ldr	r1, [pc, #600]	@ (8006b80 <_strtod_l+0x578>)
 8006928:	aa1c      	add	r2, sp, #112	@ 0x70
 800692a:	a819      	add	r0, sp, #100	@ 0x64
 800692c:	f001 fd6e 	bl	800840c <__hexnan>
 8006930:	2805      	cmp	r0, #5
 8006932:	d127      	bne.n	8006984 <_strtod_l+0x37c>
 8006934:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006936:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800693a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800693e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006942:	e69a      	b.n	800667a <_strtod_l+0x72>
 8006944:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006946:	fb08 2101 	mla	r1, r8, r1, r2
 800694a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800694e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006950:	e7b5      	b.n	80068be <_strtod_l+0x2b6>
 8006952:	2a6e      	cmp	r2, #110	@ 0x6e
 8006954:	e7da      	b.n	800690c <_strtod_l+0x304>
 8006956:	498b      	ldr	r1, [pc, #556]	@ (8006b84 <_strtod_l+0x57c>)
 8006958:	a819      	add	r0, sp, #100	@ 0x64
 800695a:	f001 fd43 	bl	80083e4 <__match>
 800695e:	2800      	cmp	r0, #0
 8006960:	f43f aea4 	beq.w	80066ac <_strtod_l+0xa4>
 8006964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006966:	4988      	ldr	r1, [pc, #544]	@ (8006b88 <_strtod_l+0x580>)
 8006968:	3b01      	subs	r3, #1
 800696a:	a819      	add	r0, sp, #100	@ 0x64
 800696c:	9319      	str	r3, [sp, #100]	@ 0x64
 800696e:	f001 fd39 	bl	80083e4 <__match>
 8006972:	b910      	cbnz	r0, 800697a <_strtod_l+0x372>
 8006974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006976:	3301      	adds	r3, #1
 8006978:	9319      	str	r3, [sp, #100]	@ 0x64
 800697a:	f04f 0a00 	mov.w	sl, #0
 800697e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006b8c <_strtod_l+0x584>
 8006982:	e67a      	b.n	800667a <_strtod_l+0x72>
 8006984:	4882      	ldr	r0, [pc, #520]	@ (8006b90 <_strtod_l+0x588>)
 8006986:	f001 fa6b 	bl	8007e60 <nan>
 800698a:	4682      	mov	sl, r0
 800698c:	468b      	mov	fp, r1
 800698e:	e674      	b.n	800667a <_strtod_l+0x72>
 8006990:	eba8 0309 	sub.w	r3, r8, r9
 8006994:	2f00      	cmp	r7, #0
 8006996:	bf08      	it	eq
 8006998:	462f      	moveq	r7, r5
 800699a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800699c:	2d10      	cmp	r5, #16
 800699e:	462c      	mov	r4, r5
 80069a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a2:	bfa8      	it	ge
 80069a4:	2410      	movge	r4, #16
 80069a6:	f7f9 fd1d 	bl	80003e4 <__aeabi_ui2d>
 80069aa:	2d09      	cmp	r5, #9
 80069ac:	4682      	mov	sl, r0
 80069ae:	468b      	mov	fp, r1
 80069b0:	dc11      	bgt.n	80069d6 <_strtod_l+0x3ce>
 80069b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f43f ae60 	beq.w	800667a <_strtod_l+0x72>
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	dd76      	ble.n	8006aac <_strtod_l+0x4a4>
 80069be:	2b16      	cmp	r3, #22
 80069c0:	dc5d      	bgt.n	8006a7e <_strtod_l+0x476>
 80069c2:	4974      	ldr	r1, [pc, #464]	@ (8006b94 <_strtod_l+0x58c>)
 80069c4:	4652      	mov	r2, sl
 80069c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069ca:	465b      	mov	r3, fp
 80069cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d0:	f7f9 fd82 	bl	80004d8 <__aeabi_dmul>
 80069d4:	e7d9      	b.n	800698a <_strtod_l+0x382>
 80069d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006b94 <_strtod_l+0x58c>)
 80069d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80069e0:	f7f9 fd7a 	bl	80004d8 <__aeabi_dmul>
 80069e4:	4682      	mov	sl, r0
 80069e6:	9808      	ldr	r0, [sp, #32]
 80069e8:	468b      	mov	fp, r1
 80069ea:	f7f9 fcfb 	bl	80003e4 <__aeabi_ui2d>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4650      	mov	r0, sl
 80069f4:	4659      	mov	r1, fp
 80069f6:	f7f9 fbb9 	bl	800016c <__adddf3>
 80069fa:	2d0f      	cmp	r5, #15
 80069fc:	4682      	mov	sl, r0
 80069fe:	468b      	mov	fp, r1
 8006a00:	ddd7      	ble.n	80069b2 <_strtod_l+0x3aa>
 8006a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a04:	1b2c      	subs	r4, r5, r4
 8006a06:	441c      	add	r4, r3
 8006a08:	2c00      	cmp	r4, #0
 8006a0a:	f340 8096 	ble.w	8006b3a <_strtod_l+0x532>
 8006a0e:	f014 030f 	ands.w	r3, r4, #15
 8006a12:	d00a      	beq.n	8006a2a <_strtod_l+0x422>
 8006a14:	495f      	ldr	r1, [pc, #380]	@ (8006b94 <_strtod_l+0x58c>)
 8006a16:	4652      	mov	r2, sl
 8006a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a20:	465b      	mov	r3, fp
 8006a22:	f7f9 fd59 	bl	80004d8 <__aeabi_dmul>
 8006a26:	4682      	mov	sl, r0
 8006a28:	468b      	mov	fp, r1
 8006a2a:	f034 040f 	bics.w	r4, r4, #15
 8006a2e:	d073      	beq.n	8006b18 <_strtod_l+0x510>
 8006a30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006a34:	dd48      	ble.n	8006ac8 <_strtod_l+0x4c0>
 8006a36:	2400      	movs	r4, #0
 8006a38:	46a0      	mov	r8, r4
 8006a3a:	46a1      	mov	r9, r4
 8006a3c:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a3e:	2322      	movs	r3, #34	@ 0x22
 8006a40:	f04f 0a00 	mov.w	sl, #0
 8006a44:	9a05      	ldr	r2, [sp, #20]
 8006a46:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006b8c <_strtod_l+0x584>
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f43f ae13 	beq.w	800667a <_strtod_l+0x72>
 8006a54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a56:	9805      	ldr	r0, [sp, #20]
 8006a58:	f7ff f94c 	bl	8005cf4 <_Bfree>
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	9805      	ldr	r0, [sp, #20]
 8006a60:	f7ff f948 	bl	8005cf4 <_Bfree>
 8006a64:	4641      	mov	r1, r8
 8006a66:	9805      	ldr	r0, [sp, #20]
 8006a68:	f7ff f944 	bl	8005cf4 <_Bfree>
 8006a6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a6e:	9805      	ldr	r0, [sp, #20]
 8006a70:	f7ff f940 	bl	8005cf4 <_Bfree>
 8006a74:	4621      	mov	r1, r4
 8006a76:	9805      	ldr	r0, [sp, #20]
 8006a78:	f7ff f93c 	bl	8005cf4 <_Bfree>
 8006a7c:	e5fd      	b.n	800667a <_strtod_l+0x72>
 8006a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006a84:	4293      	cmp	r3, r2
 8006a86:	dbbc      	blt.n	8006a02 <_strtod_l+0x3fa>
 8006a88:	4c42      	ldr	r4, [pc, #264]	@ (8006b94 <_strtod_l+0x58c>)
 8006a8a:	f1c5 050f 	rsb	r5, r5, #15
 8006a8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a92:	4652      	mov	r2, sl
 8006a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a98:	465b      	mov	r3, fp
 8006a9a:	f7f9 fd1d 	bl	80004d8 <__aeabi_dmul>
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	1b5d      	subs	r5, r3, r5
 8006aa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006aaa:	e791      	b.n	80069d0 <_strtod_l+0x3c8>
 8006aac:	3316      	adds	r3, #22
 8006aae:	dba8      	blt.n	8006a02 <_strtod_l+0x3fa>
 8006ab0:	4b38      	ldr	r3, [pc, #224]	@ (8006b94 <_strtod_l+0x58c>)
 8006ab2:	eba9 0808 	sub.w	r8, r9, r8
 8006ab6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006aba:	4650      	mov	r0, sl
 8006abc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006ac0:	4659      	mov	r1, fp
 8006ac2:	f7f9 fe33 	bl	800072c <__aeabi_ddiv>
 8006ac6:	e760      	b.n	800698a <_strtod_l+0x382>
 8006ac8:	4b33      	ldr	r3, [pc, #204]	@ (8006b98 <_strtod_l+0x590>)
 8006aca:	4650      	mov	r0, sl
 8006acc:	9308      	str	r3, [sp, #32]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	461e      	mov	r6, r3
 8006ad4:	1124      	asrs	r4, r4, #4
 8006ad6:	2c01      	cmp	r4, #1
 8006ad8:	dc21      	bgt.n	8006b1e <_strtod_l+0x516>
 8006ada:	b10b      	cbz	r3, 8006ae0 <_strtod_l+0x4d8>
 8006adc:	4682      	mov	sl, r0
 8006ade:	468b      	mov	fp, r1
 8006ae0:	492d      	ldr	r1, [pc, #180]	@ (8006b98 <_strtod_l+0x590>)
 8006ae2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006ae6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006aea:	4652      	mov	r2, sl
 8006aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006af0:	465b      	mov	r3, fp
 8006af2:	f7f9 fcf1 	bl	80004d8 <__aeabi_dmul>
 8006af6:	4b25      	ldr	r3, [pc, #148]	@ (8006b8c <_strtod_l+0x584>)
 8006af8:	460a      	mov	r2, r1
 8006afa:	400b      	ands	r3, r1
 8006afc:	4927      	ldr	r1, [pc, #156]	@ (8006b9c <_strtod_l+0x594>)
 8006afe:	4682      	mov	sl, r0
 8006b00:	428b      	cmp	r3, r1
 8006b02:	d898      	bhi.n	8006a36 <_strtod_l+0x42e>
 8006b04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	bf86      	itte	hi
 8006b0c:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b10:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006ba0 <_strtod_l+0x598>
 8006b14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9308      	str	r3, [sp, #32]
 8006b1c:	e07a      	b.n	8006c14 <_strtod_l+0x60c>
 8006b1e:	07e2      	lsls	r2, r4, #31
 8006b20:	d505      	bpl.n	8006b2e <_strtod_l+0x526>
 8006b22:	9b08      	ldr	r3, [sp, #32]
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fcd6 	bl	80004d8 <__aeabi_dmul>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	9a08      	ldr	r2, [sp, #32]
 8006b30:	3601      	adds	r6, #1
 8006b32:	3208      	adds	r2, #8
 8006b34:	1064      	asrs	r4, r4, #1
 8006b36:	9208      	str	r2, [sp, #32]
 8006b38:	e7cd      	b.n	8006ad6 <_strtod_l+0x4ce>
 8006b3a:	d0ed      	beq.n	8006b18 <_strtod_l+0x510>
 8006b3c:	4264      	negs	r4, r4
 8006b3e:	f014 020f 	ands.w	r2, r4, #15
 8006b42:	d00a      	beq.n	8006b5a <_strtod_l+0x552>
 8006b44:	4b13      	ldr	r3, [pc, #76]	@ (8006b94 <_strtod_l+0x58c>)
 8006b46:	4650      	mov	r0, sl
 8006b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fdeb 	bl	800072c <__aeabi_ddiv>
 8006b56:	4682      	mov	sl, r0
 8006b58:	468b      	mov	fp, r1
 8006b5a:	1124      	asrs	r4, r4, #4
 8006b5c:	d0dc      	beq.n	8006b18 <_strtod_l+0x510>
 8006b5e:	2c1f      	cmp	r4, #31
 8006b60:	dd20      	ble.n	8006ba4 <_strtod_l+0x59c>
 8006b62:	2400      	movs	r4, #0
 8006b64:	46a0      	mov	r8, r4
 8006b66:	46a1      	mov	r9, r4
 8006b68:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b6a:	2322      	movs	r3, #34	@ 0x22
 8006b6c:	9a05      	ldr	r2, [sp, #20]
 8006b6e:	f04f 0a00 	mov.w	sl, #0
 8006b72:	f04f 0b00 	mov.w	fp, #0
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e768      	b.n	8006a4c <_strtod_l+0x444>
 8006b7a:	bf00      	nop
 8006b7c:	08008e2f 	.word	0x08008e2f
 8006b80:	08009044 	.word	0x08009044
 8006b84:	08008e27 	.word	0x08008e27
 8006b88:	08008e5c 	.word	0x08008e5c
 8006b8c:	7ff00000 	.word	0x7ff00000
 8006b90:	08009208 	.word	0x08009208
 8006b94:	08008f78 	.word	0x08008f78
 8006b98:	08008f50 	.word	0x08008f50
 8006b9c:	7ca00000 	.word	0x7ca00000
 8006ba0:	7fefffff 	.word	0x7fefffff
 8006ba4:	f014 0310 	ands.w	r3, r4, #16
 8006ba8:	bf18      	it	ne
 8006baa:	236a      	movne	r3, #106	@ 0x6a
 8006bac:	4650      	mov	r0, sl
 8006bae:	9308      	str	r3, [sp, #32]
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4ea9      	ldr	r6, [pc, #676]	@ (8006e5c <_strtod_l+0x854>)
 8006bb6:	07e2      	lsls	r2, r4, #31
 8006bb8:	d504      	bpl.n	8006bc4 <_strtod_l+0x5bc>
 8006bba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bbe:	f7f9 fc8b 	bl	80004d8 <__aeabi_dmul>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	1064      	asrs	r4, r4, #1
 8006bc6:	f106 0608 	add.w	r6, r6, #8
 8006bca:	d1f4      	bne.n	8006bb6 <_strtod_l+0x5ae>
 8006bcc:	b10b      	cbz	r3, 8006bd2 <_strtod_l+0x5ca>
 8006bce:	4682      	mov	sl, r0
 8006bd0:	468b      	mov	fp, r1
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	b1b3      	cbz	r3, 8006c04 <_strtod_l+0x5fc>
 8006bd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006bda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	4659      	mov	r1, fp
 8006be2:	dd0f      	ble.n	8006c04 <_strtod_l+0x5fc>
 8006be4:	2b1f      	cmp	r3, #31
 8006be6:	dd57      	ble.n	8006c98 <_strtod_l+0x690>
 8006be8:	2b34      	cmp	r3, #52	@ 0x34
 8006bea:	bfd8      	it	le
 8006bec:	f04f 33ff 	movle.w	r3, #4294967295
 8006bf0:	f04f 0a00 	mov.w	sl, #0
 8006bf4:	bfcf      	iteee	gt
 8006bf6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006bfa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006bfe:	4093      	lslle	r3, r2
 8006c00:	ea03 0b01 	andle.w	fp, r3, r1
 8006c04:	2200      	movs	r2, #0
 8006c06:	2300      	movs	r3, #0
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	f7f9 fecc 	bl	80009a8 <__aeabi_dcmpeq>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d1a6      	bne.n	8006b62 <_strtod_l+0x55a>
 8006c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c16:	463a      	mov	r2, r7
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	9805      	ldr	r0, [sp, #20]
 8006c20:	f7ff f8d0 	bl	8005dc4 <__s2b>
 8006c24:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f af05 	beq.w	8006a36 <_strtod_l+0x42e>
 8006c2c:	2400      	movs	r4, #0
 8006c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c30:	eba9 0308 	sub.w	r3, r9, r8
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	bfa8      	it	ge
 8006c38:	2300      	movge	r3, #0
 8006c3a:	46a0      	mov	r8, r4
 8006c3c:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c42:	9316      	str	r3, [sp, #88]	@ 0x58
 8006c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c46:	9805      	ldr	r0, [sp, #20]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	f7ff f813 	bl	8005c74 <_Balloc>
 8006c4e:	4681      	mov	r9, r0
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f43f aef4 	beq.w	8006a3e <_strtod_l+0x436>
 8006c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c58:	300c      	adds	r0, #12
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	f103 010c 	add.w	r1, r3, #12
 8006c60:	3202      	adds	r2, #2
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	f001 f8ee 	bl	8007e44 <memcpy>
 8006c68:	ab1c      	add	r3, sp, #112	@ 0x70
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	9805      	ldr	r0, [sp, #20]
 8006c76:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006c7a:	f7ff fbd5 	bl	8006428 <__d2b>
 8006c7e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f43f aedc 	beq.w	8006a3e <_strtod_l+0x436>
 8006c86:	2101      	movs	r1, #1
 8006c88:	9805      	ldr	r0, [sp, #20]
 8006c8a:	f7ff f931 	bl	8005ef0 <__i2b>
 8006c8e:	4680      	mov	r8, r0
 8006c90:	b948      	cbnz	r0, 8006ca6 <_strtod_l+0x69e>
 8006c92:	f04f 0800 	mov.w	r8, #0
 8006c96:	e6d2      	b.n	8006a3e <_strtod_l+0x436>
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	ea03 0a0a 	and.w	sl, r3, sl
 8006ca4:	e7ae      	b.n	8006c04 <_strtod_l+0x5fc>
 8006ca6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006ca8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	bfab      	itete	ge
 8006cae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006cb0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006cb2:	18ef      	addge	r7, r5, r3
 8006cb4:	1b5e      	sublt	r6, r3, r5
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	bfa8      	it	ge
 8006cba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006cbc:	eba5 0503 	sub.w	r5, r5, r3
 8006cc0:	4415      	add	r5, r2
 8006cc2:	4b67      	ldr	r3, [pc, #412]	@ (8006e60 <_strtod_l+0x858>)
 8006cc4:	f105 35ff 	add.w	r5, r5, #4294967295
 8006cc8:	bfb8      	it	lt
 8006cca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006cd2:	da50      	bge.n	8006d76 <_strtod_l+0x76e>
 8006cd4:	1b5b      	subs	r3, r3, r5
 8006cd6:	2b1f      	cmp	r3, #31
 8006cd8:	f04f 0101 	mov.w	r1, #1
 8006cdc:	eba2 0203 	sub.w	r2, r2, r3
 8006ce0:	dc3d      	bgt.n	8006d5e <_strtod_l+0x756>
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cec:	18bd      	adds	r5, r7, r2
 8006cee:	9b08      	ldr	r3, [sp, #32]
 8006cf0:	42af      	cmp	r7, r5
 8006cf2:	4416      	add	r6, r2
 8006cf4:	441e      	add	r6, r3
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	bfa8      	it	ge
 8006cfa:	462b      	movge	r3, r5
 8006cfc:	42b3      	cmp	r3, r6
 8006cfe:	bfa8      	it	ge
 8006d00:	4633      	movge	r3, r6
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bfc2      	ittt	gt
 8006d06:	1aed      	subgt	r5, r5, r3
 8006d08:	1af6      	subgt	r6, r6, r3
 8006d0a:	1aff      	subgt	r7, r7, r3
 8006d0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd16      	ble.n	8006d40 <_strtod_l+0x738>
 8006d12:	4641      	mov	r1, r8
 8006d14:	461a      	mov	r2, r3
 8006d16:	9805      	ldr	r0, [sp, #20]
 8006d18:	f7ff f9a8 	bl	800606c <__pow5mult>
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d0b7      	beq.n	8006c92 <_strtod_l+0x68a>
 8006d22:	4601      	mov	r1, r0
 8006d24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	f7ff f8f8 	bl	8005f1c <__multiply>
 8006d2c:	900e      	str	r0, [sp, #56]	@ 0x38
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f ae85 	beq.w	8006a3e <_strtod_l+0x436>
 8006d34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d36:	9805      	ldr	r0, [sp, #20]
 8006d38:	f7fe ffdc 	bl	8005cf4 <_Bfree>
 8006d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	dc1d      	bgt.n	8006d80 <_strtod_l+0x778>
 8006d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dd23      	ble.n	8006d92 <_strtod_l+0x78a>
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006d4e:	9805      	ldr	r0, [sp, #20]
 8006d50:	f7ff f98c 	bl	800606c <__pow5mult>
 8006d54:	4681      	mov	r9, r0
 8006d56:	b9e0      	cbnz	r0, 8006d92 <_strtod_l+0x78a>
 8006d58:	f04f 0900 	mov.w	r9, #0
 8006d5c:	e66f      	b.n	8006a3e <_strtod_l+0x436>
 8006d5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006d62:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006d66:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006d6a:	35e2      	adds	r5, #226	@ 0xe2
 8006d6c:	fa01 f305 	lsl.w	r3, r1, r5
 8006d70:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d72:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006d74:	e7ba      	b.n	8006cec <_strtod_l+0x6e4>
 8006d76:	2300      	movs	r3, #0
 8006d78:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d7e:	e7b5      	b.n	8006cec <_strtod_l+0x6e4>
 8006d80:	462a      	mov	r2, r5
 8006d82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d84:	9805      	ldr	r0, [sp, #20]
 8006d86:	f7ff f9cb 	bl	8006120 <__lshift>
 8006d8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d1d9      	bne.n	8006d44 <_strtod_l+0x73c>
 8006d90:	e655      	b.n	8006a3e <_strtod_l+0x436>
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	dd07      	ble.n	8006da6 <_strtod_l+0x79e>
 8006d96:	4649      	mov	r1, r9
 8006d98:	4632      	mov	r2, r6
 8006d9a:	9805      	ldr	r0, [sp, #20]
 8006d9c:	f7ff f9c0 	bl	8006120 <__lshift>
 8006da0:	4681      	mov	r9, r0
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d0d8      	beq.n	8006d58 <_strtod_l+0x750>
 8006da6:	2f00      	cmp	r7, #0
 8006da8:	dd08      	ble.n	8006dbc <_strtod_l+0x7b4>
 8006daa:	4641      	mov	r1, r8
 8006dac:	463a      	mov	r2, r7
 8006dae:	9805      	ldr	r0, [sp, #20]
 8006db0:	f7ff f9b6 	bl	8006120 <__lshift>
 8006db4:	4680      	mov	r8, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f ae41 	beq.w	8006a3e <_strtod_l+0x436>
 8006dbc:	464a      	mov	r2, r9
 8006dbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dc0:	9805      	ldr	r0, [sp, #20]
 8006dc2:	f7ff fa35 	bl	8006230 <__mdiff>
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f43f ae38 	beq.w	8006a3e <_strtod_l+0x436>
 8006dce:	68c3      	ldr	r3, [r0, #12]
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60c3      	str	r3, [r0, #12]
 8006dd8:	f7ff fa0e 	bl	80061f8 <__mcmp>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	da45      	bge.n	8006e6c <_strtod_l+0x864>
 8006de0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006de2:	ea53 030a 	orrs.w	r3, r3, sl
 8006de6:	d16b      	bne.n	8006ec0 <_strtod_l+0x8b8>
 8006de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d167      	bne.n	8006ec0 <_strtod_l+0x8b8>
 8006df0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006df4:	0d1b      	lsrs	r3, r3, #20
 8006df6:	051b      	lsls	r3, r3, #20
 8006df8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006dfc:	d960      	bls.n	8006ec0 <_strtod_l+0x8b8>
 8006dfe:	6963      	ldr	r3, [r4, #20]
 8006e00:	b913      	cbnz	r3, 8006e08 <_strtod_l+0x800>
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	dd5b      	ble.n	8006ec0 <_strtod_l+0x8b8>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	9805      	ldr	r0, [sp, #20]
 8006e0e:	f7ff f987 	bl	8006120 <__lshift>
 8006e12:	4641      	mov	r1, r8
 8006e14:	4604      	mov	r4, r0
 8006e16:	f7ff f9ef 	bl	80061f8 <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	dd50      	ble.n	8006ec0 <_strtod_l+0x8b8>
 8006e1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e22:	9a08      	ldr	r2, [sp, #32]
 8006e24:	0d1b      	lsrs	r3, r3, #20
 8006e26:	051b      	lsls	r3, r3, #20
 8006e28:	2a00      	cmp	r2, #0
 8006e2a:	d06a      	beq.n	8006f02 <_strtod_l+0x8fa>
 8006e2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e30:	d867      	bhi.n	8006f02 <_strtod_l+0x8fa>
 8006e32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006e36:	f67f ae98 	bls.w	8006b6a <_strtod_l+0x562>
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	4659      	mov	r1, fp
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <_strtod_l+0x85c>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7f9 fb49 	bl	80004d8 <__aeabi_dmul>
 8006e46:	4b08      	ldr	r3, [pc, #32]	@ (8006e68 <_strtod_l+0x860>)
 8006e48:	4682      	mov	sl, r0
 8006e4a:	400b      	ands	r3, r1
 8006e4c:	468b      	mov	fp, r1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f47f ae00 	bne.w	8006a54 <_strtod_l+0x44c>
 8006e54:	2322      	movs	r3, #34	@ 0x22
 8006e56:	9a05      	ldr	r2, [sp, #20]
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e5fb      	b.n	8006a54 <_strtod_l+0x44c>
 8006e5c:	08009070 	.word	0x08009070
 8006e60:	fffffc02 	.word	0xfffffc02
 8006e64:	39500000 	.word	0x39500000
 8006e68:	7ff00000 	.word	0x7ff00000
 8006e6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006e70:	d165      	bne.n	8006f3e <_strtod_l+0x936>
 8006e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e78:	b35a      	cbz	r2, 8006ed2 <_strtod_l+0x8ca>
 8006e7a:	4a99      	ldr	r2, [pc, #612]	@ (80070e0 <_strtod_l+0xad8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d12b      	bne.n	8006ed8 <_strtod_l+0x8d0>
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	4651      	mov	r1, sl
 8006e84:	b303      	cbz	r3, 8006ec8 <_strtod_l+0x8c0>
 8006e86:	465a      	mov	r2, fp
 8006e88:	4b96      	ldr	r3, [pc, #600]	@ (80070e4 <_strtod_l+0xadc>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	d81b      	bhi.n	8006ece <_strtod_l+0x8c6>
 8006e96:	0d1b      	lsrs	r3, r3, #20
 8006e98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	d119      	bne.n	8006ed8 <_strtod_l+0x8d0>
 8006ea4:	4b90      	ldr	r3, [pc, #576]	@ (80070e8 <_strtod_l+0xae0>)
 8006ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d102      	bne.n	8006eb2 <_strtod_l+0x8aa>
 8006eac:	3101      	adds	r1, #1
 8006eae:	f43f adc6 	beq.w	8006a3e <_strtod_l+0x436>
 8006eb2:	f04f 0a00 	mov.w	sl, #0
 8006eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80070e4 <_strtod_l+0xadc>)
 8006eb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eba:	401a      	ands	r2, r3
 8006ebc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1b9      	bne.n	8006e3a <_strtod_l+0x832>
 8006ec6:	e5c5      	b.n	8006a54 <_strtod_l+0x44c>
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	e7e8      	b.n	8006ea0 <_strtod_l+0x898>
 8006ece:	4613      	mov	r3, r2
 8006ed0:	e7e6      	b.n	8006ea0 <_strtod_l+0x898>
 8006ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ed6:	d0a2      	beq.n	8006e1e <_strtod_l+0x816>
 8006ed8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006eda:	b1db      	cbz	r3, 8006f14 <_strtod_l+0x90c>
 8006edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ede:	4213      	tst	r3, r2
 8006ee0:	d0ee      	beq.n	8006ec0 <_strtod_l+0x8b8>
 8006ee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	9a08      	ldr	r2, [sp, #32]
 8006eea:	b1bb      	cbz	r3, 8006f1c <_strtod_l+0x914>
 8006eec:	f7ff fb68 	bl	80065c0 <sulp>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ef8:	f7f9 f938 	bl	800016c <__adddf3>
 8006efc:	4682      	mov	sl, r0
 8006efe:	468b      	mov	fp, r1
 8006f00:	e7de      	b.n	8006ec0 <_strtod_l+0x8b8>
 8006f02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006f06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f0a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f12:	e7d5      	b.n	8006ec0 <_strtod_l+0x8b8>
 8006f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f16:	ea13 0f0a 	tst.w	r3, sl
 8006f1a:	e7e1      	b.n	8006ee0 <_strtod_l+0x8d8>
 8006f1c:	f7ff fb50 	bl	80065c0 <sulp>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f28:	f7f9 f91e 	bl	8000168 <__aeabi_dsub>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	4682      	mov	sl, r0
 8006f32:	468b      	mov	fp, r1
 8006f34:	f7f9 fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d0c1      	beq.n	8006ec0 <_strtod_l+0x8b8>
 8006f3c:	e615      	b.n	8006b6a <_strtod_l+0x562>
 8006f3e:	4641      	mov	r1, r8
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7ff fac9 	bl	80064d8 <__ratio>
 8006f46:	2200      	movs	r2, #0
 8006f48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	460f      	mov	r7, r1
 8006f50:	f7f9 fd3e 	bl	80009d0 <__aeabi_dcmple>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d06d      	beq.n	8007034 <_strtod_l+0xa2c>
 8006f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d178      	bne.n	8007050 <_strtod_l+0xa48>
 8006f5e:	f1ba 0f00 	cmp.w	sl, #0
 8006f62:	d156      	bne.n	8007012 <_strtod_l+0xa0a>
 8006f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d158      	bne.n	8007020 <_strtod_l+0xa18>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	4b5d      	ldr	r3, [pc, #372]	@ (80070ec <_strtod_l+0xae4>)
 8006f76:	f7f9 fd21 	bl	80009bc <__aeabi_dcmplt>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d157      	bne.n	800702e <_strtod_l+0xa26>
 8006f7e:	4630      	mov	r0, r6
 8006f80:	4639      	mov	r1, r7
 8006f82:	2200      	movs	r2, #0
 8006f84:	4b5a      	ldr	r3, [pc, #360]	@ (80070f0 <_strtod_l+0xae8>)
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006f92:	9606      	str	r6, [sp, #24]
 8006f94:	9307      	str	r3, [sp, #28]
 8006f96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f9a:	4d52      	ldr	r5, [pc, #328]	@ (80070e4 <_strtod_l+0xadc>)
 8006f9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006fa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fa2:	401d      	ands	r5, r3
 8006fa4:	4b53      	ldr	r3, [pc, #332]	@ (80070f4 <_strtod_l+0xaec>)
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	f040 80aa 	bne.w	8007100 <_strtod_l+0xaf8>
 8006fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	f7ff f9cf 	bl	8006358 <__ulp>
 8006fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fbe:	f7f9 fa8b 	bl	80004d8 <__aeabi_dmul>
 8006fc2:	4652      	mov	r2, sl
 8006fc4:	465b      	mov	r3, fp
 8006fc6:	f7f9 f8d1 	bl	800016c <__adddf3>
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4945      	ldr	r1, [pc, #276]	@ (80070e4 <_strtod_l+0xadc>)
 8006fce:	4a4a      	ldr	r2, [pc, #296]	@ (80070f8 <_strtod_l+0xaf0>)
 8006fd0:	4019      	ands	r1, r3
 8006fd2:	4291      	cmp	r1, r2
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	d942      	bls.n	800705e <_strtod_l+0xa56>
 8006fd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fda:	4b43      	ldr	r3, [pc, #268]	@ (80070e8 <_strtod_l+0xae0>)
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d103      	bne.n	8006fe8 <_strtod_l+0x9e0>
 8006fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f43f ad2b 	beq.w	8006a3e <_strtod_l+0x436>
 8006fe8:	f04f 3aff 	mov.w	sl, #4294967295
 8006fec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80070e8 <_strtod_l+0xae0>
 8006ff0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ff2:	9805      	ldr	r0, [sp, #20]
 8006ff4:	f7fe fe7e 	bl	8005cf4 <_Bfree>
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	9805      	ldr	r0, [sp, #20]
 8006ffc:	f7fe fe7a 	bl	8005cf4 <_Bfree>
 8007000:	4641      	mov	r1, r8
 8007002:	9805      	ldr	r0, [sp, #20]
 8007004:	f7fe fe76 	bl	8005cf4 <_Bfree>
 8007008:	4621      	mov	r1, r4
 800700a:	9805      	ldr	r0, [sp, #20]
 800700c:	f7fe fe72 	bl	8005cf4 <_Bfree>
 8007010:	e618      	b.n	8006c44 <_strtod_l+0x63c>
 8007012:	f1ba 0f01 	cmp.w	sl, #1
 8007016:	d103      	bne.n	8007020 <_strtod_l+0xa18>
 8007018:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800701a:	2b00      	cmp	r3, #0
 800701c:	f43f ada5 	beq.w	8006b6a <_strtod_l+0x562>
 8007020:	2200      	movs	r2, #0
 8007022:	4b36      	ldr	r3, [pc, #216]	@ (80070fc <_strtod_l+0xaf4>)
 8007024:	2600      	movs	r6, #0
 8007026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702a:	4f30      	ldr	r7, [pc, #192]	@ (80070ec <_strtod_l+0xae4>)
 800702c:	e7b3      	b.n	8006f96 <_strtod_l+0x98e>
 800702e:	2600      	movs	r6, #0
 8007030:	4f2f      	ldr	r7, [pc, #188]	@ (80070f0 <_strtod_l+0xae8>)
 8007032:	e7ac      	b.n	8006f8e <_strtod_l+0x986>
 8007034:	4630      	mov	r0, r6
 8007036:	4639      	mov	r1, r7
 8007038:	4b2d      	ldr	r3, [pc, #180]	@ (80070f0 <_strtod_l+0xae8>)
 800703a:	2200      	movs	r2, #0
 800703c:	f7f9 fa4c 	bl	80004d8 <__aeabi_dmul>
 8007040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007042:	4606      	mov	r6, r0
 8007044:	460f      	mov	r7, r1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0a1      	beq.n	8006f8e <_strtod_l+0x986>
 800704a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800704e:	e7a2      	b.n	8006f96 <_strtod_l+0x98e>
 8007050:	2200      	movs	r2, #0
 8007052:	4b26      	ldr	r3, [pc, #152]	@ (80070ec <_strtod_l+0xae4>)
 8007054:	4616      	mov	r6, r2
 8007056:	461f      	mov	r7, r3
 8007058:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800705c:	e79b      	b.n	8006f96 <_strtod_l+0x98e>
 800705e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007062:	9b08      	ldr	r3, [sp, #32]
 8007064:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1c1      	bne.n	8006ff0 <_strtod_l+0x9e8>
 800706c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007070:	0d1b      	lsrs	r3, r3, #20
 8007072:	051b      	lsls	r3, r3, #20
 8007074:	429d      	cmp	r5, r3
 8007076:	d1bb      	bne.n	8006ff0 <_strtod_l+0x9e8>
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fd8c 	bl	8000b98 <__aeabi_d2lz>
 8007080:	f7f9 f9fc 	bl	800047c <__aeabi_l2d>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	f7f9 f86c 	bl	8000168 <__aeabi_dsub>
 8007090:	460b      	mov	r3, r1
 8007092:	4602      	mov	r2, r0
 8007094:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007098:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800709c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800709e:	ea46 060a 	orr.w	r6, r6, sl
 80070a2:	431e      	orrs	r6, r3
 80070a4:	d069      	beq.n	800717a <_strtod_l+0xb72>
 80070a6:	a30a      	add	r3, pc, #40	@ (adr r3, 80070d0 <_strtod_l+0xac8>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 fc86 	bl	80009bc <__aeabi_dcmplt>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f47f accf 	bne.w	8006a54 <_strtod_l+0x44c>
 80070b6:	a308      	add	r3, pc, #32	@ (adr r3, 80070d8 <_strtod_l+0xad0>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070c0:	f7f9 fc9a 	bl	80009f8 <__aeabi_dcmpgt>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d093      	beq.n	8006ff0 <_strtod_l+0x9e8>
 80070c8:	e4c4      	b.n	8006a54 <_strtod_l+0x44c>
 80070ca:	bf00      	nop
 80070cc:	f3af 8000 	nop.w
 80070d0:	94a03595 	.word	0x94a03595
 80070d4:	3fdfffff 	.word	0x3fdfffff
 80070d8:	35afe535 	.word	0x35afe535
 80070dc:	3fe00000 	.word	0x3fe00000
 80070e0:	000fffff 	.word	0x000fffff
 80070e4:	7ff00000 	.word	0x7ff00000
 80070e8:	7fefffff 	.word	0x7fefffff
 80070ec:	3ff00000 	.word	0x3ff00000
 80070f0:	3fe00000 	.word	0x3fe00000
 80070f4:	7fe00000 	.word	0x7fe00000
 80070f8:	7c9fffff 	.word	0x7c9fffff
 80070fc:	bff00000 	.word	0xbff00000
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	b323      	cbz	r3, 800714e <_strtod_l+0xb46>
 8007104:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007108:	d821      	bhi.n	800714e <_strtod_l+0xb46>
 800710a:	a327      	add	r3, pc, #156	@ (adr r3, 80071a8 <_strtod_l+0xba0>)
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 fc5c 	bl	80009d0 <__aeabi_dcmple>
 8007118:	b1a0      	cbz	r0, 8007144 <_strtod_l+0xb3c>
 800711a:	4639      	mov	r1, r7
 800711c:	4630      	mov	r0, r6
 800711e:	f7f9 fcb3 	bl	8000a88 <__aeabi_d2uiz>
 8007122:	2801      	cmp	r0, #1
 8007124:	bf38      	it	cc
 8007126:	2001      	movcc	r0, #1
 8007128:	f7f9 f95c 	bl	80003e4 <__aeabi_ui2d>
 800712c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800712e:	4606      	mov	r6, r0
 8007130:	460f      	mov	r7, r1
 8007132:	b9fb      	cbnz	r3, 8007174 <_strtod_l+0xb6c>
 8007134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007138:	9014      	str	r0, [sp, #80]	@ 0x50
 800713a:	9315      	str	r3, [sp, #84]	@ 0x54
 800713c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007144:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007146:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800714a:	1b5b      	subs	r3, r3, r5
 800714c:	9311      	str	r3, [sp, #68]	@ 0x44
 800714e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007152:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007156:	f7ff f8ff 	bl	8006358 <__ulp>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4650      	mov	r0, sl
 8007160:	4659      	mov	r1, fp
 8007162:	f7f9 f9b9 	bl	80004d8 <__aeabi_dmul>
 8007166:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800716a:	f7f8 ffff 	bl	800016c <__adddf3>
 800716e:	4682      	mov	sl, r0
 8007170:	468b      	mov	fp, r1
 8007172:	e776      	b.n	8007062 <_strtod_l+0xa5a>
 8007174:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007178:	e7e0      	b.n	800713c <_strtod_l+0xb34>
 800717a:	a30d      	add	r3, pc, #52	@ (adr r3, 80071b0 <_strtod_l+0xba8>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 fc1c 	bl	80009bc <__aeabi_dcmplt>
 8007184:	e79e      	b.n	80070c4 <_strtod_l+0xabc>
 8007186:	2300      	movs	r3, #0
 8007188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800718a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800718c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	f7ff ba77 	b.w	8006682 <_strtod_l+0x7a>
 8007194:	2a65      	cmp	r2, #101	@ 0x65
 8007196:	f43f ab6e 	beq.w	8006876 <_strtod_l+0x26e>
 800719a:	2a45      	cmp	r2, #69	@ 0x45
 800719c:	f43f ab6b 	beq.w	8006876 <_strtod_l+0x26e>
 80071a0:	2301      	movs	r3, #1
 80071a2:	f7ff bba6 	b.w	80068f2 <_strtod_l+0x2ea>
 80071a6:	bf00      	nop
 80071a8:	ffc00000 	.word	0xffc00000
 80071ac:	41dfffff 	.word	0x41dfffff
 80071b0:	94a03595 	.word	0x94a03595
 80071b4:	3fcfffff 	.word	0x3fcfffff

080071b8 <_strtod_r>:
 80071b8:	4b01      	ldr	r3, [pc, #4]	@ (80071c0 <_strtod_r+0x8>)
 80071ba:	f7ff ba25 	b.w	8006608 <_strtod_l>
 80071be:	bf00      	nop
 80071c0:	20000078 	.word	0x20000078

080071c4 <_strtol_l.constprop.0>:
 80071c4:	2b24      	cmp	r3, #36	@ 0x24
 80071c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ca:	4686      	mov	lr, r0
 80071cc:	4690      	mov	r8, r2
 80071ce:	d801      	bhi.n	80071d4 <_strtol_l.constprop.0+0x10>
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <_strtol_l.constprop.0+0x1e>
 80071d4:	f7fd fdbe 	bl	8004d54 <__errno>
 80071d8:	2316      	movs	r3, #22
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	2000      	movs	r0, #0
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	460d      	mov	r5, r1
 80071e4:	4833      	ldr	r0, [pc, #204]	@ (80072b4 <_strtol_l.constprop.0+0xf0>)
 80071e6:	462a      	mov	r2, r5
 80071e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ec:	5d06      	ldrb	r6, [r0, r4]
 80071ee:	f016 0608 	ands.w	r6, r6, #8
 80071f2:	d1f8      	bne.n	80071e6 <_strtol_l.constprop.0+0x22>
 80071f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80071f6:	d12d      	bne.n	8007254 <_strtol_l.constprop.0+0x90>
 80071f8:	2601      	movs	r6, #1
 80071fa:	782c      	ldrb	r4, [r5, #0]
 80071fc:	1c95      	adds	r5, r2, #2
 80071fe:	f033 0210 	bics.w	r2, r3, #16
 8007202:	d109      	bne.n	8007218 <_strtol_l.constprop.0+0x54>
 8007204:	2c30      	cmp	r4, #48	@ 0x30
 8007206:	d12a      	bne.n	800725e <_strtol_l.constprop.0+0x9a>
 8007208:	782a      	ldrb	r2, [r5, #0]
 800720a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800720e:	2a58      	cmp	r2, #88	@ 0x58
 8007210:	d125      	bne.n	800725e <_strtol_l.constprop.0+0x9a>
 8007212:	2310      	movs	r3, #16
 8007214:	786c      	ldrb	r4, [r5, #1]
 8007216:	3502      	adds	r5, #2
 8007218:	2200      	movs	r2, #0
 800721a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800721e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007222:	fbbc f9f3 	udiv	r9, ip, r3
 8007226:	4610      	mov	r0, r2
 8007228:	fb03 ca19 	mls	sl, r3, r9, ip
 800722c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007230:	2f09      	cmp	r7, #9
 8007232:	d81b      	bhi.n	800726c <_strtol_l.constprop.0+0xa8>
 8007234:	463c      	mov	r4, r7
 8007236:	42a3      	cmp	r3, r4
 8007238:	dd27      	ble.n	800728a <_strtol_l.constprop.0+0xc6>
 800723a:	1c57      	adds	r7, r2, #1
 800723c:	d007      	beq.n	800724e <_strtol_l.constprop.0+0x8a>
 800723e:	4581      	cmp	r9, r0
 8007240:	d320      	bcc.n	8007284 <_strtol_l.constprop.0+0xc0>
 8007242:	d101      	bne.n	8007248 <_strtol_l.constprop.0+0x84>
 8007244:	45a2      	cmp	sl, r4
 8007246:	db1d      	blt.n	8007284 <_strtol_l.constprop.0+0xc0>
 8007248:	2201      	movs	r2, #1
 800724a:	fb00 4003 	mla	r0, r0, r3, r4
 800724e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007252:	e7eb      	b.n	800722c <_strtol_l.constprop.0+0x68>
 8007254:	2c2b      	cmp	r4, #43	@ 0x2b
 8007256:	bf04      	itt	eq
 8007258:	782c      	ldrbeq	r4, [r5, #0]
 800725a:	1c95      	addeq	r5, r2, #2
 800725c:	e7cf      	b.n	80071fe <_strtol_l.constprop.0+0x3a>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1da      	bne.n	8007218 <_strtol_l.constprop.0+0x54>
 8007262:	2c30      	cmp	r4, #48	@ 0x30
 8007264:	bf0c      	ite	eq
 8007266:	2308      	moveq	r3, #8
 8007268:	230a      	movne	r3, #10
 800726a:	e7d5      	b.n	8007218 <_strtol_l.constprop.0+0x54>
 800726c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007270:	2f19      	cmp	r7, #25
 8007272:	d801      	bhi.n	8007278 <_strtol_l.constprop.0+0xb4>
 8007274:	3c37      	subs	r4, #55	@ 0x37
 8007276:	e7de      	b.n	8007236 <_strtol_l.constprop.0+0x72>
 8007278:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800727c:	2f19      	cmp	r7, #25
 800727e:	d804      	bhi.n	800728a <_strtol_l.constprop.0+0xc6>
 8007280:	3c57      	subs	r4, #87	@ 0x57
 8007282:	e7d8      	b.n	8007236 <_strtol_l.constprop.0+0x72>
 8007284:	f04f 32ff 	mov.w	r2, #4294967295
 8007288:	e7e1      	b.n	800724e <_strtol_l.constprop.0+0x8a>
 800728a:	1c53      	adds	r3, r2, #1
 800728c:	d108      	bne.n	80072a0 <_strtol_l.constprop.0+0xdc>
 800728e:	2322      	movs	r3, #34	@ 0x22
 8007290:	4660      	mov	r0, ip
 8007292:	f8ce 3000 	str.w	r3, [lr]
 8007296:	f1b8 0f00 	cmp.w	r8, #0
 800729a:	d0a0      	beq.n	80071de <_strtol_l.constprop.0+0x1a>
 800729c:	1e69      	subs	r1, r5, #1
 800729e:	e006      	b.n	80072ae <_strtol_l.constprop.0+0xea>
 80072a0:	b106      	cbz	r6, 80072a4 <_strtol_l.constprop.0+0xe0>
 80072a2:	4240      	negs	r0, r0
 80072a4:	f1b8 0f00 	cmp.w	r8, #0
 80072a8:	d099      	beq.n	80071de <_strtol_l.constprop.0+0x1a>
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	d1f6      	bne.n	800729c <_strtol_l.constprop.0+0xd8>
 80072ae:	f8c8 1000 	str.w	r1, [r8]
 80072b2:	e794      	b.n	80071de <_strtol_l.constprop.0+0x1a>
 80072b4:	08009099 	.word	0x08009099

080072b8 <_strtol_r>:
 80072b8:	f7ff bf84 	b.w	80071c4 <_strtol_l.constprop.0>

080072bc <__ssputs_r>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	461f      	mov	r7, r3
 80072c2:	688e      	ldr	r6, [r1, #8]
 80072c4:	4682      	mov	sl, r0
 80072c6:	42be      	cmp	r6, r7
 80072c8:	460c      	mov	r4, r1
 80072ca:	4690      	mov	r8, r2
 80072cc:	680b      	ldr	r3, [r1, #0]
 80072ce:	d82d      	bhi.n	800732c <__ssputs_r+0x70>
 80072d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072d8:	d026      	beq.n	8007328 <__ssputs_r+0x6c>
 80072da:	6965      	ldr	r5, [r4, #20]
 80072dc:	6909      	ldr	r1, [r1, #16]
 80072de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072e2:	eba3 0901 	sub.w	r9, r3, r1
 80072e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072ea:	1c7b      	adds	r3, r7, #1
 80072ec:	444b      	add	r3, r9
 80072ee:	106d      	asrs	r5, r5, #1
 80072f0:	429d      	cmp	r5, r3
 80072f2:	bf38      	it	cc
 80072f4:	461d      	movcc	r5, r3
 80072f6:	0553      	lsls	r3, r2, #21
 80072f8:	d527      	bpl.n	800734a <__ssputs_r+0x8e>
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7fe fc2e 	bl	8005b5c <_malloc_r>
 8007300:	4606      	mov	r6, r0
 8007302:	b360      	cbz	r0, 800735e <__ssputs_r+0xa2>
 8007304:	464a      	mov	r2, r9
 8007306:	6921      	ldr	r1, [r4, #16]
 8007308:	f000 fd9c 	bl	8007e44 <memcpy>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	6126      	str	r6, [r4, #16]
 800731a:	444e      	add	r6, r9
 800731c:	6026      	str	r6, [r4, #0]
 800731e:	463e      	mov	r6, r7
 8007320:	6165      	str	r5, [r4, #20]
 8007322:	eba5 0509 	sub.w	r5, r5, r9
 8007326:	60a5      	str	r5, [r4, #8]
 8007328:	42be      	cmp	r6, r7
 800732a:	d900      	bls.n	800732e <__ssputs_r+0x72>
 800732c:	463e      	mov	r6, r7
 800732e:	4632      	mov	r2, r6
 8007330:	4641      	mov	r1, r8
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	f000 fd49 	bl	8007dca <memmove>
 8007338:	2000      	movs	r0, #0
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	1b9b      	subs	r3, r3, r6
 800733e:	60a3      	str	r3, [r4, #8]
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	4433      	add	r3, r6
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734a:	462a      	mov	r2, r5
 800734c:	f001 f90b 	bl	8008566 <_realloc_r>
 8007350:	4606      	mov	r6, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	d1e0      	bne.n	8007318 <__ssputs_r+0x5c>
 8007356:	4650      	mov	r0, sl
 8007358:	6921      	ldr	r1, [r4, #16]
 800735a:	f7fe fb8d 	bl	8005a78 <_free_r>
 800735e:	230c      	movs	r3, #12
 8007360:	f8ca 3000 	str.w	r3, [sl]
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f04f 30ff 	mov.w	r0, #4294967295
 800736a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736e:	81a3      	strh	r3, [r4, #12]
 8007370:	e7e9      	b.n	8007346 <__ssputs_r+0x8a>
	...

08007374 <_svfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	4698      	mov	r8, r3
 800737a:	898b      	ldrh	r3, [r1, #12]
 800737c:	4607      	mov	r7, r0
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	460d      	mov	r5, r1
 8007382:	4614      	mov	r4, r2
 8007384:	b09d      	sub	sp, #116	@ 0x74
 8007386:	d510      	bpl.n	80073aa <_svfiprintf_r+0x36>
 8007388:	690b      	ldr	r3, [r1, #16]
 800738a:	b973      	cbnz	r3, 80073aa <_svfiprintf_r+0x36>
 800738c:	2140      	movs	r1, #64	@ 0x40
 800738e:	f7fe fbe5 	bl	8005b5c <_malloc_r>
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	6128      	str	r0, [r5, #16]
 8007396:	b930      	cbnz	r0, 80073a6 <_svfiprintf_r+0x32>
 8007398:	230c      	movs	r3, #12
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	b01d      	add	sp, #116	@ 0x74
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a6:	2340      	movs	r3, #64	@ 0x40
 80073a8:	616b      	str	r3, [r5, #20]
 80073aa:	2300      	movs	r3, #0
 80073ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ae:	2320      	movs	r3, #32
 80073b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073b4:	2330      	movs	r3, #48	@ 0x30
 80073b6:	f04f 0901 	mov.w	r9, #1
 80073ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80073be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007558 <_svfiprintf_r+0x1e4>
 80073c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073c6:	4623      	mov	r3, r4
 80073c8:	469a      	mov	sl, r3
 80073ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ce:	b10a      	cbz	r2, 80073d4 <_svfiprintf_r+0x60>
 80073d0:	2a25      	cmp	r2, #37	@ 0x25
 80073d2:	d1f9      	bne.n	80073c8 <_svfiprintf_r+0x54>
 80073d4:	ebba 0b04 	subs.w	fp, sl, r4
 80073d8:	d00b      	beq.n	80073f2 <_svfiprintf_r+0x7e>
 80073da:	465b      	mov	r3, fp
 80073dc:	4622      	mov	r2, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ff6b 	bl	80072bc <__ssputs_r>
 80073e6:	3001      	adds	r0, #1
 80073e8:	f000 80a7 	beq.w	800753a <_svfiprintf_r+0x1c6>
 80073ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073ee:	445a      	add	r2, fp
 80073f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 809f 	beq.w	800753a <_svfiprintf_r+0x1c6>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007406:	f10a 0a01 	add.w	sl, sl, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	9307      	str	r3, [sp, #28]
 800740e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007412:	931a      	str	r3, [sp, #104]	@ 0x68
 8007414:	4654      	mov	r4, sl
 8007416:	2205      	movs	r2, #5
 8007418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741c:	484e      	ldr	r0, [pc, #312]	@ (8007558 <_svfiprintf_r+0x1e4>)
 800741e:	f7fd fcc6 	bl	8004dae <memchr>
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	b9d8      	cbnz	r0, 800745e <_svfiprintf_r+0xea>
 8007426:	06d0      	lsls	r0, r2, #27
 8007428:	bf44      	itt	mi
 800742a:	2320      	movmi	r3, #32
 800742c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007430:	0711      	lsls	r1, r2, #28
 8007432:	bf44      	itt	mi
 8007434:	232b      	movmi	r3, #43	@ 0x2b
 8007436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800743a:	f89a 3000 	ldrb.w	r3, [sl]
 800743e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007440:	d015      	beq.n	800746e <_svfiprintf_r+0xfa>
 8007442:	4654      	mov	r4, sl
 8007444:	2000      	movs	r0, #0
 8007446:	f04f 0c0a 	mov.w	ip, #10
 800744a:	9a07      	ldr	r2, [sp, #28]
 800744c:	4621      	mov	r1, r4
 800744e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007452:	3b30      	subs	r3, #48	@ 0x30
 8007454:	2b09      	cmp	r3, #9
 8007456:	d94b      	bls.n	80074f0 <_svfiprintf_r+0x17c>
 8007458:	b1b0      	cbz	r0, 8007488 <_svfiprintf_r+0x114>
 800745a:	9207      	str	r2, [sp, #28]
 800745c:	e014      	b.n	8007488 <_svfiprintf_r+0x114>
 800745e:	eba0 0308 	sub.w	r3, r0, r8
 8007462:	fa09 f303 	lsl.w	r3, r9, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	46a2      	mov	sl, r4
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	e7d2      	b.n	8007414 <_svfiprintf_r+0xa0>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	1d19      	adds	r1, r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	9103      	str	r1, [sp, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfbb      	ittet	lt
 800747a:	425b      	neglt	r3, r3
 800747c:	f042 0202 	orrlt.w	r2, r2, #2
 8007480:	9307      	strge	r3, [sp, #28]
 8007482:	9307      	strlt	r3, [sp, #28]
 8007484:	bfb8      	it	lt
 8007486:	9204      	strlt	r2, [sp, #16]
 8007488:	7823      	ldrb	r3, [r4, #0]
 800748a:	2b2e      	cmp	r3, #46	@ 0x2e
 800748c:	d10a      	bne.n	80074a4 <_svfiprintf_r+0x130>
 800748e:	7863      	ldrb	r3, [r4, #1]
 8007490:	2b2a      	cmp	r3, #42	@ 0x2a
 8007492:	d132      	bne.n	80074fa <_svfiprintf_r+0x186>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	3402      	adds	r4, #2
 8007498:	1d1a      	adds	r2, r3, #4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	9203      	str	r2, [sp, #12]
 800749e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800755c <_svfiprintf_r+0x1e8>
 80074a8:	2203      	movs	r2, #3
 80074aa:	4650      	mov	r0, sl
 80074ac:	7821      	ldrb	r1, [r4, #0]
 80074ae:	f7fd fc7e 	bl	8004dae <memchr>
 80074b2:	b138      	cbz	r0, 80074c4 <_svfiprintf_r+0x150>
 80074b4:	2240      	movs	r2, #64	@ 0x40
 80074b6:	9b04      	ldr	r3, [sp, #16]
 80074b8:	eba0 000a 	sub.w	r0, r0, sl
 80074bc:	4082      	lsls	r2, r0
 80074be:	4313      	orrs	r3, r2
 80074c0:	3401      	adds	r4, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	2206      	movs	r2, #6
 80074ca:	4825      	ldr	r0, [pc, #148]	@ (8007560 <_svfiprintf_r+0x1ec>)
 80074cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074d0:	f7fd fc6d 	bl	8004dae <memchr>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d036      	beq.n	8007546 <_svfiprintf_r+0x1d2>
 80074d8:	4b22      	ldr	r3, [pc, #136]	@ (8007564 <_svfiprintf_r+0x1f0>)
 80074da:	bb1b      	cbnz	r3, 8007524 <_svfiprintf_r+0x1b0>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	3307      	adds	r3, #7
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ea:	4433      	add	r3, r6
 80074ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ee:	e76a      	b.n	80073c6 <_svfiprintf_r+0x52>
 80074f0:	460c      	mov	r4, r1
 80074f2:	2001      	movs	r0, #1
 80074f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f8:	e7a8      	b.n	800744c <_svfiprintf_r+0xd8>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f04f 0c0a 	mov.w	ip, #10
 8007500:	4619      	mov	r1, r3
 8007502:	3401      	adds	r4, #1
 8007504:	9305      	str	r3, [sp, #20]
 8007506:	4620      	mov	r0, r4
 8007508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750c:	3a30      	subs	r2, #48	@ 0x30
 800750e:	2a09      	cmp	r2, #9
 8007510:	d903      	bls.n	800751a <_svfiprintf_r+0x1a6>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0c6      	beq.n	80074a4 <_svfiprintf_r+0x130>
 8007516:	9105      	str	r1, [sp, #20]
 8007518:	e7c4      	b.n	80074a4 <_svfiprintf_r+0x130>
 800751a:	4604      	mov	r4, r0
 800751c:	2301      	movs	r3, #1
 800751e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007522:	e7f0      	b.n	8007506 <_svfiprintf_r+0x192>
 8007524:	ab03      	add	r3, sp, #12
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	462a      	mov	r2, r5
 800752a:	4638      	mov	r0, r7
 800752c:	4b0e      	ldr	r3, [pc, #56]	@ (8007568 <_svfiprintf_r+0x1f4>)
 800752e:	a904      	add	r1, sp, #16
 8007530:	f7fc fc9e 	bl	8003e70 <_printf_float>
 8007534:	1c42      	adds	r2, r0, #1
 8007536:	4606      	mov	r6, r0
 8007538:	d1d6      	bne.n	80074e8 <_svfiprintf_r+0x174>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	065b      	lsls	r3, r3, #25
 800753e:	f53f af2d 	bmi.w	800739c <_svfiprintf_r+0x28>
 8007542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007544:	e72c      	b.n	80073a0 <_svfiprintf_r+0x2c>
 8007546:	ab03      	add	r3, sp, #12
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	462a      	mov	r2, r5
 800754c:	4638      	mov	r0, r7
 800754e:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <_svfiprintf_r+0x1f4>)
 8007550:	a904      	add	r1, sp, #16
 8007552:	f7fc ff2b 	bl	80043ac <_printf_i>
 8007556:	e7ed      	b.n	8007534 <_svfiprintf_r+0x1c0>
 8007558:	08009199 	.word	0x08009199
 800755c:	0800919f 	.word	0x0800919f
 8007560:	080091a3 	.word	0x080091a3
 8007564:	08003e71 	.word	0x08003e71
 8007568:	080072bd 	.word	0x080072bd

0800756c <_sungetc_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	1c4b      	adds	r3, r1, #1
 8007570:	4614      	mov	r4, r2
 8007572:	d103      	bne.n	800757c <_sungetc_r+0x10>
 8007574:	f04f 35ff 	mov.w	r5, #4294967295
 8007578:	4628      	mov	r0, r5
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	8993      	ldrh	r3, [r2, #12]
 800757e:	b2cd      	uxtb	r5, r1
 8007580:	f023 0320 	bic.w	r3, r3, #32
 8007584:	8193      	strh	r3, [r2, #12]
 8007586:	6853      	ldr	r3, [r2, #4]
 8007588:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800758a:	b18a      	cbz	r2, 80075b0 <_sungetc_r+0x44>
 800758c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800758e:	429a      	cmp	r2, r3
 8007590:	dd08      	ble.n	80075a4 <_sungetc_r+0x38>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	1e5a      	subs	r2, r3, #1
 8007596:	6022      	str	r2, [r4, #0]
 8007598:	f803 5c01 	strb.w	r5, [r3, #-1]
 800759c:	6863      	ldr	r3, [r4, #4]
 800759e:	3301      	adds	r3, #1
 80075a0:	6063      	str	r3, [r4, #4]
 80075a2:	e7e9      	b.n	8007578 <_sungetc_r+0xc>
 80075a4:	4621      	mov	r1, r4
 80075a6:	f000 fbd8 	bl	8007d5a <__submore>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0f1      	beq.n	8007592 <_sungetc_r+0x26>
 80075ae:	e7e1      	b.n	8007574 <_sungetc_r+0x8>
 80075b0:	6921      	ldr	r1, [r4, #16]
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	b141      	cbz	r1, 80075c8 <_sungetc_r+0x5c>
 80075b6:	4291      	cmp	r1, r2
 80075b8:	d206      	bcs.n	80075c8 <_sungetc_r+0x5c>
 80075ba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80075be:	42a9      	cmp	r1, r5
 80075c0:	d102      	bne.n	80075c8 <_sungetc_r+0x5c>
 80075c2:	3a01      	subs	r2, #1
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	e7ea      	b.n	800759e <_sungetc_r+0x32>
 80075c8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80075cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075d2:	2303      	movs	r3, #3
 80075d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80075d6:	4623      	mov	r3, r4
 80075d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	2301      	movs	r3, #1
 80075e0:	e7de      	b.n	80075a0 <_sungetc_r+0x34>

080075e2 <__ssrefill_r>:
 80075e2:	b510      	push	{r4, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80075e8:	b169      	cbz	r1, 8007606 <__ssrefill_r+0x24>
 80075ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075ee:	4299      	cmp	r1, r3
 80075f0:	d001      	beq.n	80075f6 <__ssrefill_r+0x14>
 80075f2:	f7fe fa41 	bl	8005a78 <_free_r>
 80075f6:	2000      	movs	r0, #0
 80075f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80075fc:	6063      	str	r3, [r4, #4]
 80075fe:	b113      	cbz	r3, 8007606 <__ssrefill_r+0x24>
 8007600:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	bd10      	pop	{r4, pc}
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	2300      	movs	r3, #0
 8007610:	6063      	str	r3, [r4, #4]
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f043 0320 	orr.w	r3, r3, #32
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	e7f3      	b.n	8007604 <__ssrefill_r+0x22>

0800761c <__ssvfiscanf_r>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	460c      	mov	r4, r1
 8007622:	2100      	movs	r1, #0
 8007624:	4606      	mov	r6, r0
 8007626:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800762a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800762e:	49aa      	ldr	r1, [pc, #680]	@ (80078d8 <__ssvfiscanf_r+0x2bc>)
 8007630:	f10d 0804 	add.w	r8, sp, #4
 8007634:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007636:	49a9      	ldr	r1, [pc, #676]	@ (80078dc <__ssvfiscanf_r+0x2c0>)
 8007638:	4fa9      	ldr	r7, [pc, #676]	@ (80078e0 <__ssvfiscanf_r+0x2c4>)
 800763a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800763e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	7813      	ldrb	r3, [r2, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8159 	beq.w	80078fc <__ssvfiscanf_r+0x2e0>
 800764a:	5cf9      	ldrb	r1, [r7, r3]
 800764c:	1c55      	adds	r5, r2, #1
 800764e:	f011 0108 	ands.w	r1, r1, #8
 8007652:	d019      	beq.n	8007688 <__ssvfiscanf_r+0x6c>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd0f      	ble.n	800767a <__ssvfiscanf_r+0x5e>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	5cba      	ldrb	r2, [r7, r2]
 8007660:	0712      	lsls	r2, r2, #28
 8007662:	d401      	bmi.n	8007668 <__ssvfiscanf_r+0x4c>
 8007664:	462a      	mov	r2, r5
 8007666:	e7ec      	b.n	8007642 <__ssvfiscanf_r+0x26>
 8007668:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800766a:	3301      	adds	r3, #1
 800766c:	3201      	adds	r2, #1
 800766e:	9245      	str	r2, [sp, #276]	@ 0x114
 8007670:	6862      	ldr	r2, [r4, #4]
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	3a01      	subs	r2, #1
 8007676:	6062      	str	r2, [r4, #4]
 8007678:	e7ec      	b.n	8007654 <__ssvfiscanf_r+0x38>
 800767a:	4621      	mov	r1, r4
 800767c:	4630      	mov	r0, r6
 800767e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007680:	4798      	blx	r3
 8007682:	2800      	cmp	r0, #0
 8007684:	d0e9      	beq.n	800765a <__ssvfiscanf_r+0x3e>
 8007686:	e7ed      	b.n	8007664 <__ssvfiscanf_r+0x48>
 8007688:	2b25      	cmp	r3, #37	@ 0x25
 800768a:	d012      	beq.n	80076b2 <__ssvfiscanf_r+0x96>
 800768c:	4699      	mov	r9, r3
 800768e:	6863      	ldr	r3, [r4, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f340 8094 	ble.w	80077be <__ssvfiscanf_r+0x1a2>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	7813      	ldrb	r3, [r2, #0]
 800769a:	454b      	cmp	r3, r9
 800769c:	f040 812e 	bne.w	80078fc <__ssvfiscanf_r+0x2e0>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	3201      	adds	r2, #1
 80076a4:	3b01      	subs	r3, #1
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	9345      	str	r3, [sp, #276]	@ 0x114
 80076b0:	e7d8      	b.n	8007664 <__ssvfiscanf_r+0x48>
 80076b2:	9141      	str	r1, [sp, #260]	@ 0x104
 80076b4:	9143      	str	r1, [sp, #268]	@ 0x10c
 80076b6:	7853      	ldrb	r3, [r2, #1]
 80076b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ba:	bf04      	itt	eq
 80076bc:	2310      	moveq	r3, #16
 80076be:	1c95      	addeq	r5, r2, #2
 80076c0:	f04f 020a 	mov.w	r2, #10
 80076c4:	bf08      	it	eq
 80076c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80076c8:	46a9      	mov	r9, r5
 80076ca:	f819 1b01 	ldrb.w	r1, [r9], #1
 80076ce:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80076d2:	2b09      	cmp	r3, #9
 80076d4:	d91e      	bls.n	8007714 <__ssvfiscanf_r+0xf8>
 80076d6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80078e4 <__ssvfiscanf_r+0x2c8>
 80076da:	2203      	movs	r2, #3
 80076dc:	4650      	mov	r0, sl
 80076de:	f7fd fb66 	bl	8004dae <memchr>
 80076e2:	b138      	cbz	r0, 80076f4 <__ssvfiscanf_r+0xd8>
 80076e4:	2301      	movs	r3, #1
 80076e6:	464d      	mov	r5, r9
 80076e8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80076ea:	eba0 000a 	sub.w	r0, r0, sl
 80076ee:	4083      	lsls	r3, r0
 80076f0:	4313      	orrs	r3, r2
 80076f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80076f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076f8:	2b78      	cmp	r3, #120	@ 0x78
 80076fa:	d806      	bhi.n	800770a <__ssvfiscanf_r+0xee>
 80076fc:	2b57      	cmp	r3, #87	@ 0x57
 80076fe:	d810      	bhi.n	8007722 <__ssvfiscanf_r+0x106>
 8007700:	2b25      	cmp	r3, #37	@ 0x25
 8007702:	d0c3      	beq.n	800768c <__ssvfiscanf_r+0x70>
 8007704:	d856      	bhi.n	80077b4 <__ssvfiscanf_r+0x198>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d064      	beq.n	80077d4 <__ssvfiscanf_r+0x1b8>
 800770a:	2303      	movs	r3, #3
 800770c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800770e:	230a      	movs	r3, #10
 8007710:	9342      	str	r3, [sp, #264]	@ 0x108
 8007712:	e077      	b.n	8007804 <__ssvfiscanf_r+0x1e8>
 8007714:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007716:	464d      	mov	r5, r9
 8007718:	fb02 1103 	mla	r1, r2, r3, r1
 800771c:	3930      	subs	r1, #48	@ 0x30
 800771e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007720:	e7d2      	b.n	80076c8 <__ssvfiscanf_r+0xac>
 8007722:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007726:	2a20      	cmp	r2, #32
 8007728:	d8ef      	bhi.n	800770a <__ssvfiscanf_r+0xee>
 800772a:	a101      	add	r1, pc, #4	@ (adr r1, 8007730 <__ssvfiscanf_r+0x114>)
 800772c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007730:	080077e3 	.word	0x080077e3
 8007734:	0800770b 	.word	0x0800770b
 8007738:	0800770b 	.word	0x0800770b
 800773c:	0800783d 	.word	0x0800783d
 8007740:	0800770b 	.word	0x0800770b
 8007744:	0800770b 	.word	0x0800770b
 8007748:	0800770b 	.word	0x0800770b
 800774c:	0800770b 	.word	0x0800770b
 8007750:	0800770b 	.word	0x0800770b
 8007754:	0800770b 	.word	0x0800770b
 8007758:	0800770b 	.word	0x0800770b
 800775c:	08007853 	.word	0x08007853
 8007760:	08007839 	.word	0x08007839
 8007764:	080077bb 	.word	0x080077bb
 8007768:	080077bb 	.word	0x080077bb
 800776c:	080077bb 	.word	0x080077bb
 8007770:	0800770b 	.word	0x0800770b
 8007774:	080077f5 	.word	0x080077f5
 8007778:	0800770b 	.word	0x0800770b
 800777c:	0800770b 	.word	0x0800770b
 8007780:	0800770b 	.word	0x0800770b
 8007784:	0800770b 	.word	0x0800770b
 8007788:	08007863 	.word	0x08007863
 800778c:	080077fd 	.word	0x080077fd
 8007790:	080077db 	.word	0x080077db
 8007794:	0800770b 	.word	0x0800770b
 8007798:	0800770b 	.word	0x0800770b
 800779c:	0800785f 	.word	0x0800785f
 80077a0:	0800770b 	.word	0x0800770b
 80077a4:	08007839 	.word	0x08007839
 80077a8:	0800770b 	.word	0x0800770b
 80077ac:	0800770b 	.word	0x0800770b
 80077b0:	080077e3 	.word	0x080077e3
 80077b4:	3b45      	subs	r3, #69	@ 0x45
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d8a7      	bhi.n	800770a <__ssvfiscanf_r+0xee>
 80077ba:	2305      	movs	r3, #5
 80077bc:	e021      	b.n	8007802 <__ssvfiscanf_r+0x1e6>
 80077be:	4621      	mov	r1, r4
 80077c0:	4630      	mov	r0, r6
 80077c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80077c4:	4798      	blx	r3
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f af65 	beq.w	8007696 <__ssvfiscanf_r+0x7a>
 80077cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 808c 	bne.w	80078ec <__ssvfiscanf_r+0x2d0>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e08c      	b.n	80078f4 <__ssvfiscanf_r+0x2d8>
 80077da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80077dc:	f042 0220 	orr.w	r2, r2, #32
 80077e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80077e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80077e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80077ea:	2210      	movs	r2, #16
 80077ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80077ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80077f0:	d902      	bls.n	80077f8 <__ssvfiscanf_r+0x1dc>
 80077f2:	e005      	b.n	8007800 <__ssvfiscanf_r+0x1e4>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80077f8:	2303      	movs	r3, #3
 80077fa:	e002      	b.n	8007802 <__ssvfiscanf_r+0x1e6>
 80077fc:	2308      	movs	r3, #8
 80077fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8007800:	2304      	movs	r3, #4
 8007802:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd39      	ble.n	800787e <__ssvfiscanf_r+0x262>
 800780a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800780c:	0659      	lsls	r1, r3, #25
 800780e:	d404      	bmi.n	800781a <__ssvfiscanf_r+0x1fe>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	5cba      	ldrb	r2, [r7, r2]
 8007816:	0712      	lsls	r2, r2, #28
 8007818:	d438      	bmi.n	800788c <__ssvfiscanf_r+0x270>
 800781a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800781c:	2b02      	cmp	r3, #2
 800781e:	dc47      	bgt.n	80078b0 <__ssvfiscanf_r+0x294>
 8007820:	466b      	mov	r3, sp
 8007822:	4622      	mov	r2, r4
 8007824:	4630      	mov	r0, r6
 8007826:	a941      	add	r1, sp, #260	@ 0x104
 8007828:	f000 f86a 	bl	8007900 <_scanf_chars>
 800782c:	2801      	cmp	r0, #1
 800782e:	d065      	beq.n	80078fc <__ssvfiscanf_r+0x2e0>
 8007830:	2802      	cmp	r0, #2
 8007832:	f47f af17 	bne.w	8007664 <__ssvfiscanf_r+0x48>
 8007836:	e7c9      	b.n	80077cc <__ssvfiscanf_r+0x1b0>
 8007838:	220a      	movs	r2, #10
 800783a:	e7d7      	b.n	80077ec <__ssvfiscanf_r+0x1d0>
 800783c:	4629      	mov	r1, r5
 800783e:	4640      	mov	r0, r8
 8007840:	f000 fa52 	bl	8007ce8 <__sccl>
 8007844:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007846:	4605      	mov	r5, r0
 8007848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800784c:	9341      	str	r3, [sp, #260]	@ 0x104
 800784e:	2301      	movs	r3, #1
 8007850:	e7d7      	b.n	8007802 <__ssvfiscanf_r+0x1e6>
 8007852:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007858:	9341      	str	r3, [sp, #260]	@ 0x104
 800785a:	2300      	movs	r3, #0
 800785c:	e7d1      	b.n	8007802 <__ssvfiscanf_r+0x1e6>
 800785e:	2302      	movs	r3, #2
 8007860:	e7cf      	b.n	8007802 <__ssvfiscanf_r+0x1e6>
 8007862:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007864:	06c3      	lsls	r3, r0, #27
 8007866:	f53f aefd 	bmi.w	8007664 <__ssvfiscanf_r+0x48>
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800786e:	1d19      	adds	r1, r3, #4
 8007870:	9100      	str	r1, [sp, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	07c0      	lsls	r0, r0, #31
 8007876:	bf4c      	ite	mi
 8007878:	801a      	strhmi	r2, [r3, #0]
 800787a:	601a      	strpl	r2, [r3, #0]
 800787c:	e6f2      	b.n	8007664 <__ssvfiscanf_r+0x48>
 800787e:	4621      	mov	r1, r4
 8007880:	4630      	mov	r0, r6
 8007882:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007884:	4798      	blx	r3
 8007886:	2800      	cmp	r0, #0
 8007888:	d0bf      	beq.n	800780a <__ssvfiscanf_r+0x1ee>
 800788a:	e79f      	b.n	80077cc <__ssvfiscanf_r+0x1b0>
 800788c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800788e:	3201      	adds	r2, #1
 8007890:	9245      	str	r2, [sp, #276]	@ 0x114
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	3a01      	subs	r2, #1
 8007896:	2a00      	cmp	r2, #0
 8007898:	6062      	str	r2, [r4, #4]
 800789a:	dd02      	ble.n	80078a2 <__ssvfiscanf_r+0x286>
 800789c:	3301      	adds	r3, #1
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	e7b6      	b.n	8007810 <__ssvfiscanf_r+0x1f4>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4630      	mov	r0, r6
 80078a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80078a8:	4798      	blx	r3
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0b0      	beq.n	8007810 <__ssvfiscanf_r+0x1f4>
 80078ae:	e78d      	b.n	80077cc <__ssvfiscanf_r+0x1b0>
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	dc06      	bgt.n	80078c2 <__ssvfiscanf_r+0x2a6>
 80078b4:	466b      	mov	r3, sp
 80078b6:	4622      	mov	r2, r4
 80078b8:	4630      	mov	r0, r6
 80078ba:	a941      	add	r1, sp, #260	@ 0x104
 80078bc:	f000 f87a 	bl	80079b4 <_scanf_i>
 80078c0:	e7b4      	b.n	800782c <__ssvfiscanf_r+0x210>
 80078c2:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <__ssvfiscanf_r+0x2cc>)
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f43f aecd 	beq.w	8007664 <__ssvfiscanf_r+0x48>
 80078ca:	466b      	mov	r3, sp
 80078cc:	4622      	mov	r2, r4
 80078ce:	4630      	mov	r0, r6
 80078d0:	a941      	add	r1, sp, #260	@ 0x104
 80078d2:	f7fc fe8b 	bl	80045ec <_scanf_float>
 80078d6:	e7a9      	b.n	800782c <__ssvfiscanf_r+0x210>
 80078d8:	0800756d 	.word	0x0800756d
 80078dc:	080075e3 	.word	0x080075e3
 80078e0:	08009099 	.word	0x08009099
 80078e4:	0800919f 	.word	0x0800919f
 80078e8:	080045ed 	.word	0x080045ed
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	065b      	lsls	r3, r3, #25
 80078f0:	f53f af70 	bmi.w	80077d4 <__ssvfiscanf_r+0x1b8>
 80078f4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80078f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80078fe:	e7f9      	b.n	80078f4 <__ssvfiscanf_r+0x2d8>

08007900 <_scanf_chars>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	4615      	mov	r5, r2
 8007906:	688a      	ldr	r2, [r1, #8]
 8007908:	4680      	mov	r8, r0
 800790a:	460c      	mov	r4, r1
 800790c:	b932      	cbnz	r2, 800791c <_scanf_chars+0x1c>
 800790e:	698a      	ldr	r2, [r1, #24]
 8007910:	2a00      	cmp	r2, #0
 8007912:	bf14      	ite	ne
 8007914:	f04f 32ff 	movne.w	r2, #4294967295
 8007918:	2201      	moveq	r2, #1
 800791a:	608a      	str	r2, [r1, #8]
 800791c:	2700      	movs	r7, #0
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80079b0 <_scanf_chars+0xb0>
 8007924:	06d1      	lsls	r1, r2, #27
 8007926:	bf5f      	itttt	pl
 8007928:	681a      	ldrpl	r2, [r3, #0]
 800792a:	1d11      	addpl	r1, r2, #4
 800792c:	6019      	strpl	r1, [r3, #0]
 800792e:	6816      	ldrpl	r6, [r2, #0]
 8007930:	69a0      	ldr	r0, [r4, #24]
 8007932:	b188      	cbz	r0, 8007958 <_scanf_chars+0x58>
 8007934:	2801      	cmp	r0, #1
 8007936:	d107      	bne.n	8007948 <_scanf_chars+0x48>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	6963      	ldr	r3, [r4, #20]
 800793e:	5c9b      	ldrb	r3, [r3, r2]
 8007940:	b953      	cbnz	r3, 8007958 <_scanf_chars+0x58>
 8007942:	2f00      	cmp	r7, #0
 8007944:	d031      	beq.n	80079aa <_scanf_chars+0xaa>
 8007946:	e022      	b.n	800798e <_scanf_chars+0x8e>
 8007948:	2802      	cmp	r0, #2
 800794a:	d120      	bne.n	800798e <_scanf_chars+0x8e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007954:	071b      	lsls	r3, r3, #28
 8007956:	d41a      	bmi.n	800798e <_scanf_chars+0x8e>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	3701      	adds	r7, #1
 800795c:	06da      	lsls	r2, r3, #27
 800795e:	bf5e      	ittt	pl
 8007960:	682b      	ldrpl	r3, [r5, #0]
 8007962:	781b      	ldrbpl	r3, [r3, #0]
 8007964:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007968:	682a      	ldr	r2, [r5, #0]
 800796a:	686b      	ldr	r3, [r5, #4]
 800796c:	3201      	adds	r2, #1
 800796e:	602a      	str	r2, [r5, #0]
 8007970:	68a2      	ldr	r2, [r4, #8]
 8007972:	3b01      	subs	r3, #1
 8007974:	3a01      	subs	r2, #1
 8007976:	606b      	str	r3, [r5, #4]
 8007978:	60a2      	str	r2, [r4, #8]
 800797a:	b142      	cbz	r2, 800798e <_scanf_chars+0x8e>
 800797c:	2b00      	cmp	r3, #0
 800797e:	dcd7      	bgt.n	8007930 <_scanf_chars+0x30>
 8007980:	4629      	mov	r1, r5
 8007982:	4640      	mov	r0, r8
 8007984:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007988:	4798      	blx	r3
 800798a:	2800      	cmp	r0, #0
 800798c:	d0d0      	beq.n	8007930 <_scanf_chars+0x30>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	f013 0310 	ands.w	r3, r3, #16
 8007994:	d105      	bne.n	80079a2 <_scanf_chars+0xa2>
 8007996:	68e2      	ldr	r2, [r4, #12]
 8007998:	3201      	adds	r2, #1
 800799a:	60e2      	str	r2, [r4, #12]
 800799c:	69a2      	ldr	r2, [r4, #24]
 800799e:	b102      	cbz	r2, 80079a2 <_scanf_chars+0xa2>
 80079a0:	7033      	strb	r3, [r6, #0]
 80079a2:	2000      	movs	r0, #0
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	443b      	add	r3, r7
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ae:	bf00      	nop
 80079b0:	08009099 	.word	0x08009099

080079b4 <_scanf_i>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	460c      	mov	r4, r1
 80079ba:	4698      	mov	r8, r3
 80079bc:	4b72      	ldr	r3, [pc, #456]	@ (8007b88 <_scanf_i+0x1d4>)
 80079be:	b087      	sub	sp, #28
 80079c0:	4682      	mov	sl, r0
 80079c2:	4616      	mov	r6, r2
 80079c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079c8:	ab03      	add	r3, sp, #12
 80079ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80079ce:	4b6f      	ldr	r3, [pc, #444]	@ (8007b8c <_scanf_i+0x1d8>)
 80079d0:	69a1      	ldr	r1, [r4, #24]
 80079d2:	4a6f      	ldr	r2, [pc, #444]	@ (8007b90 <_scanf_i+0x1dc>)
 80079d4:	4627      	mov	r7, r4
 80079d6:	2903      	cmp	r1, #3
 80079d8:	bf08      	it	eq
 80079da:	461a      	moveq	r2, r3
 80079dc:	68a3      	ldr	r3, [r4, #8]
 80079de:	9201      	str	r2, [sp, #4]
 80079e0:	1e5a      	subs	r2, r3, #1
 80079e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80079e6:	bf81      	itttt	hi
 80079e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80079ec:	eb03 0905 	addhi.w	r9, r3, r5
 80079f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80079f4:	60a3      	strhi	r3, [r4, #8]
 80079f6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80079fa:	bf98      	it	ls
 80079fc:	f04f 0900 	movls.w	r9, #0
 8007a00:	463d      	mov	r5, r7
 8007a02:	f04f 0b00 	mov.w	fp, #0
 8007a06:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	6831      	ldr	r1, [r6, #0]
 8007a0e:	ab03      	add	r3, sp, #12
 8007a10:	2202      	movs	r2, #2
 8007a12:	7809      	ldrb	r1, [r1, #0]
 8007a14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007a18:	f7fd f9c9 	bl	8004dae <memchr>
 8007a1c:	b328      	cbz	r0, 8007a6a <_scanf_i+0xb6>
 8007a1e:	f1bb 0f01 	cmp.w	fp, #1
 8007a22:	d159      	bne.n	8007ad8 <_scanf_i+0x124>
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	b92a      	cbnz	r2, 8007a34 <_scanf_i+0x80>
 8007a28:	2108      	movs	r1, #8
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	6061      	str	r1, [r4, #4]
 8007a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a32:	6022      	str	r2, [r4, #0]
 8007a34:	6822      	ldr	r2, [r4, #0]
 8007a36:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	68a2      	ldr	r2, [r4, #8]
 8007a3e:	1e51      	subs	r1, r2, #1
 8007a40:	60a1      	str	r1, [r4, #8]
 8007a42:	b192      	cbz	r2, 8007a6a <_scanf_i+0xb6>
 8007a44:	6832      	ldr	r2, [r6, #0]
 8007a46:	1c51      	adds	r1, r2, #1
 8007a48:	6031      	str	r1, [r6, #0]
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	f805 2b01 	strb.w	r2, [r5], #1
 8007a50:	6872      	ldr	r2, [r6, #4]
 8007a52:	3a01      	subs	r2, #1
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	6072      	str	r2, [r6, #4]
 8007a58:	dc07      	bgt.n	8007a6a <_scanf_i+0xb6>
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007a62:	4790      	blx	r2
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f040 8085 	bne.w	8007b74 <_scanf_i+0x1c0>
 8007a6a:	f10b 0b01 	add.w	fp, fp, #1
 8007a6e:	f1bb 0f03 	cmp.w	fp, #3
 8007a72:	d1cb      	bne.n	8007a0c <_scanf_i+0x58>
 8007a74:	6863      	ldr	r3, [r4, #4]
 8007a76:	b90b      	cbnz	r3, 8007a7c <_scanf_i+0xc8>
 8007a78:	230a      	movs	r3, #10
 8007a7a:	6063      	str	r3, [r4, #4]
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	4945      	ldr	r1, [pc, #276]	@ (8007b94 <_scanf_i+0x1e0>)
 8007a80:	6960      	ldr	r0, [r4, #20]
 8007a82:	1ac9      	subs	r1, r1, r3
 8007a84:	f000 f930 	bl	8007ce8 <__sccl>
 8007a88:	f04f 0b00 	mov.w	fp, #0
 8007a8c:	68a3      	ldr	r3, [r4, #8]
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d03d      	beq.n	8007b10 <_scanf_i+0x15c>
 8007a94:	6831      	ldr	r1, [r6, #0]
 8007a96:	6960      	ldr	r0, [r4, #20]
 8007a98:	f891 c000 	ldrb.w	ip, [r1]
 8007a9c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d035      	beq.n	8007b10 <_scanf_i+0x15c>
 8007aa4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007aa8:	d124      	bne.n	8007af4 <_scanf_i+0x140>
 8007aaa:	0510      	lsls	r0, r2, #20
 8007aac:	d522      	bpl.n	8007af4 <_scanf_i+0x140>
 8007aae:	f10b 0b01 	add.w	fp, fp, #1
 8007ab2:	f1b9 0f00 	cmp.w	r9, #0
 8007ab6:	d003      	beq.n	8007ac0 <_scanf_i+0x10c>
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	6873      	ldr	r3, [r6, #4]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	6073      	str	r3, [r6, #4]
 8007ac8:	dd1b      	ble.n	8007b02 <_scanf_i+0x14e>
 8007aca:	6833      	ldr	r3, [r6, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	68a3      	ldr	r3, [r4, #8]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	e7d9      	b.n	8007a8c <_scanf_i+0xd8>
 8007ad8:	f1bb 0f02 	cmp.w	fp, #2
 8007adc:	d1ae      	bne.n	8007a3c <_scanf_i+0x88>
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007ae4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007ae8:	d1bf      	bne.n	8007a6a <_scanf_i+0xb6>
 8007aea:	2110      	movs	r1, #16
 8007aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007af0:	6061      	str	r1, [r4, #4]
 8007af2:	e7a2      	b.n	8007a3a <_scanf_i+0x86>
 8007af4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	780b      	ldrb	r3, [r1, #0]
 8007afc:	f805 3b01 	strb.w	r3, [r5], #1
 8007b00:	e7de      	b.n	8007ac0 <_scanf_i+0x10c>
 8007b02:	4631      	mov	r1, r6
 8007b04:	4650      	mov	r0, sl
 8007b06:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b0a:	4798      	blx	r3
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d0df      	beq.n	8007ad0 <_scanf_i+0x11c>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	05d9      	lsls	r1, r3, #23
 8007b14:	d50d      	bpl.n	8007b32 <_scanf_i+0x17e>
 8007b16:	42bd      	cmp	r5, r7
 8007b18:	d909      	bls.n	8007b2e <_scanf_i+0x17a>
 8007b1a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b1e:	4632      	mov	r2, r6
 8007b20:	4650      	mov	r0, sl
 8007b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b26:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b2a:	4798      	blx	r3
 8007b2c:	464d      	mov	r5, r9
 8007b2e:	42bd      	cmp	r5, r7
 8007b30:	d028      	beq.n	8007b84 <_scanf_i+0x1d0>
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	f012 0210 	ands.w	r2, r2, #16
 8007b38:	d113      	bne.n	8007b62 <_scanf_i+0x1ae>
 8007b3a:	702a      	strb	r2, [r5, #0]
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	4650      	mov	r0, sl
 8007b42:	9e01      	ldr	r6, [sp, #4]
 8007b44:	47b0      	blx	r6
 8007b46:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4a:	6821      	ldr	r1, [r4, #0]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	f8c8 2000 	str.w	r2, [r8]
 8007b52:	f011 0f20 	tst.w	r1, #32
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	d00f      	beq.n	8007b7a <_scanf_i+0x1c6>
 8007b5a:	6018      	str	r0, [r3, #0]
 8007b5c:	68e3      	ldr	r3, [r4, #12]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	60e3      	str	r3, [r4, #12]
 8007b62:	2000      	movs	r0, #0
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	1bed      	subs	r5, r5, r7
 8007b68:	445d      	add	r5, fp
 8007b6a:	442b      	add	r3, r5
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	b007      	add	sp, #28
 8007b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b74:	f04f 0b00 	mov.w	fp, #0
 8007b78:	e7ca      	b.n	8007b10 <_scanf_i+0x15c>
 8007b7a:	07ca      	lsls	r2, r1, #31
 8007b7c:	bf4c      	ite	mi
 8007b7e:	8018      	strhmi	r0, [r3, #0]
 8007b80:	6018      	strpl	r0, [r3, #0]
 8007b82:	e7eb      	b.n	8007b5c <_scanf_i+0x1a8>
 8007b84:	2001      	movs	r0, #1
 8007b86:	e7f2      	b.n	8007b6e <_scanf_i+0x1ba>
 8007b88:	08008dbc 	.word	0x08008dbc
 8007b8c:	080072b9 	.word	0x080072b9
 8007b90:	080086a1 	.word	0x080086a1
 8007b94:	080091ba 	.word	0x080091ba

08007b98 <__sflush_r>:
 8007b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	0716      	lsls	r6, r2, #28
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	d454      	bmi.n	8007c50 <__sflush_r+0xb8>
 8007ba6:	684b      	ldr	r3, [r1, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc02      	bgt.n	8007bb2 <__sflush_r+0x1a>
 8007bac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd48      	ble.n	8007c44 <__sflush_r+0xac>
 8007bb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	d045      	beq.n	8007c44 <__sflush_r+0xac>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bbe:	682f      	ldr	r7, [r5, #0]
 8007bc0:	6a21      	ldr	r1, [r4, #32]
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	d030      	beq.n	8007c28 <__sflush_r+0x90>
 8007bc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	0759      	lsls	r1, r3, #29
 8007bcc:	d505      	bpl.n	8007bda <__sflush_r+0x42>
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	1ad2      	subs	r2, r2, r3
 8007bd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bd4:	b10b      	cbz	r3, 8007bda <__sflush_r+0x42>
 8007bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bd8:	1ad2      	subs	r2, r2, r3
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4628      	mov	r0, r5
 8007bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be0:	6a21      	ldr	r1, [r4, #32]
 8007be2:	47b0      	blx	r6
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	d106      	bne.n	8007bf8 <__sflush_r+0x60>
 8007bea:	6829      	ldr	r1, [r5, #0]
 8007bec:	291d      	cmp	r1, #29
 8007bee:	d82b      	bhi.n	8007c48 <__sflush_r+0xb0>
 8007bf0:	4a28      	ldr	r2, [pc, #160]	@ (8007c94 <__sflush_r+0xfc>)
 8007bf2:	410a      	asrs	r2, r1
 8007bf4:	07d6      	lsls	r6, r2, #31
 8007bf6:	d427      	bmi.n	8007c48 <__sflush_r+0xb0>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	6062      	str	r2, [r4, #4]
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	04d9      	lsls	r1, r3, #19
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	d504      	bpl.n	8007c0e <__sflush_r+0x76>
 8007c04:	1c42      	adds	r2, r0, #1
 8007c06:	d101      	bne.n	8007c0c <__sflush_r+0x74>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b903      	cbnz	r3, 8007c0e <__sflush_r+0x76>
 8007c0c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c10:	602f      	str	r7, [r5, #0]
 8007c12:	b1b9      	cbz	r1, 8007c44 <__sflush_r+0xac>
 8007c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d002      	beq.n	8007c22 <__sflush_r+0x8a>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7fd ff2b 	bl	8005a78 <_free_r>
 8007c22:	2300      	movs	r3, #0
 8007c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c26:	e00d      	b.n	8007c44 <__sflush_r+0xac>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b0      	blx	r6
 8007c2e:	4602      	mov	r2, r0
 8007c30:	1c50      	adds	r0, r2, #1
 8007c32:	d1c9      	bne.n	8007bc8 <__sflush_r+0x30>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0c6      	beq.n	8007bc8 <__sflush_r+0x30>
 8007c3a:	2b1d      	cmp	r3, #29
 8007c3c:	d001      	beq.n	8007c42 <__sflush_r+0xaa>
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d11d      	bne.n	8007c7e <__sflush_r+0xe6>
 8007c42:	602f      	str	r7, [r5, #0]
 8007c44:	2000      	movs	r0, #0
 8007c46:	e021      	b.n	8007c8c <__sflush_r+0xf4>
 8007c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4c:	b21b      	sxth	r3, r3
 8007c4e:	e01a      	b.n	8007c86 <__sflush_r+0xee>
 8007c50:	690f      	ldr	r7, [r1, #16]
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	d0f6      	beq.n	8007c44 <__sflush_r+0xac>
 8007c56:	0793      	lsls	r3, r2, #30
 8007c58:	bf18      	it	ne
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	680e      	ldr	r6, [r1, #0]
 8007c5e:	bf08      	it	eq
 8007c60:	694b      	ldreq	r3, [r1, #20]
 8007c62:	1bf6      	subs	r6, r6, r7
 8007c64:	600f      	str	r7, [r1, #0]
 8007c66:	608b      	str	r3, [r1, #8]
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	ddeb      	ble.n	8007c44 <__sflush_r+0xac>
 8007c6c:	4633      	mov	r3, r6
 8007c6e:	463a      	mov	r2, r7
 8007c70:	4628      	mov	r0, r5
 8007c72:	6a21      	ldr	r1, [r4, #32]
 8007c74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c78:	47e0      	blx	ip
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dc07      	bgt.n	8007c8e <__sflush_r+0xf6>
 8007c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8e:	4407      	add	r7, r0
 8007c90:	1a36      	subs	r6, r6, r0
 8007c92:	e7e9      	b.n	8007c68 <__sflush_r+0xd0>
 8007c94:	dfbffffe 	.word	0xdfbffffe

08007c98 <_fflush_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b913      	cbnz	r3, 8007ca8 <_fflush_r+0x10>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	b118      	cbz	r0, 8007cb2 <_fflush_r+0x1a>
 8007caa:	6a03      	ldr	r3, [r0, #32]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <_fflush_r+0x1a>
 8007cae:	f7fc ff39 	bl	8004b24 <__sinit>
 8007cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f3      	beq.n	8007ca2 <_fflush_r+0xa>
 8007cba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cbc:	07d0      	lsls	r0, r2, #31
 8007cbe:	d404      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc0:	0599      	lsls	r1, r3, #22
 8007cc2:	d402      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fd f870 	bl	8004daa <__retarget_lock_acquire_recursive>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7ff ff63 	bl	8007b98 <__sflush_r>
 8007cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	07da      	lsls	r2, r3, #31
 8007cd8:	d4e4      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	059b      	lsls	r3, r3, #22
 8007cde:	d4e1      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce2:	f7fd f863 	bl	8004dac <__retarget_lock_release_recursive>
 8007ce6:	e7dd      	b.n	8007ca4 <_fflush_r+0xc>

08007ce8 <__sccl>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	780b      	ldrb	r3, [r1, #0]
 8007cec:	4604      	mov	r4, r0
 8007cee:	2b5e      	cmp	r3, #94	@ 0x5e
 8007cf0:	bf0b      	itete	eq
 8007cf2:	784b      	ldrbeq	r3, [r1, #1]
 8007cf4:	1c4a      	addne	r2, r1, #1
 8007cf6:	1c8a      	addeq	r2, r1, #2
 8007cf8:	2100      	movne	r1, #0
 8007cfa:	bf08      	it	eq
 8007cfc:	2101      	moveq	r1, #1
 8007cfe:	3801      	subs	r0, #1
 8007d00:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007d04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007d08:	42a8      	cmp	r0, r5
 8007d0a:	d1fb      	bne.n	8007d04 <__sccl+0x1c>
 8007d0c:	b90b      	cbnz	r3, 8007d12 <__sccl+0x2a>
 8007d0e:	1e50      	subs	r0, r2, #1
 8007d10:	bd70      	pop	{r4, r5, r6, pc}
 8007d12:	f081 0101 	eor.w	r1, r1, #1
 8007d16:	4610      	mov	r0, r2
 8007d18:	54e1      	strb	r1, [r4, r3]
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d20:	2d2d      	cmp	r5, #45	@ 0x2d
 8007d22:	d005      	beq.n	8007d30 <__sccl+0x48>
 8007d24:	2d5d      	cmp	r5, #93	@ 0x5d
 8007d26:	d016      	beq.n	8007d56 <__sccl+0x6e>
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	d0f1      	beq.n	8007d10 <__sccl+0x28>
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	e7f2      	b.n	8007d16 <__sccl+0x2e>
 8007d30:	7846      	ldrb	r6, [r0, #1]
 8007d32:	2e5d      	cmp	r6, #93	@ 0x5d
 8007d34:	d0fa      	beq.n	8007d2c <__sccl+0x44>
 8007d36:	42b3      	cmp	r3, r6
 8007d38:	dcf8      	bgt.n	8007d2c <__sccl+0x44>
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	3002      	adds	r0, #2
 8007d3e:	3201      	adds	r2, #1
 8007d40:	4296      	cmp	r6, r2
 8007d42:	54a1      	strb	r1, [r4, r2]
 8007d44:	dcfb      	bgt.n	8007d3e <__sccl+0x56>
 8007d46:	1af2      	subs	r2, r6, r3
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	42b3      	cmp	r3, r6
 8007d4c:	bfa8      	it	ge
 8007d4e:	2200      	movge	r2, #0
 8007d50:	1c5d      	adds	r5, r3, #1
 8007d52:	18ab      	adds	r3, r5, r2
 8007d54:	e7e1      	b.n	8007d1a <__sccl+0x32>
 8007d56:	4610      	mov	r0, r2
 8007d58:	e7da      	b.n	8007d10 <__sccl+0x28>

08007d5a <__submore>:
 8007d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	460c      	mov	r4, r1
 8007d60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d66:	4299      	cmp	r1, r3
 8007d68:	d11b      	bne.n	8007da2 <__submore+0x48>
 8007d6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d6e:	f7fd fef5 	bl	8005b5c <_malloc_r>
 8007d72:	b918      	cbnz	r0, 8007d7c <__submore+0x22>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d80:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007d82:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007d86:	6360      	str	r0, [r4, #52]	@ 0x34
 8007d88:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007d8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d90:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007d94:	7043      	strb	r3, [r0, #1]
 8007d96:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d9a:	7003      	strb	r3, [r0, #0]
 8007d9c:	6020      	str	r0, [r4, #0]
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e7ea      	b.n	8007d78 <__submore+0x1e>
 8007da2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007da4:	0077      	lsls	r7, r6, #1
 8007da6:	463a      	mov	r2, r7
 8007da8:	f000 fbdd 	bl	8008566 <_realloc_r>
 8007dac:	4605      	mov	r5, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0e0      	beq.n	8007d74 <__submore+0x1a>
 8007db2:	eb00 0806 	add.w	r8, r0, r6
 8007db6:	4601      	mov	r1, r0
 8007db8:	4632      	mov	r2, r6
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f000 f842 	bl	8007e44 <memcpy>
 8007dc0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007dc4:	f8c4 8000 	str.w	r8, [r4]
 8007dc8:	e7e9      	b.n	8007d9e <__submore+0x44>

08007dca <memmove>:
 8007dca:	4288      	cmp	r0, r1
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	eb01 0402 	add.w	r4, r1, r2
 8007dd2:	d902      	bls.n	8007dda <memmove+0x10>
 8007dd4:	4284      	cmp	r4, r0
 8007dd6:	4623      	mov	r3, r4
 8007dd8:	d807      	bhi.n	8007dea <memmove+0x20>
 8007dda:	1e43      	subs	r3, r0, #1
 8007ddc:	42a1      	cmp	r1, r4
 8007dde:	d008      	beq.n	8007df2 <memmove+0x28>
 8007de0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007de4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007de8:	e7f8      	b.n	8007ddc <memmove+0x12>
 8007dea:	4601      	mov	r1, r0
 8007dec:	4402      	add	r2, r0
 8007dee:	428a      	cmp	r2, r1
 8007df0:	d100      	bne.n	8007df4 <memmove+0x2a>
 8007df2:	bd10      	pop	{r4, pc}
 8007df4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007df8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dfc:	e7f7      	b.n	8007dee <memmove+0x24>

08007dfe <strncmp>:
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	b16a      	cbz	r2, 8007e1e <strncmp+0x20>
 8007e02:	3901      	subs	r1, #1
 8007e04:	1884      	adds	r4, r0, r2
 8007e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d103      	bne.n	8007e1a <strncmp+0x1c>
 8007e12:	42a0      	cmp	r0, r4
 8007e14:	d001      	beq.n	8007e1a <strncmp+0x1c>
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	d1f5      	bne.n	8007e06 <strncmp+0x8>
 8007e1a:	1ad0      	subs	r0, r2, r3
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	4610      	mov	r0, r2
 8007e20:	e7fc      	b.n	8007e1c <strncmp+0x1e>
	...

08007e24 <_sbrk_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	2300      	movs	r3, #0
 8007e28:	4d05      	ldr	r5, [pc, #20]	@ (8007e40 <_sbrk_r+0x1c>)
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	f7f9 ffca 	bl	8001dc8 <_sbrk>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_sbrk_r+0x1a>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_sbrk_r+0x1a>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20000508 	.word	0x20000508

08007e44 <memcpy>:
 8007e44:	440a      	add	r2, r1
 8007e46:	4291      	cmp	r1, r2
 8007e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e4c:	d100      	bne.n	8007e50 <memcpy+0xc>
 8007e4e:	4770      	bx	lr
 8007e50:	b510      	push	{r4, lr}
 8007e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e56:	4291      	cmp	r1, r2
 8007e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5c:	d1f9      	bne.n	8007e52 <memcpy+0xe>
 8007e5e:	bd10      	pop	{r4, pc}

08007e60 <nan>:
 8007e60:	2000      	movs	r0, #0
 8007e62:	4901      	ldr	r1, [pc, #4]	@ (8007e68 <nan+0x8>)
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	7ff80000 	.word	0x7ff80000

08007e6c <__assert_func>:
 8007e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e6e:	4614      	mov	r4, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <__assert_func+0x2c>)
 8007e74:	4605      	mov	r5, r0
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68d8      	ldr	r0, [r3, #12]
 8007e7a:	b954      	cbnz	r4, 8007e92 <__assert_func+0x26>
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <__assert_func+0x30>)
 8007e7e:	461c      	mov	r4, r3
 8007e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e84:	9100      	str	r1, [sp, #0]
 8007e86:	462b      	mov	r3, r5
 8007e88:	4905      	ldr	r1, [pc, #20]	@ (8007ea0 <__assert_func+0x34>)
 8007e8a:	f000 fc19 	bl	80086c0 <fiprintf>
 8007e8e:	f000 fc29 	bl	80086e4 <abort>
 8007e92:	4b04      	ldr	r3, [pc, #16]	@ (8007ea4 <__assert_func+0x38>)
 8007e94:	e7f4      	b.n	8007e80 <__assert_func+0x14>
 8007e96:	bf00      	nop
 8007e98:	20000028 	.word	0x20000028
 8007e9c:	08009208 	.word	0x08009208
 8007ea0:	080091da 	.word	0x080091da
 8007ea4:	080091cd 	.word	0x080091cd

08007ea8 <_calloc_r>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	fba1 5402 	umull	r5, r4, r1, r2
 8007eae:	b93c      	cbnz	r4, 8007ec0 <_calloc_r+0x18>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7fd fe53 	bl	8005b5c <_malloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b928      	cbnz	r0, 8007ec6 <_calloc_r+0x1e>
 8007eba:	2600      	movs	r6, #0
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	220c      	movs	r2, #12
 8007ec2:	6002      	str	r2, [r0, #0]
 8007ec4:	e7f9      	b.n	8007eba <_calloc_r+0x12>
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f7fc fef0 	bl	8004cae <memset>
 8007ece:	e7f5      	b.n	8007ebc <_calloc_r+0x14>

08007ed0 <rshift>:
 8007ed0:	6903      	ldr	r3, [r0, #16]
 8007ed2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007eda:	f100 0414 	add.w	r4, r0, #20
 8007ede:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ee2:	dd46      	ble.n	8007f72 <rshift+0xa2>
 8007ee4:	f011 011f 	ands.w	r1, r1, #31
 8007ee8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007eec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ef0:	d10c      	bne.n	8007f0c <rshift+0x3c>
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f100 0710 	add.w	r7, r0, #16
 8007ef8:	42b1      	cmp	r1, r6
 8007efa:	d335      	bcc.n	8007f68 <rshift+0x98>
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	1eea      	subs	r2, r5, #3
 8007f02:	4296      	cmp	r6, r2
 8007f04:	bf38      	it	cc
 8007f06:	2300      	movcc	r3, #0
 8007f08:	4423      	add	r3, r4
 8007f0a:	e015      	b.n	8007f38 <rshift+0x68>
 8007f0c:	46a1      	mov	r9, r4
 8007f0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f12:	f1c1 0820 	rsb	r8, r1, #32
 8007f16:	40cf      	lsrs	r7, r1
 8007f18:	f105 0e04 	add.w	lr, r5, #4
 8007f1c:	4576      	cmp	r6, lr
 8007f1e:	46f4      	mov	ip, lr
 8007f20:	d816      	bhi.n	8007f50 <rshift+0x80>
 8007f22:	1a9a      	subs	r2, r3, r2
 8007f24:	0092      	lsls	r2, r2, #2
 8007f26:	3a04      	subs	r2, #4
 8007f28:	3501      	adds	r5, #1
 8007f2a:	42ae      	cmp	r6, r5
 8007f2c:	bf38      	it	cc
 8007f2e:	2200      	movcc	r2, #0
 8007f30:	18a3      	adds	r3, r4, r2
 8007f32:	50a7      	str	r7, [r4, r2]
 8007f34:	b107      	cbz	r7, 8007f38 <rshift+0x68>
 8007f36:	3304      	adds	r3, #4
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	eba3 0204 	sub.w	r2, r3, r4
 8007f3e:	bf08      	it	eq
 8007f40:	2300      	moveq	r3, #0
 8007f42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f46:	6102      	str	r2, [r0, #16]
 8007f48:	bf08      	it	eq
 8007f4a:	6143      	streq	r3, [r0, #20]
 8007f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f50:	f8dc c000 	ldr.w	ip, [ip]
 8007f54:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f58:	ea4c 0707 	orr.w	r7, ip, r7
 8007f5c:	f849 7b04 	str.w	r7, [r9], #4
 8007f60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f64:	40cf      	lsrs	r7, r1
 8007f66:	e7d9      	b.n	8007f1c <rshift+0x4c>
 8007f68:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f70:	e7c2      	b.n	8007ef8 <rshift+0x28>
 8007f72:	4623      	mov	r3, r4
 8007f74:	e7e0      	b.n	8007f38 <rshift+0x68>

08007f76 <__hexdig_fun>:
 8007f76:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007f7a:	2b09      	cmp	r3, #9
 8007f7c:	d802      	bhi.n	8007f84 <__hexdig_fun+0xe>
 8007f7e:	3820      	subs	r0, #32
 8007f80:	b2c0      	uxtb	r0, r0
 8007f82:	4770      	bx	lr
 8007f84:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007f88:	2b05      	cmp	r3, #5
 8007f8a:	d801      	bhi.n	8007f90 <__hexdig_fun+0x1a>
 8007f8c:	3847      	subs	r0, #71	@ 0x47
 8007f8e:	e7f7      	b.n	8007f80 <__hexdig_fun+0xa>
 8007f90:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	d801      	bhi.n	8007f9c <__hexdig_fun+0x26>
 8007f98:	3827      	subs	r0, #39	@ 0x27
 8007f9a:	e7f1      	b.n	8007f80 <__hexdig_fun+0xa>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	4770      	bx	lr

08007fa0 <__gethex>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	468a      	mov	sl, r1
 8007fa6:	4690      	mov	r8, r2
 8007fa8:	b085      	sub	sp, #20
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	680b      	ldr	r3, [r1, #0]
 8007fae:	9001      	str	r0, [sp, #4]
 8007fb0:	1c9c      	adds	r4, r3, #2
 8007fb2:	46a1      	mov	r9, r4
 8007fb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007fb8:	2830      	cmp	r0, #48	@ 0x30
 8007fba:	d0fa      	beq.n	8007fb2 <__gethex+0x12>
 8007fbc:	eba9 0303 	sub.w	r3, r9, r3
 8007fc0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007fc4:	f7ff ffd7 	bl	8007f76 <__hexdig_fun>
 8007fc8:	4605      	mov	r5, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d168      	bne.n	80080a0 <__gethex+0x100>
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4648      	mov	r0, r9
 8007fd2:	499f      	ldr	r1, [pc, #636]	@ (8008250 <__gethex+0x2b0>)
 8007fd4:	f7ff ff13 	bl	8007dfe <strncmp>
 8007fd8:	4607      	mov	r7, r0
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d167      	bne.n	80080ae <__gethex+0x10e>
 8007fde:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007fe2:	4626      	mov	r6, r4
 8007fe4:	f7ff ffc7 	bl	8007f76 <__hexdig_fun>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d062      	beq.n	80080b2 <__gethex+0x112>
 8007fec:	4623      	mov	r3, r4
 8007fee:	7818      	ldrb	r0, [r3, #0]
 8007ff0:	4699      	mov	r9, r3
 8007ff2:	2830      	cmp	r0, #48	@ 0x30
 8007ff4:	f103 0301 	add.w	r3, r3, #1
 8007ff8:	d0f9      	beq.n	8007fee <__gethex+0x4e>
 8007ffa:	f7ff ffbc 	bl	8007f76 <__hexdig_fun>
 8007ffe:	fab0 f580 	clz	r5, r0
 8008002:	f04f 0b01 	mov.w	fp, #1
 8008006:	096d      	lsrs	r5, r5, #5
 8008008:	464a      	mov	r2, r9
 800800a:	4616      	mov	r6, r2
 800800c:	7830      	ldrb	r0, [r6, #0]
 800800e:	3201      	adds	r2, #1
 8008010:	f7ff ffb1 	bl	8007f76 <__hexdig_fun>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1f8      	bne.n	800800a <__gethex+0x6a>
 8008018:	2201      	movs	r2, #1
 800801a:	4630      	mov	r0, r6
 800801c:	498c      	ldr	r1, [pc, #560]	@ (8008250 <__gethex+0x2b0>)
 800801e:	f7ff feee 	bl	8007dfe <strncmp>
 8008022:	2800      	cmp	r0, #0
 8008024:	d13f      	bne.n	80080a6 <__gethex+0x106>
 8008026:	b944      	cbnz	r4, 800803a <__gethex+0x9a>
 8008028:	1c74      	adds	r4, r6, #1
 800802a:	4622      	mov	r2, r4
 800802c:	4616      	mov	r6, r2
 800802e:	7830      	ldrb	r0, [r6, #0]
 8008030:	3201      	adds	r2, #1
 8008032:	f7ff ffa0 	bl	8007f76 <__hexdig_fun>
 8008036:	2800      	cmp	r0, #0
 8008038:	d1f8      	bne.n	800802c <__gethex+0x8c>
 800803a:	1ba4      	subs	r4, r4, r6
 800803c:	00a7      	lsls	r7, r4, #2
 800803e:	7833      	ldrb	r3, [r6, #0]
 8008040:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008044:	2b50      	cmp	r3, #80	@ 0x50
 8008046:	d13e      	bne.n	80080c6 <__gethex+0x126>
 8008048:	7873      	ldrb	r3, [r6, #1]
 800804a:	2b2b      	cmp	r3, #43	@ 0x2b
 800804c:	d033      	beq.n	80080b6 <__gethex+0x116>
 800804e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008050:	d034      	beq.n	80080bc <__gethex+0x11c>
 8008052:	2400      	movs	r4, #0
 8008054:	1c71      	adds	r1, r6, #1
 8008056:	7808      	ldrb	r0, [r1, #0]
 8008058:	f7ff ff8d 	bl	8007f76 <__hexdig_fun>
 800805c:	1e43      	subs	r3, r0, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b18      	cmp	r3, #24
 8008062:	d830      	bhi.n	80080c6 <__gethex+0x126>
 8008064:	f1a0 0210 	sub.w	r2, r0, #16
 8008068:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800806c:	f7ff ff83 	bl	8007f76 <__hexdig_fun>
 8008070:	f100 3cff 	add.w	ip, r0, #4294967295
 8008074:	fa5f fc8c 	uxtb.w	ip, ip
 8008078:	f1bc 0f18 	cmp.w	ip, #24
 800807c:	f04f 030a 	mov.w	r3, #10
 8008080:	d91e      	bls.n	80080c0 <__gethex+0x120>
 8008082:	b104      	cbz	r4, 8008086 <__gethex+0xe6>
 8008084:	4252      	negs	r2, r2
 8008086:	4417      	add	r7, r2
 8008088:	f8ca 1000 	str.w	r1, [sl]
 800808c:	b1ed      	cbz	r5, 80080ca <__gethex+0x12a>
 800808e:	f1bb 0f00 	cmp.w	fp, #0
 8008092:	bf0c      	ite	eq
 8008094:	2506      	moveq	r5, #6
 8008096:	2500      	movne	r5, #0
 8008098:	4628      	mov	r0, r5
 800809a:	b005      	add	sp, #20
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	2500      	movs	r5, #0
 80080a2:	462c      	mov	r4, r5
 80080a4:	e7b0      	b.n	8008008 <__gethex+0x68>
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	d1c7      	bne.n	800803a <__gethex+0x9a>
 80080aa:	4627      	mov	r7, r4
 80080ac:	e7c7      	b.n	800803e <__gethex+0x9e>
 80080ae:	464e      	mov	r6, r9
 80080b0:	462f      	mov	r7, r5
 80080b2:	2501      	movs	r5, #1
 80080b4:	e7c3      	b.n	800803e <__gethex+0x9e>
 80080b6:	2400      	movs	r4, #0
 80080b8:	1cb1      	adds	r1, r6, #2
 80080ba:	e7cc      	b.n	8008056 <__gethex+0xb6>
 80080bc:	2401      	movs	r4, #1
 80080be:	e7fb      	b.n	80080b8 <__gethex+0x118>
 80080c0:	fb03 0002 	mla	r0, r3, r2, r0
 80080c4:	e7ce      	b.n	8008064 <__gethex+0xc4>
 80080c6:	4631      	mov	r1, r6
 80080c8:	e7de      	b.n	8008088 <__gethex+0xe8>
 80080ca:	4629      	mov	r1, r5
 80080cc:	eba6 0309 	sub.w	r3, r6, r9
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b07      	cmp	r3, #7
 80080d4:	dc0a      	bgt.n	80080ec <__gethex+0x14c>
 80080d6:	9801      	ldr	r0, [sp, #4]
 80080d8:	f7fd fdcc 	bl	8005c74 <_Balloc>
 80080dc:	4604      	mov	r4, r0
 80080de:	b940      	cbnz	r0, 80080f2 <__gethex+0x152>
 80080e0:	4602      	mov	r2, r0
 80080e2:	21e4      	movs	r1, #228	@ 0xe4
 80080e4:	4b5b      	ldr	r3, [pc, #364]	@ (8008254 <__gethex+0x2b4>)
 80080e6:	485c      	ldr	r0, [pc, #368]	@ (8008258 <__gethex+0x2b8>)
 80080e8:	f7ff fec0 	bl	8007e6c <__assert_func>
 80080ec:	3101      	adds	r1, #1
 80080ee:	105b      	asrs	r3, r3, #1
 80080f0:	e7ef      	b.n	80080d2 <__gethex+0x132>
 80080f2:	2300      	movs	r3, #0
 80080f4:	f100 0a14 	add.w	sl, r0, #20
 80080f8:	4655      	mov	r5, sl
 80080fa:	469b      	mov	fp, r3
 80080fc:	45b1      	cmp	r9, r6
 80080fe:	d337      	bcc.n	8008170 <__gethex+0x1d0>
 8008100:	f845 bb04 	str.w	fp, [r5], #4
 8008104:	eba5 050a 	sub.w	r5, r5, sl
 8008108:	10ad      	asrs	r5, r5, #2
 800810a:	6125      	str	r5, [r4, #16]
 800810c:	4658      	mov	r0, fp
 800810e:	f7fd fea3 	bl	8005e58 <__hi0bits>
 8008112:	016d      	lsls	r5, r5, #5
 8008114:	f8d8 6000 	ldr.w	r6, [r8]
 8008118:	1a2d      	subs	r5, r5, r0
 800811a:	42b5      	cmp	r5, r6
 800811c:	dd54      	ble.n	80081c8 <__gethex+0x228>
 800811e:	1bad      	subs	r5, r5, r6
 8008120:	4629      	mov	r1, r5
 8008122:	4620      	mov	r0, r4
 8008124:	f7fe fa2b 	bl	800657e <__any_on>
 8008128:	4681      	mov	r9, r0
 800812a:	b178      	cbz	r0, 800814c <__gethex+0x1ac>
 800812c:	f04f 0901 	mov.w	r9, #1
 8008130:	1e6b      	subs	r3, r5, #1
 8008132:	1159      	asrs	r1, r3, #5
 8008134:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008138:	f003 021f 	and.w	r2, r3, #31
 800813c:	fa09 f202 	lsl.w	r2, r9, r2
 8008140:	420a      	tst	r2, r1
 8008142:	d003      	beq.n	800814c <__gethex+0x1ac>
 8008144:	454b      	cmp	r3, r9
 8008146:	dc36      	bgt.n	80081b6 <__gethex+0x216>
 8008148:	f04f 0902 	mov.w	r9, #2
 800814c:	4629      	mov	r1, r5
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff febe 	bl	8007ed0 <rshift>
 8008154:	442f      	add	r7, r5
 8008156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800815a:	42bb      	cmp	r3, r7
 800815c:	da42      	bge.n	80081e4 <__gethex+0x244>
 800815e:	4621      	mov	r1, r4
 8008160:	9801      	ldr	r0, [sp, #4]
 8008162:	f7fd fdc7 	bl	8005cf4 <_Bfree>
 8008166:	2300      	movs	r3, #0
 8008168:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800816a:	25a3      	movs	r5, #163	@ 0xa3
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	e793      	b.n	8008098 <__gethex+0xf8>
 8008170:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008174:	2a2e      	cmp	r2, #46	@ 0x2e
 8008176:	d012      	beq.n	800819e <__gethex+0x1fe>
 8008178:	2b20      	cmp	r3, #32
 800817a:	d104      	bne.n	8008186 <__gethex+0x1e6>
 800817c:	f845 bb04 	str.w	fp, [r5], #4
 8008180:	f04f 0b00 	mov.w	fp, #0
 8008184:	465b      	mov	r3, fp
 8008186:	7830      	ldrb	r0, [r6, #0]
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	f7ff fef4 	bl	8007f76 <__hexdig_fun>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	f000 000f 	and.w	r0, r0, #15
 8008194:	4098      	lsls	r0, r3
 8008196:	ea4b 0b00 	orr.w	fp, fp, r0
 800819a:	3304      	adds	r3, #4
 800819c:	e7ae      	b.n	80080fc <__gethex+0x15c>
 800819e:	45b1      	cmp	r9, r6
 80081a0:	d8ea      	bhi.n	8008178 <__gethex+0x1d8>
 80081a2:	2201      	movs	r2, #1
 80081a4:	4630      	mov	r0, r6
 80081a6:	492a      	ldr	r1, [pc, #168]	@ (8008250 <__gethex+0x2b0>)
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	f7ff fe28 	bl	8007dfe <strncmp>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1e1      	bne.n	8008178 <__gethex+0x1d8>
 80081b4:	e7a2      	b.n	80080fc <__gethex+0x15c>
 80081b6:	4620      	mov	r0, r4
 80081b8:	1ea9      	subs	r1, r5, #2
 80081ba:	f7fe f9e0 	bl	800657e <__any_on>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d0c2      	beq.n	8008148 <__gethex+0x1a8>
 80081c2:	f04f 0903 	mov.w	r9, #3
 80081c6:	e7c1      	b.n	800814c <__gethex+0x1ac>
 80081c8:	da09      	bge.n	80081de <__gethex+0x23e>
 80081ca:	1b75      	subs	r5, r6, r5
 80081cc:	4621      	mov	r1, r4
 80081ce:	462a      	mov	r2, r5
 80081d0:	9801      	ldr	r0, [sp, #4]
 80081d2:	f7fd ffa5 	bl	8006120 <__lshift>
 80081d6:	4604      	mov	r4, r0
 80081d8:	1b7f      	subs	r7, r7, r5
 80081da:	f100 0a14 	add.w	sl, r0, #20
 80081de:	f04f 0900 	mov.w	r9, #0
 80081e2:	e7b8      	b.n	8008156 <__gethex+0x1b6>
 80081e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081e8:	42bd      	cmp	r5, r7
 80081ea:	dd6f      	ble.n	80082cc <__gethex+0x32c>
 80081ec:	1bed      	subs	r5, r5, r7
 80081ee:	42ae      	cmp	r6, r5
 80081f0:	dc34      	bgt.n	800825c <__gethex+0x2bc>
 80081f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d022      	beq.n	8008240 <__gethex+0x2a0>
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d024      	beq.n	8008248 <__gethex+0x2a8>
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d115      	bne.n	800822e <__gethex+0x28e>
 8008202:	42ae      	cmp	r6, r5
 8008204:	d113      	bne.n	800822e <__gethex+0x28e>
 8008206:	2e01      	cmp	r6, #1
 8008208:	d10b      	bne.n	8008222 <__gethex+0x282>
 800820a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800820e:	9a02      	ldr	r2, [sp, #8]
 8008210:	2562      	movs	r5, #98	@ 0x62
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	2301      	movs	r3, #1
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	f8ca 3000 	str.w	r3, [sl]
 800821c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821e:	601c      	str	r4, [r3, #0]
 8008220:	e73a      	b.n	8008098 <__gethex+0xf8>
 8008222:	4620      	mov	r0, r4
 8008224:	1e71      	subs	r1, r6, #1
 8008226:	f7fe f9aa 	bl	800657e <__any_on>
 800822a:	2800      	cmp	r0, #0
 800822c:	d1ed      	bne.n	800820a <__gethex+0x26a>
 800822e:	4621      	mov	r1, r4
 8008230:	9801      	ldr	r0, [sp, #4]
 8008232:	f7fd fd5f 	bl	8005cf4 <_Bfree>
 8008236:	2300      	movs	r3, #0
 8008238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800823a:	2550      	movs	r5, #80	@ 0x50
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e72b      	b.n	8008098 <__gethex+0xf8>
 8008240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1f3      	bne.n	800822e <__gethex+0x28e>
 8008246:	e7e0      	b.n	800820a <__gethex+0x26a>
 8008248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1dd      	bne.n	800820a <__gethex+0x26a>
 800824e:	e7ee      	b.n	800822e <__gethex+0x28e>
 8008250:	08009040 	.word	0x08009040
 8008254:	08008ed5 	.word	0x08008ed5
 8008258:	08009209 	.word	0x08009209
 800825c:	1e6f      	subs	r7, r5, #1
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	d130      	bne.n	80082c6 <__gethex+0x326>
 8008264:	b127      	cbz	r7, 8008270 <__gethex+0x2d0>
 8008266:	4639      	mov	r1, r7
 8008268:	4620      	mov	r0, r4
 800826a:	f7fe f988 	bl	800657e <__any_on>
 800826e:	4681      	mov	r9, r0
 8008270:	2301      	movs	r3, #1
 8008272:	4629      	mov	r1, r5
 8008274:	1b76      	subs	r6, r6, r5
 8008276:	2502      	movs	r5, #2
 8008278:	117a      	asrs	r2, r7, #5
 800827a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800827e:	f007 071f 	and.w	r7, r7, #31
 8008282:	40bb      	lsls	r3, r7
 8008284:	4213      	tst	r3, r2
 8008286:	4620      	mov	r0, r4
 8008288:	bf18      	it	ne
 800828a:	f049 0902 	orrne.w	r9, r9, #2
 800828e:	f7ff fe1f 	bl	8007ed0 <rshift>
 8008292:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008296:	f1b9 0f00 	cmp.w	r9, #0
 800829a:	d047      	beq.n	800832c <__gethex+0x38c>
 800829c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d015      	beq.n	80082d0 <__gethex+0x330>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d017      	beq.n	80082d8 <__gethex+0x338>
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d109      	bne.n	80082c0 <__gethex+0x320>
 80082ac:	f019 0f02 	tst.w	r9, #2
 80082b0:	d006      	beq.n	80082c0 <__gethex+0x320>
 80082b2:	f8da 3000 	ldr.w	r3, [sl]
 80082b6:	ea49 0903 	orr.w	r9, r9, r3
 80082ba:	f019 0f01 	tst.w	r9, #1
 80082be:	d10e      	bne.n	80082de <__gethex+0x33e>
 80082c0:	f045 0510 	orr.w	r5, r5, #16
 80082c4:	e032      	b.n	800832c <__gethex+0x38c>
 80082c6:	f04f 0901 	mov.w	r9, #1
 80082ca:	e7d1      	b.n	8008270 <__gethex+0x2d0>
 80082cc:	2501      	movs	r5, #1
 80082ce:	e7e2      	b.n	8008296 <__gethex+0x2f6>
 80082d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d2:	f1c3 0301 	rsb	r3, r3, #1
 80082d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f0      	beq.n	80082c0 <__gethex+0x320>
 80082de:	f04f 0c00 	mov.w	ip, #0
 80082e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082e6:	f104 0314 	add.w	r3, r4, #20
 80082ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082fc:	d01b      	beq.n	8008336 <__gethex+0x396>
 80082fe:	3201      	adds	r2, #1
 8008300:	6002      	str	r2, [r0, #0]
 8008302:	2d02      	cmp	r5, #2
 8008304:	f104 0314 	add.w	r3, r4, #20
 8008308:	d13c      	bne.n	8008384 <__gethex+0x3e4>
 800830a:	f8d8 2000 	ldr.w	r2, [r8]
 800830e:	3a01      	subs	r2, #1
 8008310:	42b2      	cmp	r2, r6
 8008312:	d109      	bne.n	8008328 <__gethex+0x388>
 8008314:	2201      	movs	r2, #1
 8008316:	1171      	asrs	r1, r6, #5
 8008318:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800831c:	f006 061f 	and.w	r6, r6, #31
 8008320:	fa02 f606 	lsl.w	r6, r2, r6
 8008324:	421e      	tst	r6, r3
 8008326:	d13a      	bne.n	800839e <__gethex+0x3fe>
 8008328:	f045 0520 	orr.w	r5, r5, #32
 800832c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800832e:	601c      	str	r4, [r3, #0]
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	601f      	str	r7, [r3, #0]
 8008334:	e6b0      	b.n	8008098 <__gethex+0xf8>
 8008336:	4299      	cmp	r1, r3
 8008338:	f843 cc04 	str.w	ip, [r3, #-4]
 800833c:	d8d9      	bhi.n	80082f2 <__gethex+0x352>
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	459b      	cmp	fp, r3
 8008342:	db17      	blt.n	8008374 <__gethex+0x3d4>
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	9801      	ldr	r0, [sp, #4]
 8008348:	3101      	adds	r1, #1
 800834a:	f7fd fc93 	bl	8005c74 <_Balloc>
 800834e:	4681      	mov	r9, r0
 8008350:	b918      	cbnz	r0, 800835a <__gethex+0x3ba>
 8008352:	4602      	mov	r2, r0
 8008354:	2184      	movs	r1, #132	@ 0x84
 8008356:	4b19      	ldr	r3, [pc, #100]	@ (80083bc <__gethex+0x41c>)
 8008358:	e6c5      	b.n	80080e6 <__gethex+0x146>
 800835a:	6922      	ldr	r2, [r4, #16]
 800835c:	f104 010c 	add.w	r1, r4, #12
 8008360:	3202      	adds	r2, #2
 8008362:	0092      	lsls	r2, r2, #2
 8008364:	300c      	adds	r0, #12
 8008366:	f7ff fd6d 	bl	8007e44 <memcpy>
 800836a:	4621      	mov	r1, r4
 800836c:	9801      	ldr	r0, [sp, #4]
 800836e:	f7fd fcc1 	bl	8005cf4 <_Bfree>
 8008372:	464c      	mov	r4, r9
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	6122      	str	r2, [r4, #16]
 800837a:	2201      	movs	r2, #1
 800837c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008380:	615a      	str	r2, [r3, #20]
 8008382:	e7be      	b.n	8008302 <__gethex+0x362>
 8008384:	6922      	ldr	r2, [r4, #16]
 8008386:	455a      	cmp	r2, fp
 8008388:	dd0b      	ble.n	80083a2 <__gethex+0x402>
 800838a:	2101      	movs	r1, #1
 800838c:	4620      	mov	r0, r4
 800838e:	f7ff fd9f 	bl	8007ed0 <rshift>
 8008392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008396:	3701      	adds	r7, #1
 8008398:	42bb      	cmp	r3, r7
 800839a:	f6ff aee0 	blt.w	800815e <__gethex+0x1be>
 800839e:	2501      	movs	r5, #1
 80083a0:	e7c2      	b.n	8008328 <__gethex+0x388>
 80083a2:	f016 061f 	ands.w	r6, r6, #31
 80083a6:	d0fa      	beq.n	800839e <__gethex+0x3fe>
 80083a8:	4453      	add	r3, sl
 80083aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083ae:	f7fd fd53 	bl	8005e58 <__hi0bits>
 80083b2:	f1c6 0620 	rsb	r6, r6, #32
 80083b6:	42b0      	cmp	r0, r6
 80083b8:	dbe7      	blt.n	800838a <__gethex+0x3ea>
 80083ba:	e7f0      	b.n	800839e <__gethex+0x3fe>
 80083bc:	08008ed5 	.word	0x08008ed5

080083c0 <L_shift>:
 80083c0:	f1c2 0208 	rsb	r2, r2, #8
 80083c4:	0092      	lsls	r2, r2, #2
 80083c6:	b570      	push	{r4, r5, r6, lr}
 80083c8:	f1c2 0620 	rsb	r6, r2, #32
 80083cc:	6843      	ldr	r3, [r0, #4]
 80083ce:	6804      	ldr	r4, [r0, #0]
 80083d0:	fa03 f506 	lsl.w	r5, r3, r6
 80083d4:	432c      	orrs	r4, r5
 80083d6:	40d3      	lsrs	r3, r2
 80083d8:	6004      	str	r4, [r0, #0]
 80083da:	f840 3f04 	str.w	r3, [r0, #4]!
 80083de:	4288      	cmp	r0, r1
 80083e0:	d3f4      	bcc.n	80083cc <L_shift+0xc>
 80083e2:	bd70      	pop	{r4, r5, r6, pc}

080083e4 <__match>:
 80083e4:	b530      	push	{r4, r5, lr}
 80083e6:	6803      	ldr	r3, [r0, #0]
 80083e8:	3301      	adds	r3, #1
 80083ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ee:	b914      	cbnz	r4, 80083f6 <__match+0x12>
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	2001      	movs	r0, #1
 80083f4:	bd30      	pop	{r4, r5, pc}
 80083f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80083fe:	2d19      	cmp	r5, #25
 8008400:	bf98      	it	ls
 8008402:	3220      	addls	r2, #32
 8008404:	42a2      	cmp	r2, r4
 8008406:	d0f0      	beq.n	80083ea <__match+0x6>
 8008408:	2000      	movs	r0, #0
 800840a:	e7f3      	b.n	80083f4 <__match+0x10>

0800840c <__hexnan>:
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	2500      	movs	r5, #0
 8008412:	680b      	ldr	r3, [r1, #0]
 8008414:	4682      	mov	sl, r0
 8008416:	115e      	asrs	r6, r3, #5
 8008418:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800841c:	f013 031f 	ands.w	r3, r3, #31
 8008420:	bf18      	it	ne
 8008422:	3604      	addne	r6, #4
 8008424:	1f37      	subs	r7, r6, #4
 8008426:	4690      	mov	r8, r2
 8008428:	46b9      	mov	r9, r7
 800842a:	463c      	mov	r4, r7
 800842c:	46ab      	mov	fp, r5
 800842e:	b087      	sub	sp, #28
 8008430:	6801      	ldr	r1, [r0, #0]
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	f846 5c04 	str.w	r5, [r6, #-4]
 8008438:	9502      	str	r5, [sp, #8]
 800843a:	784a      	ldrb	r2, [r1, #1]
 800843c:	1c4b      	adds	r3, r1, #1
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	b342      	cbz	r2, 8008494 <__hexnan+0x88>
 8008442:	4610      	mov	r0, r2
 8008444:	9105      	str	r1, [sp, #20]
 8008446:	9204      	str	r2, [sp, #16]
 8008448:	f7ff fd95 	bl	8007f76 <__hexdig_fun>
 800844c:	2800      	cmp	r0, #0
 800844e:	d151      	bne.n	80084f4 <__hexnan+0xe8>
 8008450:	9a04      	ldr	r2, [sp, #16]
 8008452:	9905      	ldr	r1, [sp, #20]
 8008454:	2a20      	cmp	r2, #32
 8008456:	d818      	bhi.n	800848a <__hexnan+0x7e>
 8008458:	9b02      	ldr	r3, [sp, #8]
 800845a:	459b      	cmp	fp, r3
 800845c:	dd13      	ble.n	8008486 <__hexnan+0x7a>
 800845e:	454c      	cmp	r4, r9
 8008460:	d206      	bcs.n	8008470 <__hexnan+0x64>
 8008462:	2d07      	cmp	r5, #7
 8008464:	dc04      	bgt.n	8008470 <__hexnan+0x64>
 8008466:	462a      	mov	r2, r5
 8008468:	4649      	mov	r1, r9
 800846a:	4620      	mov	r0, r4
 800846c:	f7ff ffa8 	bl	80083c0 <L_shift>
 8008470:	4544      	cmp	r4, r8
 8008472:	d952      	bls.n	800851a <__hexnan+0x10e>
 8008474:	2300      	movs	r3, #0
 8008476:	f1a4 0904 	sub.w	r9, r4, #4
 800847a:	f844 3c04 	str.w	r3, [r4, #-4]
 800847e:	461d      	mov	r5, r3
 8008480:	464c      	mov	r4, r9
 8008482:	f8cd b008 	str.w	fp, [sp, #8]
 8008486:	9903      	ldr	r1, [sp, #12]
 8008488:	e7d7      	b.n	800843a <__hexnan+0x2e>
 800848a:	2a29      	cmp	r2, #41	@ 0x29
 800848c:	d157      	bne.n	800853e <__hexnan+0x132>
 800848e:	3102      	adds	r1, #2
 8008490:	f8ca 1000 	str.w	r1, [sl]
 8008494:	f1bb 0f00 	cmp.w	fp, #0
 8008498:	d051      	beq.n	800853e <__hexnan+0x132>
 800849a:	454c      	cmp	r4, r9
 800849c:	d206      	bcs.n	80084ac <__hexnan+0xa0>
 800849e:	2d07      	cmp	r5, #7
 80084a0:	dc04      	bgt.n	80084ac <__hexnan+0xa0>
 80084a2:	462a      	mov	r2, r5
 80084a4:	4649      	mov	r1, r9
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff ff8a 	bl	80083c0 <L_shift>
 80084ac:	4544      	cmp	r4, r8
 80084ae:	d936      	bls.n	800851e <__hexnan+0x112>
 80084b0:	4623      	mov	r3, r4
 80084b2:	f1a8 0204 	sub.w	r2, r8, #4
 80084b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80084ba:	429f      	cmp	r7, r3
 80084bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80084c0:	d2f9      	bcs.n	80084b6 <__hexnan+0xaa>
 80084c2:	1b3b      	subs	r3, r7, r4
 80084c4:	f023 0303 	bic.w	r3, r3, #3
 80084c8:	3304      	adds	r3, #4
 80084ca:	3401      	adds	r4, #1
 80084cc:	3e03      	subs	r6, #3
 80084ce:	42b4      	cmp	r4, r6
 80084d0:	bf88      	it	hi
 80084d2:	2304      	movhi	r3, #4
 80084d4:	2200      	movs	r2, #0
 80084d6:	4443      	add	r3, r8
 80084d8:	f843 2b04 	str.w	r2, [r3], #4
 80084dc:	429f      	cmp	r7, r3
 80084de:	d2fb      	bcs.n	80084d8 <__hexnan+0xcc>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	b91b      	cbnz	r3, 80084ec <__hexnan+0xe0>
 80084e4:	4547      	cmp	r7, r8
 80084e6:	d128      	bne.n	800853a <__hexnan+0x12e>
 80084e8:	2301      	movs	r3, #1
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	2005      	movs	r0, #5
 80084ee:	b007      	add	sp, #28
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	3501      	adds	r5, #1
 80084f6:	2d08      	cmp	r5, #8
 80084f8:	f10b 0b01 	add.w	fp, fp, #1
 80084fc:	dd06      	ble.n	800850c <__hexnan+0x100>
 80084fe:	4544      	cmp	r4, r8
 8008500:	d9c1      	bls.n	8008486 <__hexnan+0x7a>
 8008502:	2300      	movs	r3, #0
 8008504:	2501      	movs	r5, #1
 8008506:	f844 3c04 	str.w	r3, [r4, #-4]
 800850a:	3c04      	subs	r4, #4
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	f000 000f 	and.w	r0, r0, #15
 8008512:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008516:	6020      	str	r0, [r4, #0]
 8008518:	e7b5      	b.n	8008486 <__hexnan+0x7a>
 800851a:	2508      	movs	r5, #8
 800851c:	e7b3      	b.n	8008486 <__hexnan+0x7a>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0dd      	beq.n	80084e0 <__hexnan+0xd4>
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	f1c3 0320 	rsb	r3, r3, #32
 800852c:	40da      	lsrs	r2, r3
 800852e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008532:	4013      	ands	r3, r2
 8008534:	f846 3c04 	str.w	r3, [r6, #-4]
 8008538:	e7d2      	b.n	80084e0 <__hexnan+0xd4>
 800853a:	3f04      	subs	r7, #4
 800853c:	e7d0      	b.n	80084e0 <__hexnan+0xd4>
 800853e:	2004      	movs	r0, #4
 8008540:	e7d5      	b.n	80084ee <__hexnan+0xe2>

08008542 <__ascii_mbtowc>:
 8008542:	b082      	sub	sp, #8
 8008544:	b901      	cbnz	r1, 8008548 <__ascii_mbtowc+0x6>
 8008546:	a901      	add	r1, sp, #4
 8008548:	b142      	cbz	r2, 800855c <__ascii_mbtowc+0x1a>
 800854a:	b14b      	cbz	r3, 8008560 <__ascii_mbtowc+0x1e>
 800854c:	7813      	ldrb	r3, [r2, #0]
 800854e:	600b      	str	r3, [r1, #0]
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	1e10      	subs	r0, r2, #0
 8008554:	bf18      	it	ne
 8008556:	2001      	movne	r0, #1
 8008558:	b002      	add	sp, #8
 800855a:	4770      	bx	lr
 800855c:	4610      	mov	r0, r2
 800855e:	e7fb      	b.n	8008558 <__ascii_mbtowc+0x16>
 8008560:	f06f 0001 	mvn.w	r0, #1
 8008564:	e7f8      	b.n	8008558 <__ascii_mbtowc+0x16>

08008566 <_realloc_r>:
 8008566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856a:	4680      	mov	r8, r0
 800856c:	4615      	mov	r5, r2
 800856e:	460c      	mov	r4, r1
 8008570:	b921      	cbnz	r1, 800857c <_realloc_r+0x16>
 8008572:	4611      	mov	r1, r2
 8008574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	f7fd baf0 	b.w	8005b5c <_malloc_r>
 800857c:	b92a      	cbnz	r2, 800858a <_realloc_r+0x24>
 800857e:	f7fd fa7b 	bl	8005a78 <_free_r>
 8008582:	2400      	movs	r4, #0
 8008584:	4620      	mov	r0, r4
 8008586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858a:	f000 f8b2 	bl	80086f2 <_malloc_usable_size_r>
 800858e:	4285      	cmp	r5, r0
 8008590:	4606      	mov	r6, r0
 8008592:	d802      	bhi.n	800859a <_realloc_r+0x34>
 8008594:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008598:	d8f4      	bhi.n	8008584 <_realloc_r+0x1e>
 800859a:	4629      	mov	r1, r5
 800859c:	4640      	mov	r0, r8
 800859e:	f7fd fadd 	bl	8005b5c <_malloc_r>
 80085a2:	4607      	mov	r7, r0
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d0ec      	beq.n	8008582 <_realloc_r+0x1c>
 80085a8:	42b5      	cmp	r5, r6
 80085aa:	462a      	mov	r2, r5
 80085ac:	4621      	mov	r1, r4
 80085ae:	bf28      	it	cs
 80085b0:	4632      	movcs	r2, r6
 80085b2:	f7ff fc47 	bl	8007e44 <memcpy>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4640      	mov	r0, r8
 80085ba:	f7fd fa5d 	bl	8005a78 <_free_r>
 80085be:	463c      	mov	r4, r7
 80085c0:	e7e0      	b.n	8008584 <_realloc_r+0x1e>
	...

080085c4 <_strtoul_l.constprop.0>:
 80085c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c8:	4686      	mov	lr, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	4e33      	ldr	r6, [pc, #204]	@ (800869c <_strtoul_l.constprop.0+0xd8>)
 80085ce:	4628      	mov	r0, r5
 80085d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085d4:	5d37      	ldrb	r7, [r6, r4]
 80085d6:	f017 0708 	ands.w	r7, r7, #8
 80085da:	d1f8      	bne.n	80085ce <_strtoul_l.constprop.0+0xa>
 80085dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80085de:	d12f      	bne.n	8008640 <_strtoul_l.constprop.0+0x7c>
 80085e0:	2701      	movs	r7, #1
 80085e2:	782c      	ldrb	r4, [r5, #0]
 80085e4:	1c85      	adds	r5, r0, #2
 80085e6:	f033 0010 	bics.w	r0, r3, #16
 80085ea:	d109      	bne.n	8008600 <_strtoul_l.constprop.0+0x3c>
 80085ec:	2c30      	cmp	r4, #48	@ 0x30
 80085ee:	d12c      	bne.n	800864a <_strtoul_l.constprop.0+0x86>
 80085f0:	7828      	ldrb	r0, [r5, #0]
 80085f2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80085f6:	2858      	cmp	r0, #88	@ 0x58
 80085f8:	d127      	bne.n	800864a <_strtoul_l.constprop.0+0x86>
 80085fa:	2310      	movs	r3, #16
 80085fc:	786c      	ldrb	r4, [r5, #1]
 80085fe:	3502      	adds	r5, #2
 8008600:	f04f 38ff 	mov.w	r8, #4294967295
 8008604:	fbb8 f8f3 	udiv	r8, r8, r3
 8008608:	2600      	movs	r6, #0
 800860a:	fb03 f908 	mul.w	r9, r3, r8
 800860e:	4630      	mov	r0, r6
 8008610:	ea6f 0909 	mvn.w	r9, r9
 8008614:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008618:	f1bc 0f09 	cmp.w	ip, #9
 800861c:	d81c      	bhi.n	8008658 <_strtoul_l.constprop.0+0x94>
 800861e:	4664      	mov	r4, ip
 8008620:	42a3      	cmp	r3, r4
 8008622:	dd2a      	ble.n	800867a <_strtoul_l.constprop.0+0xb6>
 8008624:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008628:	d007      	beq.n	800863a <_strtoul_l.constprop.0+0x76>
 800862a:	4580      	cmp	r8, r0
 800862c:	d322      	bcc.n	8008674 <_strtoul_l.constprop.0+0xb0>
 800862e:	d101      	bne.n	8008634 <_strtoul_l.constprop.0+0x70>
 8008630:	45a1      	cmp	r9, r4
 8008632:	db1f      	blt.n	8008674 <_strtoul_l.constprop.0+0xb0>
 8008634:	2601      	movs	r6, #1
 8008636:	fb00 4003 	mla	r0, r0, r3, r4
 800863a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800863e:	e7e9      	b.n	8008614 <_strtoul_l.constprop.0+0x50>
 8008640:	2c2b      	cmp	r4, #43	@ 0x2b
 8008642:	bf04      	itt	eq
 8008644:	782c      	ldrbeq	r4, [r5, #0]
 8008646:	1c85      	addeq	r5, r0, #2
 8008648:	e7cd      	b.n	80085e6 <_strtoul_l.constprop.0+0x22>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1d8      	bne.n	8008600 <_strtoul_l.constprop.0+0x3c>
 800864e:	2c30      	cmp	r4, #48	@ 0x30
 8008650:	bf0c      	ite	eq
 8008652:	2308      	moveq	r3, #8
 8008654:	230a      	movne	r3, #10
 8008656:	e7d3      	b.n	8008600 <_strtoul_l.constprop.0+0x3c>
 8008658:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800865c:	f1bc 0f19 	cmp.w	ip, #25
 8008660:	d801      	bhi.n	8008666 <_strtoul_l.constprop.0+0xa2>
 8008662:	3c37      	subs	r4, #55	@ 0x37
 8008664:	e7dc      	b.n	8008620 <_strtoul_l.constprop.0+0x5c>
 8008666:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800866a:	f1bc 0f19 	cmp.w	ip, #25
 800866e:	d804      	bhi.n	800867a <_strtoul_l.constprop.0+0xb6>
 8008670:	3c57      	subs	r4, #87	@ 0x57
 8008672:	e7d5      	b.n	8008620 <_strtoul_l.constprop.0+0x5c>
 8008674:	f04f 36ff 	mov.w	r6, #4294967295
 8008678:	e7df      	b.n	800863a <_strtoul_l.constprop.0+0x76>
 800867a:	1c73      	adds	r3, r6, #1
 800867c:	d106      	bne.n	800868c <_strtoul_l.constprop.0+0xc8>
 800867e:	2322      	movs	r3, #34	@ 0x22
 8008680:	4630      	mov	r0, r6
 8008682:	f8ce 3000 	str.w	r3, [lr]
 8008686:	b932      	cbnz	r2, 8008696 <_strtoul_l.constprop.0+0xd2>
 8008688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868c:	b107      	cbz	r7, 8008690 <_strtoul_l.constprop.0+0xcc>
 800868e:	4240      	negs	r0, r0
 8008690:	2a00      	cmp	r2, #0
 8008692:	d0f9      	beq.n	8008688 <_strtoul_l.constprop.0+0xc4>
 8008694:	b106      	cbz	r6, 8008698 <_strtoul_l.constprop.0+0xd4>
 8008696:	1e69      	subs	r1, r5, #1
 8008698:	6011      	str	r1, [r2, #0]
 800869a:	e7f5      	b.n	8008688 <_strtoul_l.constprop.0+0xc4>
 800869c:	08009099 	.word	0x08009099

080086a0 <_strtoul_r>:
 80086a0:	f7ff bf90 	b.w	80085c4 <_strtoul_l.constprop.0>

080086a4 <__ascii_wctomb>:
 80086a4:	4603      	mov	r3, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	b141      	cbz	r1, 80086bc <__ascii_wctomb+0x18>
 80086aa:	2aff      	cmp	r2, #255	@ 0xff
 80086ac:	d904      	bls.n	80086b8 <__ascii_wctomb+0x14>
 80086ae:	228a      	movs	r2, #138	@ 0x8a
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	4770      	bx	lr
 80086b8:	2001      	movs	r0, #1
 80086ba:	700a      	strb	r2, [r1, #0]
 80086bc:	4770      	bx	lr
	...

080086c0 <fiprintf>:
 80086c0:	b40e      	push	{r1, r2, r3}
 80086c2:	b503      	push	{r0, r1, lr}
 80086c4:	4601      	mov	r1, r0
 80086c6:	ab03      	add	r3, sp, #12
 80086c8:	4805      	ldr	r0, [pc, #20]	@ (80086e0 <fiprintf+0x20>)
 80086ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ce:	6800      	ldr	r0, [r0, #0]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	f000 f83d 	bl	8008750 <_vfiprintf_r>
 80086d6:	b002      	add	sp, #8
 80086d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086dc:	b003      	add	sp, #12
 80086de:	4770      	bx	lr
 80086e0:	20000028 	.word	0x20000028

080086e4 <abort>:
 80086e4:	2006      	movs	r0, #6
 80086e6:	b508      	push	{r3, lr}
 80086e8:	f000 fa06 	bl	8008af8 <raise>
 80086ec:	2001      	movs	r0, #1
 80086ee:	f7f9 faf6 	bl	8001cde <_exit>

080086f2 <_malloc_usable_size_r>:
 80086f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f6:	1f18      	subs	r0, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbc      	itt	lt
 80086fc:	580b      	ldrlt	r3, [r1, r0]
 80086fe:	18c0      	addlt	r0, r0, r3
 8008700:	4770      	bx	lr

08008702 <__sfputc_r>:
 8008702:	6893      	ldr	r3, [r2, #8]
 8008704:	b410      	push	{r4}
 8008706:	3b01      	subs	r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	6093      	str	r3, [r2, #8]
 800870c:	da07      	bge.n	800871e <__sfputc_r+0x1c>
 800870e:	6994      	ldr	r4, [r2, #24]
 8008710:	42a3      	cmp	r3, r4
 8008712:	db01      	blt.n	8008718 <__sfputc_r+0x16>
 8008714:	290a      	cmp	r1, #10
 8008716:	d102      	bne.n	800871e <__sfputc_r+0x1c>
 8008718:	bc10      	pop	{r4}
 800871a:	f000 b931 	b.w	8008980 <__swbuf_r>
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	1c58      	adds	r0, r3, #1
 8008722:	6010      	str	r0, [r2, #0]
 8008724:	7019      	strb	r1, [r3, #0]
 8008726:	4608      	mov	r0, r1
 8008728:	bc10      	pop	{r4}
 800872a:	4770      	bx	lr

0800872c <__sfputs_r>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	4606      	mov	r6, r0
 8008730:	460f      	mov	r7, r1
 8008732:	4614      	mov	r4, r2
 8008734:	18d5      	adds	r5, r2, r3
 8008736:	42ac      	cmp	r4, r5
 8008738:	d101      	bne.n	800873e <__sfputs_r+0x12>
 800873a:	2000      	movs	r0, #0
 800873c:	e007      	b.n	800874e <__sfputs_r+0x22>
 800873e:	463a      	mov	r2, r7
 8008740:	4630      	mov	r0, r6
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	f7ff ffdc 	bl	8008702 <__sfputc_r>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	d1f3      	bne.n	8008736 <__sfputs_r+0xa>
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008750 <_vfiprintf_r>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	460d      	mov	r5, r1
 8008756:	4614      	mov	r4, r2
 8008758:	4698      	mov	r8, r3
 800875a:	4606      	mov	r6, r0
 800875c:	b09d      	sub	sp, #116	@ 0x74
 800875e:	b118      	cbz	r0, 8008768 <_vfiprintf_r+0x18>
 8008760:	6a03      	ldr	r3, [r0, #32]
 8008762:	b90b      	cbnz	r3, 8008768 <_vfiprintf_r+0x18>
 8008764:	f7fc f9de 	bl	8004b24 <__sinit>
 8008768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d405      	bmi.n	800877a <_vfiprintf_r+0x2a>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	059a      	lsls	r2, r3, #22
 8008772:	d402      	bmi.n	800877a <_vfiprintf_r+0x2a>
 8008774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008776:	f7fc fb18 	bl	8004daa <__retarget_lock_acquire_recursive>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	071b      	lsls	r3, r3, #28
 800877e:	d501      	bpl.n	8008784 <_vfiprintf_r+0x34>
 8008780:	692b      	ldr	r3, [r5, #16]
 8008782:	b99b      	cbnz	r3, 80087ac <_vfiprintf_r+0x5c>
 8008784:	4629      	mov	r1, r5
 8008786:	4630      	mov	r0, r6
 8008788:	f000 f938 	bl	80089fc <__swsetup_r>
 800878c:	b170      	cbz	r0, 80087ac <_vfiprintf_r+0x5c>
 800878e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008790:	07dc      	lsls	r4, r3, #31
 8008792:	d504      	bpl.n	800879e <_vfiprintf_r+0x4e>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	b01d      	add	sp, #116	@ 0x74
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	0598      	lsls	r0, r3, #22
 80087a2:	d4f7      	bmi.n	8008794 <_vfiprintf_r+0x44>
 80087a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087a6:	f7fc fb01 	bl	8004dac <__retarget_lock_release_recursive>
 80087aa:	e7f3      	b.n	8008794 <_vfiprintf_r+0x44>
 80087ac:	2300      	movs	r3, #0
 80087ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b0:	2320      	movs	r3, #32
 80087b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087b6:	2330      	movs	r3, #48	@ 0x30
 80087b8:	f04f 0901 	mov.w	r9, #1
 80087bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800896c <_vfiprintf_r+0x21c>
 80087c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087c8:	4623      	mov	r3, r4
 80087ca:	469a      	mov	sl, r3
 80087cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d0:	b10a      	cbz	r2, 80087d6 <_vfiprintf_r+0x86>
 80087d2:	2a25      	cmp	r2, #37	@ 0x25
 80087d4:	d1f9      	bne.n	80087ca <_vfiprintf_r+0x7a>
 80087d6:	ebba 0b04 	subs.w	fp, sl, r4
 80087da:	d00b      	beq.n	80087f4 <_vfiprintf_r+0xa4>
 80087dc:	465b      	mov	r3, fp
 80087de:	4622      	mov	r2, r4
 80087e0:	4629      	mov	r1, r5
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ffa2 	bl	800872c <__sfputs_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	f000 80a7 	beq.w	800893c <_vfiprintf_r+0x1ec>
 80087ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f0:	445a      	add	r2, fp
 80087f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80087f4:	f89a 3000 	ldrb.w	r3, [sl]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 809f 	beq.w	800893c <_vfiprintf_r+0x1ec>
 80087fe:	2300      	movs	r3, #0
 8008800:	f04f 32ff 	mov.w	r2, #4294967295
 8008804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008808:	f10a 0a01 	add.w	sl, sl, #1
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	9307      	str	r3, [sp, #28]
 8008810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008814:	931a      	str	r3, [sp, #104]	@ 0x68
 8008816:	4654      	mov	r4, sl
 8008818:	2205      	movs	r2, #5
 800881a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881e:	4853      	ldr	r0, [pc, #332]	@ (800896c <_vfiprintf_r+0x21c>)
 8008820:	f7fc fac5 	bl	8004dae <memchr>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	b9d8      	cbnz	r0, 8008860 <_vfiprintf_r+0x110>
 8008828:	06d1      	lsls	r1, r2, #27
 800882a:	bf44      	itt	mi
 800882c:	2320      	movmi	r3, #32
 800882e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008832:	0713      	lsls	r3, r2, #28
 8008834:	bf44      	itt	mi
 8008836:	232b      	movmi	r3, #43	@ 0x2b
 8008838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800883c:	f89a 3000 	ldrb.w	r3, [sl]
 8008840:	2b2a      	cmp	r3, #42	@ 0x2a
 8008842:	d015      	beq.n	8008870 <_vfiprintf_r+0x120>
 8008844:	4654      	mov	r4, sl
 8008846:	2000      	movs	r0, #0
 8008848:	f04f 0c0a 	mov.w	ip, #10
 800884c:	9a07      	ldr	r2, [sp, #28]
 800884e:	4621      	mov	r1, r4
 8008850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008854:	3b30      	subs	r3, #48	@ 0x30
 8008856:	2b09      	cmp	r3, #9
 8008858:	d94b      	bls.n	80088f2 <_vfiprintf_r+0x1a2>
 800885a:	b1b0      	cbz	r0, 800888a <_vfiprintf_r+0x13a>
 800885c:	9207      	str	r2, [sp, #28]
 800885e:	e014      	b.n	800888a <_vfiprintf_r+0x13a>
 8008860:	eba0 0308 	sub.w	r3, r0, r8
 8008864:	fa09 f303 	lsl.w	r3, r9, r3
 8008868:	4313      	orrs	r3, r2
 800886a:	46a2      	mov	sl, r4
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	e7d2      	b.n	8008816 <_vfiprintf_r+0xc6>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	1d19      	adds	r1, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	9103      	str	r1, [sp, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	bfbb      	ittet	lt
 800887c:	425b      	neglt	r3, r3
 800887e:	f042 0202 	orrlt.w	r2, r2, #2
 8008882:	9307      	strge	r3, [sp, #28]
 8008884:	9307      	strlt	r3, [sp, #28]
 8008886:	bfb8      	it	lt
 8008888:	9204      	strlt	r2, [sp, #16]
 800888a:	7823      	ldrb	r3, [r4, #0]
 800888c:	2b2e      	cmp	r3, #46	@ 0x2e
 800888e:	d10a      	bne.n	80088a6 <_vfiprintf_r+0x156>
 8008890:	7863      	ldrb	r3, [r4, #1]
 8008892:	2b2a      	cmp	r3, #42	@ 0x2a
 8008894:	d132      	bne.n	80088fc <_vfiprintf_r+0x1ac>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	3402      	adds	r4, #2
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9203      	str	r2, [sp, #12]
 80088a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008970 <_vfiprintf_r+0x220>
 80088aa:	2203      	movs	r2, #3
 80088ac:	4650      	mov	r0, sl
 80088ae:	7821      	ldrb	r1, [r4, #0]
 80088b0:	f7fc fa7d 	bl	8004dae <memchr>
 80088b4:	b138      	cbz	r0, 80088c6 <_vfiprintf_r+0x176>
 80088b6:	2240      	movs	r2, #64	@ 0x40
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	eba0 000a 	sub.w	r0, r0, sl
 80088be:	4082      	lsls	r2, r0
 80088c0:	4313      	orrs	r3, r2
 80088c2:	3401      	adds	r4, #1
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ca:	2206      	movs	r2, #6
 80088cc:	4829      	ldr	r0, [pc, #164]	@ (8008974 <_vfiprintf_r+0x224>)
 80088ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088d2:	f7fc fa6c 	bl	8004dae <memchr>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d03f      	beq.n	800895a <_vfiprintf_r+0x20a>
 80088da:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <_vfiprintf_r+0x228>)
 80088dc:	bb1b      	cbnz	r3, 8008926 <_vfiprintf_r+0x1d6>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	3307      	adds	r3, #7
 80088e2:	f023 0307 	bic.w	r3, r3, #7
 80088e6:	3308      	adds	r3, #8
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ec:	443b      	add	r3, r7
 80088ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f0:	e76a      	b.n	80087c8 <_vfiprintf_r+0x78>
 80088f2:	460c      	mov	r4, r1
 80088f4:	2001      	movs	r0, #1
 80088f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fa:	e7a8      	b.n	800884e <_vfiprintf_r+0xfe>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f04f 0c0a 	mov.w	ip, #10
 8008902:	4619      	mov	r1, r3
 8008904:	3401      	adds	r4, #1
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	4620      	mov	r0, r4
 800890a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800890e:	3a30      	subs	r2, #48	@ 0x30
 8008910:	2a09      	cmp	r2, #9
 8008912:	d903      	bls.n	800891c <_vfiprintf_r+0x1cc>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0c6      	beq.n	80088a6 <_vfiprintf_r+0x156>
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	e7c4      	b.n	80088a6 <_vfiprintf_r+0x156>
 800891c:	4604      	mov	r4, r0
 800891e:	2301      	movs	r3, #1
 8008920:	fb0c 2101 	mla	r1, ip, r1, r2
 8008924:	e7f0      	b.n	8008908 <_vfiprintf_r+0x1b8>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4630      	mov	r0, r6
 800892e:	4b13      	ldr	r3, [pc, #76]	@ (800897c <_vfiprintf_r+0x22c>)
 8008930:	a904      	add	r1, sp, #16
 8008932:	f7fb fa9d 	bl	8003e70 <_printf_float>
 8008936:	4607      	mov	r7, r0
 8008938:	1c78      	adds	r0, r7, #1
 800893a:	d1d6      	bne.n	80088ea <_vfiprintf_r+0x19a>
 800893c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d405      	bmi.n	800894e <_vfiprintf_r+0x1fe>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	059a      	lsls	r2, r3, #22
 8008946:	d402      	bmi.n	800894e <_vfiprintf_r+0x1fe>
 8008948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800894a:	f7fc fa2f 	bl	8004dac <__retarget_lock_release_recursive>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	065b      	lsls	r3, r3, #25
 8008952:	f53f af1f 	bmi.w	8008794 <_vfiprintf_r+0x44>
 8008956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008958:	e71e      	b.n	8008798 <_vfiprintf_r+0x48>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4630      	mov	r0, r6
 8008962:	4b06      	ldr	r3, [pc, #24]	@ (800897c <_vfiprintf_r+0x22c>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	f7fb fd21 	bl	80043ac <_printf_i>
 800896a:	e7e4      	b.n	8008936 <_vfiprintf_r+0x1e6>
 800896c:	08009199 	.word	0x08009199
 8008970:	0800919f 	.word	0x0800919f
 8008974:	080091a3 	.word	0x080091a3
 8008978:	08003e71 	.word	0x08003e71
 800897c:	0800872d 	.word	0x0800872d

08008980 <__swbuf_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	460e      	mov	r6, r1
 8008984:	4614      	mov	r4, r2
 8008986:	4605      	mov	r5, r0
 8008988:	b118      	cbz	r0, 8008992 <__swbuf_r+0x12>
 800898a:	6a03      	ldr	r3, [r0, #32]
 800898c:	b90b      	cbnz	r3, 8008992 <__swbuf_r+0x12>
 800898e:	f7fc f8c9 	bl	8004b24 <__sinit>
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d501      	bpl.n	80089a0 <__swbuf_r+0x20>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b943      	cbnz	r3, 80089b2 <__swbuf_r+0x32>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 f82a 	bl	80089fc <__swsetup_r>
 80089a8:	b118      	cbz	r0, 80089b2 <__swbuf_r+0x32>
 80089aa:	f04f 37ff 	mov.w	r7, #4294967295
 80089ae:	4638      	mov	r0, r7
 80089b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	6922      	ldr	r2, [r4, #16]
 80089b6:	b2f6      	uxtb	r6, r6
 80089b8:	1a98      	subs	r0, r3, r2
 80089ba:	6963      	ldr	r3, [r4, #20]
 80089bc:	4637      	mov	r7, r6
 80089be:	4283      	cmp	r3, r0
 80089c0:	dc05      	bgt.n	80089ce <__swbuf_r+0x4e>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f7ff f967 	bl	8007c98 <_fflush_r>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d1ed      	bne.n	80089aa <__swbuf_r+0x2a>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	701e      	strb	r6, [r3, #0]
 80089dc:	6962      	ldr	r2, [r4, #20]
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d004      	beq.n	80089ee <__swbuf_r+0x6e>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d5e1      	bpl.n	80089ae <__swbuf_r+0x2e>
 80089ea:	2e0a      	cmp	r6, #10
 80089ec:	d1df      	bne.n	80089ae <__swbuf_r+0x2e>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f7ff f951 	bl	8007c98 <_fflush_r>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d0d9      	beq.n	80089ae <__swbuf_r+0x2e>
 80089fa:	e7d6      	b.n	80089aa <__swbuf_r+0x2a>

080089fc <__swsetup_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4b29      	ldr	r3, [pc, #164]	@ (8008aa4 <__swsetup_r+0xa8>)
 8008a00:	4605      	mov	r5, r0
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	460c      	mov	r4, r1
 8008a06:	b118      	cbz	r0, 8008a10 <__swsetup_r+0x14>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <__swsetup_r+0x14>
 8008a0c:	f7fc f88a 	bl	8004b24 <__sinit>
 8008a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a14:	0719      	lsls	r1, r3, #28
 8008a16:	d422      	bmi.n	8008a5e <__swsetup_r+0x62>
 8008a18:	06da      	lsls	r2, r3, #27
 8008a1a:	d407      	bmi.n	8008a2c <__swsetup_r+0x30>
 8008a1c:	2209      	movs	r2, #9
 8008a1e:	602a      	str	r2, [r5, #0]
 8008a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	e033      	b.n	8008a94 <__swsetup_r+0x98>
 8008a2c:	0758      	lsls	r0, r3, #29
 8008a2e:	d512      	bpl.n	8008a56 <__swsetup_r+0x5a>
 8008a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a32:	b141      	cbz	r1, 8008a46 <__swsetup_r+0x4a>
 8008a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d002      	beq.n	8008a42 <__swsetup_r+0x46>
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f7fd f81b 	bl	8005a78 <_free_r>
 8008a42:	2300      	movs	r3, #0
 8008a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f043 0308 	orr.w	r3, r3, #8
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	b94b      	cbnz	r3, 8008a76 <__swsetup_r+0x7a>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a6c:	d003      	beq.n	8008a76 <__swsetup_r+0x7a>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 f882 	bl	8008b7a <__smakebuf_r>
 8008a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7a:	f013 0201 	ands.w	r2, r3, #1
 8008a7e:	d00a      	beq.n	8008a96 <__swsetup_r+0x9a>
 8008a80:	2200      	movs	r2, #0
 8008a82:	60a2      	str	r2, [r4, #8]
 8008a84:	6962      	ldr	r2, [r4, #20]
 8008a86:	4252      	negs	r2, r2
 8008a88:	61a2      	str	r2, [r4, #24]
 8008a8a:	6922      	ldr	r2, [r4, #16]
 8008a8c:	b942      	cbnz	r2, 8008aa0 <__swsetup_r+0xa4>
 8008a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a92:	d1c5      	bne.n	8008a20 <__swsetup_r+0x24>
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	0799      	lsls	r1, r3, #30
 8008a98:	bf58      	it	pl
 8008a9a:	6962      	ldrpl	r2, [r4, #20]
 8008a9c:	60a2      	str	r2, [r4, #8]
 8008a9e:	e7f4      	b.n	8008a8a <__swsetup_r+0x8e>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e7f7      	b.n	8008a94 <__swsetup_r+0x98>
 8008aa4:	20000028 	.word	0x20000028

08008aa8 <_raise_r>:
 8008aa8:	291f      	cmp	r1, #31
 8008aaa:	b538      	push	{r3, r4, r5, lr}
 8008aac:	4605      	mov	r5, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	d904      	bls.n	8008abc <_raise_r+0x14>
 8008ab2:	2316      	movs	r3, #22
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008abe:	b112      	cbz	r2, 8008ac6 <_raise_r+0x1e>
 8008ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ac4:	b94b      	cbnz	r3, 8008ada <_raise_r+0x32>
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 f830 	bl	8008b2c <_getpid_r>
 8008acc:	4622      	mov	r2, r4
 8008ace:	4601      	mov	r1, r0
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad6:	f000 b817 	b.w	8008b08 <_kill_r>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d00a      	beq.n	8008af4 <_raise_r+0x4c>
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	d103      	bne.n	8008aea <_raise_r+0x42>
 8008ae2:	2316      	movs	r3, #22
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	e7e7      	b.n	8008aba <_raise_r+0x12>
 8008aea:	2100      	movs	r1, #0
 8008aec:	4620      	mov	r0, r4
 8008aee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008af2:	4798      	blx	r3
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7e0      	b.n	8008aba <_raise_r+0x12>

08008af8 <raise>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	@ (8008b04 <raise+0xc>)
 8008afa:	4601      	mov	r1, r0
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	f7ff bfd3 	b.w	8008aa8 <_raise_r>
 8008b02:	bf00      	nop
 8008b04:	20000028 	.word	0x20000028

08008b08 <_kill_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4d06      	ldr	r5, [pc, #24]	@ (8008b28 <_kill_r+0x20>)
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f7f9 f8d2 	bl	8001cbe <_kill>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d102      	bne.n	8008b24 <_kill_r+0x1c>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b103      	cbz	r3, 8008b24 <_kill_r+0x1c>
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	20000508 	.word	0x20000508

08008b2c <_getpid_r>:
 8008b2c:	f7f9 b8c0 	b.w	8001cb0 <_getpid>

08008b30 <__swhatbuf_r>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	4615      	mov	r5, r2
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	461e      	mov	r6, r3
 8008b3e:	b096      	sub	sp, #88	@ 0x58
 8008b40:	da0c      	bge.n	8008b5c <__swhatbuf_r+0x2c>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	2100      	movs	r1, #0
 8008b46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b4a:	bf14      	ite	ne
 8008b4c:	2340      	movne	r3, #64	@ 0x40
 8008b4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b52:	2000      	movs	r0, #0
 8008b54:	6031      	str	r1, [r6, #0]
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	b016      	add	sp, #88	@ 0x58
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	466a      	mov	r2, sp
 8008b5e:	f000 f849 	bl	8008bf4 <_fstat_r>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	dbed      	blt.n	8008b42 <__swhatbuf_r+0x12>
 8008b66:	9901      	ldr	r1, [sp, #4]
 8008b68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b70:	4259      	negs	r1, r3
 8008b72:	4159      	adcs	r1, r3
 8008b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b78:	e7eb      	b.n	8008b52 <__swhatbuf_r+0x22>

08008b7a <__smakebuf_r>:
 8008b7a:	898b      	ldrh	r3, [r1, #12]
 8008b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7e:	079d      	lsls	r5, r3, #30
 8008b80:	4606      	mov	r6, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	d507      	bpl.n	8008b96 <__smakebuf_r+0x1c>
 8008b86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	2301      	movs	r3, #1
 8008b90:	6163      	str	r3, [r4, #20]
 8008b92:	b003      	add	sp, #12
 8008b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b96:	466a      	mov	r2, sp
 8008b98:	ab01      	add	r3, sp, #4
 8008b9a:	f7ff ffc9 	bl	8008b30 <__swhatbuf_r>
 8008b9e:	9f00      	ldr	r7, [sp, #0]
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7fc ffd9 	bl	8005b5c <_malloc_r>
 8008baa:	b948      	cbnz	r0, 8008bc0 <__smakebuf_r+0x46>
 8008bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb0:	059a      	lsls	r2, r3, #22
 8008bb2:	d4ee      	bmi.n	8008b92 <__smakebuf_r+0x18>
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	e7e2      	b.n	8008b86 <__smakebuf_r+0xc>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	6020      	str	r0, [r4, #0]
 8008bd0:	b15b      	cbz	r3, 8008bea <__smakebuf_r+0x70>
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd8:	f000 f81e 	bl	8008c18 <_isatty_r>
 8008bdc:	b128      	cbz	r0, 8008bea <__smakebuf_r+0x70>
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f023 0303 	bic.w	r3, r3, #3
 8008be4:	f043 0301 	orr.w	r3, r3, #1
 8008be8:	81a3      	strh	r3, [r4, #12]
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	431d      	orrs	r5, r3
 8008bee:	81a5      	strh	r5, [r4, #12]
 8008bf0:	e7cf      	b.n	8008b92 <__smakebuf_r+0x18>
	...

08008bf4 <_fstat_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4d06      	ldr	r5, [pc, #24]	@ (8008c14 <_fstat_r+0x20>)
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	f7f9 f8bb 	bl	8001d7c <_fstat>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d102      	bne.n	8008c10 <_fstat_r+0x1c>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	b103      	cbz	r3, 8008c10 <_fstat_r+0x1c>
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	20000508 	.word	0x20000508

08008c18 <_isatty_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4d05      	ldr	r5, [pc, #20]	@ (8008c34 <_isatty_r+0x1c>)
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	f7f9 f8b9 	bl	8001d9a <_isatty>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_isatty_r+0x1a>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_isatty_r+0x1a>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	20000508 	.word	0x20000508

08008c38 <_init>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	bf00      	nop
 8008c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3e:	bc08      	pop	{r3}
 8008c40:	469e      	mov	lr, r3
 8008c42:	4770      	bx	lr

08008c44 <_fini>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr
