
Test_RTOS_envent.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006be8  08006be8  00007be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d6c  08006d6c  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d6c  08006d6c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d6c  08006d6c  00007d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006d74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c00  2000006c  08006de0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  08006de0  00008c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018341  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388c  00000000  00000000  000203d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00023c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001090  00000000  00000000  000251c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004700  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017656  00000000  00000000  0002a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096cc8  00000000  00000000  00041fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000614c  00000000  00000000  000d8cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000dee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bd0 	.word	0x08006bd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08006bd0 	.word	0x08006bd0

08000150 <_write>:
osEventFlagsId_t myEvent02Handle;
const osEventFlagsAttr_t myEvent02_attributes = {
  .name = "myEvent02"
};
/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	b29a      	uxth	r2, r3
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	68b9      	ldr	r1, [r7, #8]
 8000166:	4804      	ldr	r0, [pc, #16]	@ (8000178 <_write+0x28>)
 8000168:	f001 fd8a 	bl	8001c80 <HAL_UART_Transmit>
    return len;
 800016c:	687b      	ldr	r3, [r7, #4]
}
 800016e:	4618      	mov	r0, r3
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000088 	.word	0x20000088

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fb50 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f848 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f8ac 	bl	80002e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800018c:	f000 f880 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000190:	f002 fb80 	bl	8002894 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000194:	4a13      	ldr	r2, [pc, #76]	@ (80001e4 <main+0x68>)
 8000196:	2100      	movs	r1, #0
 8000198:	4813      	ldr	r0, [pc, #76]	@ (80001e8 <main+0x6c>)
 800019a:	f002 fbc3 	bl	8002924 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a12      	ldr	r2, [pc, #72]	@ (80001ec <main+0x70>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80001a4:	4a12      	ldr	r2, [pc, #72]	@ (80001f0 <main+0x74>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4812      	ldr	r0, [pc, #72]	@ (80001f4 <main+0x78>)
 80001aa:	f002 fbbb 	bl	8002924 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a11      	ldr	r2, [pc, #68]	@ (80001f8 <main+0x7c>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <main+0x80>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <main+0x84>)
 80001ba:	f002 fbb3 	bl	8002924 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <main+0x88>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 80001c4:	4810      	ldr	r0, [pc, #64]	@ (8000208 <main+0x8c>)
 80001c6:	f002 fc5a 	bl	8002a7e <osEventFlagsNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a0f      	ldr	r2, [pc, #60]	@ (800020c <main+0x90>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* creation of myEvent02 */
  myEvent02Handle = osEventFlagsNew(&myEvent02_attributes);
 80001d0:	480f      	ldr	r0, [pc, #60]	@ (8000210 <main+0x94>)
 80001d2:	f002 fc54 	bl	8002a7e <osEventFlagsNew>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <main+0x98>)
 80001da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001dc:	f002 fb7c 	bl	80028d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	bf00      	nop
 80001e2:	e7fd      	b.n	80001e0 <main+0x64>
 80001e4:	08006c80 	.word	0x08006c80
 80001e8:	0800034d 	.word	0x0800034d
 80001ec:	200000d4 	.word	0x200000d4
 80001f0:	08006ca4 	.word	0x08006ca4
 80001f4:	0800037d 	.word	0x0800037d
 80001f8:	200000d8 	.word	0x200000d8
 80001fc:	08006cc8 	.word	0x08006cc8
 8000200:	080003ad 	.word	0x080003ad
 8000204:	200000dc 	.word	0x200000dc
 8000208:	08006cec 	.word	0x08006cec
 800020c:	200000e0 	.word	0x200000e0
 8000210:	08006cfc 	.word	0x08006cfc
 8000214:	200000e4 	.word	0x200000e4

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	@ 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fee0 	bl	8005fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000246:	2300      	movs	r3, #0
 8000248:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fe48 	bl	8000ee4 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800025a:	f000 f901 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f8b6 	bl	80013e8 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000282:	f000 f8ed 	bl	8000460 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	@ 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f001 fc8a 	bl	8001be0 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f8c5 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000088 	.word	0x20000088
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <MX_GPIO_Init+0x60>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <MX_GPIO_Init+0x60>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <MX_GPIO_Init+0x60>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000316:	480c      	ldr	r0, [pc, #48]	@ (8000348 <MX_GPIO_Init+0x64>)
 8000318:	f000 fdcc 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800031c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000320:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2302      	movs	r3, #2
 800032c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	4619      	mov	r1, r3
 8000334:	4804      	ldr	r0, [pc, #16]	@ (8000348 <MX_GPIO_Init+0x64>)
 8000336:	f000 fc39 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033a:	bf00      	nop
 800033c:	3718      	adds	r7, #24
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40010800 	.word	0x40010800

0800034c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(myEvent01Handle, (1 << 0), osFlagsWaitAny, osWaitForever); // Wait for DIV2 flag
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <StartTask01+0x28>)
 8000356:	6818      	ldr	r0, [r3, #0]
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	2200      	movs	r2, #0
 800035e:	2101      	movs	r1, #1
 8000360:	f002 fc3f 	bl	8002be2 <osEventFlagsWait>
	printf("Bien dem la so chan....\r\n\n");
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <StartTask01+0x2c>)
 8000366:	f005 fd61 	bl	8005e2c <puts>
    osDelay(1);
 800036a:	2001      	movs	r0, #1
 800036c:	f002 fb6c 	bl	8002a48 <osDelay>
  {
 8000370:	bf00      	nop
 8000372:	e7ef      	b.n	8000354 <StartTask01+0x8>
 8000374:	200000e0 	.word	0x200000e0
 8000378:	08006c18 	.word	0x08006c18

0800037c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(myEvent02Handle, (1 << 0) | (1 << 1), osFlagsWaitAll, osWaitForever);
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <StartTask02+0x28>)
 8000386:	6818      	ldr	r0, [r3, #0]
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	2201      	movs	r2, #1
 800038e:	2103      	movs	r1, #3
 8000390:	f002 fc27 	bl	8002be2 <osEventFlagsWait>
	  printf("Bien dem chia het cho 6\r\n\n");
 8000394:	4804      	ldr	r0, [pc, #16]	@ (80003a8 <StartTask02+0x2c>)
 8000396:	f005 fd49 	bl	8005e2c <puts>
    osDelay(1);
 800039a:	2001      	movs	r0, #1
 800039c:	f002 fb54 	bl	8002a48 <osDelay>
  {
 80003a0:	bf00      	nop
 80003a2:	e7ef      	b.n	8000384 <StartTask02+0x8>
 80003a4:	200000e4 	.word	0x200000e4
 80003a8:	08006c34 	.word	0x08006c34

080003ac <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  count++;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <StartTask03+0x7c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000428 <StartTask03+0x7c>)
 80003bc:	6013      	str	r3, [r2, #0]

	          // Set event flags based on count
	          if (count % 2 == 0) {
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <StartTask03+0x7c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d10b      	bne.n	80003e2 <StartTask03+0x36>
	              osEventFlagsSet(myEvent01Handle, (1 << 0)); // Set DIV2 flag
 80003ca:	4b18      	ldr	r3, [pc, #96]	@ (800042c <StartTask03+0x80>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fb93 	bl	8002afc <osEventFlagsSet>
	              osEventFlagsSet(myEvent02Handle, (1 << 0)); // Set DIV2 flag
 80003d6:	4b16      	ldr	r3, [pc, #88]	@ (8000430 <StartTask03+0x84>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2101      	movs	r1, #1
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fb8d 	bl	8002afc <osEventFlagsSet>
	          }
	          if (count % 3 == 0) {
 80003e2:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <StartTask03+0x7c>)
 80003e4:	6819      	ldr	r1, [r3, #0]
 80003e6:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <StartTask03+0x88>)
 80003e8:	fba3 2301 	umull	r2, r3, r3, r1
 80003ec:	085a      	lsrs	r2, r3, #1
 80003ee:	4613      	mov	r3, r2
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4413      	add	r3, r2
 80003f4:	1aca      	subs	r2, r1, r3
 80003f6:	2a00      	cmp	r2, #0
 80003f8:	d105      	bne.n	8000406 <StartTask03+0x5a>
	              osEventFlagsSet(myEvent02Handle, (1 << 1)); // Set DIV6 flag
 80003fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000430 <StartTask03+0x84>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2102      	movs	r1, #2
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fb7b 	bl	8002afc <osEventFlagsSet>
	          }
	          printf("Task 3: Count = %lu\r\n\n", count);
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <StartTask03+0x7c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4619      	mov	r1, r3
 800040c:	480a      	ldr	r0, [pc, #40]	@ (8000438 <StartTask03+0x8c>)
 800040e:	f005 fca5 	bl	8005d5c <iprintf>
	          osEventFlagsClear(myEvent02Handle, (1 << 0) | (1 << 1));
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <StartTask03+0x84>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2103      	movs	r1, #3
 8000418:	4618      	mov	r0, r3
 800041a:	f002 fbb1 	bl	8002b80 <osEventFlagsClear>
	          osDelay(1000); // Delay 1 second
 800041e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000422:	f002 fb11 	bl	8002a48 <osDelay>
  {
 8000426:	e7c5      	b.n	80003b4 <StartTask03+0x8>
 8000428:	200000d0 	.word	0x200000d0
 800042c:	200000e0 	.word	0x200000e0
 8000430:	200000e4 	.word	0x200000e4
 8000434:	aaaaaaab 	.word	0xaaaaaaab
 8000438:	08006c50 	.word	0x08006c50

0800043c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d101      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800044e:	f000 f9ff 	bl	8000850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40012c00 	.word	0x40012c00

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <Error_Handler+0x8>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <HAL_MspInit+0x68>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a17      	ldr	r2, [pc, #92]	@ (80004d4 <HAL_MspInit+0x68>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <HAL_MspInit+0x68>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <HAL_MspInit+0x68>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a11      	ldr	r2, [pc, #68]	@ (80004d4 <HAL_MspInit+0x68>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <HAL_MspInit+0x68>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	210f      	movs	r1, #15
 80004a6:	f06f 0001 	mvn.w	r0, #1
 80004aa:	f000 faa2 	bl	80009f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <HAL_MspInit+0x6c>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <HAL_MspInit+0x6c>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a20      	ldr	r2, [pc, #128]	@ (8000578 <HAL_UART_MspInit+0x9c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d139      	bne.n	8000570 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004fc:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <HAL_UART_MspInit+0xa0>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a1e      	ldr	r2, [pc, #120]	@ (800057c <HAL_UART_MspInit+0xa0>)
 8000502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <HAL_UART_MspInit+0xa0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b19      	ldr	r3, [pc, #100]	@ (800057c <HAL_UART_MspInit+0xa0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a18      	ldr	r2, [pc, #96]	@ (800057c <HAL_UART_MspInit+0xa0>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b16      	ldr	r3, [pc, #88]	@ (800057c <HAL_UART_MspInit+0xa0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800052c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	480f      	ldr	r0, [pc, #60]	@ (8000580 <HAL_UART_MspInit+0xa4>)
 8000542:	f000 fb33 	bl	8000bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	4809      	ldr	r0, [pc, #36]	@ (8000580 <HAL_UART_MspInit+0xa4>)
 800055c:	f000 fb26 	bl	8000bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2105      	movs	r1, #5
 8000564:	2025      	movs	r0, #37	@ 0x25
 8000566:	f000 fa44 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800056a:	2025      	movs	r0, #37	@ 0x25
 800056c:	f000 fa5d 	bl	8000a2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40013800 	.word	0x40013800
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800059a:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <HAL_InitTick+0xd0>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a2d      	ldr	r2, [pc, #180]	@ (8000654 <HAL_InitTick+0xd0>)
 80005a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000654 <HAL_InitTick+0xd0>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f883 	bl	80016c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005c2:	f001 f86d 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 80005c6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ca:	4a23      	ldr	r2, [pc, #140]	@ (8000658 <HAL_InitTick+0xd4>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	0c9b      	lsrs	r3, r3, #18
 80005d2:	3b01      	subs	r3, #1
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005d6:	4b21      	ldr	r3, [pc, #132]	@ (800065c <HAL_InitTick+0xd8>)
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <HAL_InitTick+0xdc>)
 80005da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <HAL_InitTick+0xd8>)
 80005de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005e4:	4a1d      	ldr	r2, [pc, #116]	@ (800065c <HAL_InitTick+0xd8>)
 80005e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <HAL_InitTick+0xd8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <HAL_InitTick+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <HAL_InitTick+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80005fc:	4817      	ldr	r0, [pc, #92]	@ (800065c <HAL_InitTick+0xd8>)
 80005fe:	f001 f8b1 	bl	8001764 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000608:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060c:	2b00      	cmp	r3, #0
 800060e:	d11b      	bne.n	8000648 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000610:	4812      	ldr	r0, [pc, #72]	@ (800065c <HAL_InitTick+0xd8>)
 8000612:	f001 f8ff 	bl	8001814 <HAL_TIM_Base_Start_IT>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800061c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000620:	2b00      	cmp	r3, #0
 8000622:	d111      	bne.n	8000648 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000624:	2019      	movs	r0, #25
 8000626:	f000 fa00 	bl	8000a2a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d808      	bhi.n	8000642 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	2019      	movs	r0, #25
 8000636:	f000 f9dc 	bl	80009f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063a:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <HAL_InitTick+0xe0>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e002      	b.n	8000648 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000648:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800064c:	4618      	mov	r0, r3
 800064e:	3730      	adds	r7, #48	@ 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	200000e8 	.word	0x200000e8
 8000660:	40012c00 	.word	0x40012c00
 8000664:	20000004 	.word	0x20000004

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <NMI_Handler+0x4>

08000670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <MemManage_Handler+0x4>

08000680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <UsageFault_Handler+0x4>

08000690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006a0:	4802      	ldr	r0, [pc, #8]	@ (80006ac <TIM1_UP_IRQHandler+0x10>)
 80006a2:	f001 f909 	bl	80018b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000e8 	.word	0x200000e8

080006b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <USART1_IRQHandler+0x10>)
 80006b6:	f001 fb6f 	bl	8001d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000088 	.word	0x20000088

080006c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e00a      	b.n	80006ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006d6:	f3af 8000 	nop.w
 80006da:	4601      	mov	r1, r0
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf0      	blt.n	80006d6 <_read+0x12>
  }

  return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000724:	605a      	str	r2, [r3, #4]
  return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <_isatty>:

int _isatty(int file)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	@ (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f005 fcd0 	bl	8006134 <__errno>
 8000794:	4603      	mov	r3, r0
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20005000 	.word	0x20005000
 80007c0:	00000400 	.word	0x00000400
 80007c4:	20000130 	.word	0x20000130
 80007c8:	20001c70 	.word	0x20001c70

080007cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff fff8 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007de:	490c      	ldr	r1, [pc, #48]	@ (8000810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f4:	4c09      	ldr	r4, [pc, #36]	@ (800081c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f005 fc9d 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fcb9 	bl	800017c <main>
  bx lr
 800080a:	4770      	bx	lr
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000814:	08006d74 	.word	0x08006d74
  ldr r2, =_sbss
 8000818:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800081c:	20001c6c 	.word	0x20001c6c

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_Init+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <HAL_Init+0x28>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f8d1 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	200f      	movs	r0, #15
 800083c:	f7ff fea2 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff fe14 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_IncTick+0x1c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_IncTick+0x20>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a03      	ldr	r2, [pc, #12]	@ (8000870 <HAL_IncTick+0x20>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000008 	.word	0x20000008
 8000870:	20000134 	.word	0x20000134

08000874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <HAL_GetTick+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20000134 	.word	0x20000134

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4906      	ldr	r1, [pc, #24]	@ (8000920 <__NVIC_EnableIRQ+0x34>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	@ (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	@ (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	@ 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	@ 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff4f 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff64 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ffb2 	bl	8000978 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff81 	bl	8000924 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff57 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d008      	beq.n	8000a70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2204      	movs	r2, #4
 8000a62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e020      	b.n	8000ab2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f022 020e 	bic.w	r2, r2, #14
 8000a7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f022 0201 	bic.w	r2, r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a98:	2101      	movs	r1, #1
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d005      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e051      	b.n	8000b84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 020e 	bic.w	r2, r2, #14
 8000aee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0201 	bic.w	r2, r2, #1
 8000afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_DMA_Abort_IT+0xd4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d029      	beq.n	8000b5e <HAL_DMA_Abort_IT+0xa2>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <HAL_DMA_Abort_IT+0xd8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d022      	beq.n	8000b5a <HAL_DMA_Abort_IT+0x9e>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1f      	ldr	r2, [pc, #124]	@ (8000b98 <HAL_DMA_Abort_IT+0xdc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d01a      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x98>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <HAL_DMA_Abort_IT+0xe0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d012      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x92>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_DMA_Abort_IT+0xe4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00a      	beq.n	8000b48 <HAL_DMA_Abort_IT+0x8c>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <HAL_DMA_Abort_IT+0xe8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <HAL_DMA_Abort_IT+0x86>
 8000b3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b40:	e00e      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b46:	e00b      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4c:	e008      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	e005      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b58:	e002      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	e000      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <HAL_DMA_Abort_IT+0xec>)
 8000b62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	4798      	blx	r3
    } 
  }
  return status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40020008 	.word	0x40020008
 8000b94:	4002001c 	.word	0x4002001c
 8000b98:	40020030 	.word	0x40020030
 8000b9c:	40020044 	.word	0x40020044
 8000ba0:	40020058 	.word	0x40020058
 8000ba4:	4002006c 	.word	0x4002006c
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b08b      	sub	sp, #44	@ 0x2c
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbe:	e169      	b.n	8000e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f040 8158 	bne.w	8000e8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e4c <HAL_GPIO_Init+0x2a0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d05e      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000be8:	4a98      	ldr	r2, [pc, #608]	@ (8000e4c <HAL_GPIO_Init+0x2a0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d875      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000bee:	4a98      	ldr	r2, [pc, #608]	@ (8000e50 <HAL_GPIO_Init+0x2a4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d058      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a96      	ldr	r2, [pc, #600]	@ (8000e50 <HAL_GPIO_Init+0x2a4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d86f      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000bfa:	4a96      	ldr	r2, [pc, #600]	@ (8000e54 <HAL_GPIO_Init+0x2a8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d052      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000c00:	4a94      	ldr	r2, [pc, #592]	@ (8000e54 <HAL_GPIO_Init+0x2a8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d869      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c06:	4a94      	ldr	r2, [pc, #592]	@ (8000e58 <HAL_GPIO_Init+0x2ac>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d04c      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000c0c:	4a92      	ldr	r2, [pc, #584]	@ (8000e58 <HAL_GPIO_Init+0x2ac>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d863      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c12:	4a92      	ldr	r2, [pc, #584]	@ (8000e5c <HAL_GPIO_Init+0x2b0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d046      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000c18:	4a90      	ldr	r2, [pc, #576]	@ (8000e5c <HAL_GPIO_Init+0x2b0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d85d      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d82a      	bhi.n	8000c78 <HAL_GPIO_Init+0xcc>
 8000c22:	2b12      	cmp	r3, #18
 8000c24:	d859      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c26:	a201      	add	r2, pc, #4	@ (adr r2, 8000c2c <HAL_GPIO_Init+0x80>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000ca7 	.word	0x08000ca7
 8000c30:	08000c81 	.word	0x08000c81
 8000c34:	08000c93 	.word	0x08000c93
 8000c38:	08000cd5 	.word	0x08000cd5
 8000c3c:	08000cdb 	.word	0x08000cdb
 8000c40:	08000cdb 	.word	0x08000cdb
 8000c44:	08000cdb 	.word	0x08000cdb
 8000c48:	08000cdb 	.word	0x08000cdb
 8000c4c:	08000cdb 	.word	0x08000cdb
 8000c50:	08000cdb 	.word	0x08000cdb
 8000c54:	08000cdb 	.word	0x08000cdb
 8000c58:	08000cdb 	.word	0x08000cdb
 8000c5c:	08000cdb 	.word	0x08000cdb
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cdb 	.word	0x08000cdb
 8000c68:	08000cdb 	.word	0x08000cdb
 8000c6c:	08000cdb 	.word	0x08000cdb
 8000c70:	08000c89 	.word	0x08000c89
 8000c74:	08000c9d 	.word	0x08000c9d
 8000c78:	4a79      	ldr	r2, [pc, #484]	@ (8000e60 <HAL_GPIO_Init+0x2b4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d013      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c7e:	e02c      	b.n	8000cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e029      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e024      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	3308      	adds	r3, #8
 8000c98:	623b      	str	r3, [r7, #32]
          break;
 8000c9a:	e01f      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	330c      	adds	r3, #12
 8000ca2:	623b      	str	r3, [r7, #32]
          break;
 8000ca4:	e01a      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	623b      	str	r3, [r7, #32]
          break;
 8000cb2:	e013      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d105      	bne.n	8000cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	611a      	str	r2, [r3, #16]
          break;
 8000cc6:	e009      	b.n	8000cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	615a      	str	r2, [r3, #20]
          break;
 8000cd2:	e003      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e000      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          break;
 8000cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2bff      	cmp	r3, #255	@ 0xff
 8000ce0:	d801      	bhi.n	8000ce6 <HAL_GPIO_Init+0x13a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	e001      	b.n	8000cea <HAL_GPIO_Init+0x13e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2bff      	cmp	r3, #255	@ 0xff
 8000cf0:	d802      	bhi.n	8000cf8 <HAL_GPIO_Init+0x14c>
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x152>
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfa:	3b08      	subs	r3, #8
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	210f      	movs	r1, #15
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	6a39      	ldr	r1, [r7, #32]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80b1 	beq.w	8000e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a4c      	ldr	r2, [pc, #304]	@ (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d44:	4a48      	ldr	r2, [pc, #288]	@ (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4013      	ands	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a40      	ldr	r2, [pc, #256]	@ (8000e6c <HAL_GPIO_Init+0x2c0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x1ec>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3f      	ldr	r2, [pc, #252]	@ (8000e70 <HAL_GPIO_Init+0x2c4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1e8>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1e4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3d      	ldr	r2, [pc, #244]	@ (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1e0>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e006      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	e004      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d9c:	f002 0203 	and.w	r2, r2, #3
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	4093      	lsls	r3, r2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000daa:	492f      	ldr	r1, [pc, #188]	@ (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	492c      	ldr	r1, [pc, #176]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	608b      	str	r3, [r1, #8]
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4928      	ldr	r1, [pc, #160]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	4922      	ldr	r1, [pc, #136]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60cb      	str	r3, [r1, #12]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	491e      	ldr	r1, [pc, #120]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	4918      	ldr	r1, [pc, #96]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4914      	ldr	r1, [pc, #80]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d021      	beq.n	8000e80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	490e      	ldr	r1, [pc, #56]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
 8000e48:	e021      	b.n	8000e8e <HAL_GPIO_Init+0x2e2>
 8000e4a:	bf00      	nop
 8000e4c:	10320000 	.word	0x10320000
 8000e50:	10310000 	.word	0x10310000
 8000e54:	10220000 	.word	0x10220000
 8000e58:	10210000 	.word	0x10210000
 8000e5c:	10120000 	.word	0x10120000
 8000e60:	10110000 	.word	0x10110000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40011000 	.word	0x40011000
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_GPIO_Init+0x304>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4909      	ldr	r1, [pc, #36]	@ (8000eb0 <HAL_GPIO_Init+0x304>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	3301      	adds	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f47f ae8e 	bne.w	8000bc0 <HAL_GPIO_Init+0x14>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	372c      	adds	r7, #44	@ 0x2c
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ed0:	e003      	b.n	8000eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	041a      	lsls	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	611a      	str	r2, [r3, #16]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e272      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8087 	beq.w	8001012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f04:	4b92      	ldr	r3, [pc, #584]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d00c      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f10:	4b8f      	ldr	r3, [pc, #572]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d112      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
 8000f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f28:	d10b      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2a:	4b89      	ldr	r3, [pc, #548]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d06c      	beq.n	8001010 <HAL_RCC_OscConfig+0x12c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d168      	bne.n	8001010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e24c      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f4a:	d106      	bne.n	8000f5a <HAL_RCC_OscConfig+0x76>
 8000f4c:	4b80      	ldr	r3, [pc, #512]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a7f      	ldr	r2, [pc, #508]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e02e      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b7b      	ldr	r3, [pc, #492]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a7a      	ldr	r2, [pc, #488]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b78      	ldr	r3, [pc, #480]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a77      	ldr	r2, [pc, #476]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xbc>
 8000f86:	4b72      	ldr	r3, [pc, #456]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a71      	ldr	r2, [pc, #452]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b6f      	ldr	r3, [pc, #444]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6e      	ldr	r2, [pc, #440]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b68      	ldr	r3, [pc, #416]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a67      	ldr	r2, [pc, #412]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc58 	bl	8000874 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fc54 	bl	8000874 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	@ 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e200      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4b5d      	ldr	r3, [pc, #372]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xe4>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc44 	bl	8000874 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fc40 	bl	8000874 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	@ 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e1ec      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	4b53      	ldr	r3, [pc, #332]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x10c>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d063      	beq.n	80010e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800101e:	4b4c      	ldr	r3, [pc, #304]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800102a:	4b49      	ldr	r3, [pc, #292]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b08      	cmp	r3, #8
 8001034:	d11c      	bne.n	8001070 <HAL_RCC_OscConfig+0x18c>
 8001036:	4b46      	ldr	r3, [pc, #280]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	4b43      	ldr	r3, [pc, #268]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d001      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e1c0      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b3d      	ldr	r3, [pc, #244]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4939      	ldr	r1, [pc, #228]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	e03a      	b.n	80010e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fbf9 	bl	8000874 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fbf5 	bl	8000874 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e1a1      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4927      	ldr	r1, [pc, #156]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fbd8 	bl	8000874 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fbd4 	bl	8000874 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e180      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03a      	beq.n	8001168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d019      	beq.n	800112e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_RCC_OscConfig+0x274>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fbb8 	bl	8000874 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fbb4 	bl	8000874 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e160      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_RCC_OscConfig+0x26c>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fafe 	bl	8001728 <RCC_Delay>
 800112c:	e01c      	b.n	8001168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_RCC_OscConfig+0x274>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fb9e 	bl	8000874 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113a:	e00f      	b.n	800115c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fb9a 	bl	8000874 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d908      	bls.n	800115c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e146      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	42420000 	.word	0x42420000
 8001158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	4b92      	ldr	r3, [pc, #584]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e9      	bne.n	800113c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a6 	beq.w	80012c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117a:	4b8b      	ldr	r3, [pc, #556]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b88      	ldr	r3, [pc, #544]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a87      	ldr	r2, [pc, #540]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b85      	ldr	r3, [pc, #532]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b82      	ldr	r3, [pc, #520]	@ (80013ac <HAL_RCC_OscConfig+0x4c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b7f      	ldr	r3, [pc, #508]	@ (80013ac <HAL_RCC_OscConfig+0x4c8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a7e      	ldr	r2, [pc, #504]	@ (80013ac <HAL_RCC_OscConfig+0x4c8>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fb5b 	bl	8000874 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff fb57 	bl	8000874 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	@ 0x64
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e103      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	4b75      	ldr	r3, [pc, #468]	@ (80013ac <HAL_RCC_OscConfig+0x4c8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x312>
 80011e8:	4b6f      	ldr	r3, [pc, #444]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a6e      	ldr	r2, [pc, #440]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	e02d      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x334>
 80011fe:	4b6a      	ldr	r3, [pc, #424]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a69      	ldr	r2, [pc, #420]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b67      	ldr	r3, [pc, #412]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a66      	ldr	r2, [pc, #408]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
 8001216:	e01c      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d10c      	bne.n	800123a <HAL_RCC_OscConfig+0x356>
 8001220:	4b61      	ldr	r3, [pc, #388]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a60      	ldr	r2, [pc, #384]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	4b5e      	ldr	r3, [pc, #376]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a5d      	ldr	r2, [pc, #372]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	e00b      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 800123a:	4b5b      	ldr	r3, [pc, #364]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a5a      	ldr	r2, [pc, #360]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	4b58      	ldr	r3, [pc, #352]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a57      	ldr	r2, [pc, #348]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d015      	beq.n	8001286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb0b 	bl	8000874 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fb07 	bl	8000874 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e0b1      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ee      	beq.n	8001262 <HAL_RCC_OscConfig+0x37e>
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff faf5 	bl	8000874 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff faf1 	bl	8000874 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e09b      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	4b40      	ldr	r3, [pc, #256]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ee      	bne.n	800128e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b6:	4b3c      	ldr	r3, [pc, #240]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a3b      	ldr	r2, [pc, #236]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8087 	beq.w	80013da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012cc:	4b36      	ldr	r3, [pc, #216]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d061      	beq.n	800139c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d146      	bne.n	800136e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <HAL_RCC_OscConfig+0x4cc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fac5 	bl	8000874 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fac1 	bl	8000874 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e06d      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001314:	d108      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4921      	ldr	r1, [pc, #132]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a19      	ldr	r1, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001338:	430b      	orrs	r3, r1
 800133a:	491b      	ldr	r1, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_RCC_OscConfig+0x4cc>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fa95 	bl	8000874 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fa91 	bl	8000874 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e03d      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x46a>
 800136c:	e035      	b.n	80013da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_RCC_OscConfig+0x4cc>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fa7e 	bl	8000874 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fa7a 	bl	8000874 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e026      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x498>
 800139a:	e01e      	b.n	80013da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d107      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e019      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40007000 	.word	0x40007000
 80013b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <HAL_RCC_OscConfig+0x500>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0d0      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d910      	bls.n	800142c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b67      	ldr	r3, [pc, #412]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0207 	bic.w	r2, r3, #7
 8001412:	4965      	ldr	r1, [pc, #404]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b63      	ldr	r3, [pc, #396]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0b8      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001444:	4b59      	ldr	r3, [pc, #356]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800144e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800145c:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a52      	ldr	r2, [pc, #328]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001468:	4b50      	ldr	r3, [pc, #320]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	494d      	ldr	r1, [pc, #308]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d040      	beq.n	8001508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b47      	ldr	r3, [pc, #284]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d115      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e07f      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e073      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e06b      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4936      	ldr	r1, [pc, #216]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff f9cc 	bl	8000874 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff f9c8 	bl	8000874 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e053      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 020c 	and.w	r2, r3, #12
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1eb      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d210      	bcs.n	8001538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 0207 	bic.w	r2, r3, #7
 800151e:	4922      	ldr	r1, [pc, #136]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e032      	b.n	800159e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4916      	ldr	r1, [pc, #88]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	490e      	ldr	r1, [pc, #56]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001576:	f000 f821 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 800157a:	4602      	mov	r2, r0
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	490a      	ldr	r1, [pc, #40]	@ (80015b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001588:	5ccb      	ldrb	r3, [r1, r3]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fff4 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	08006d0c 	.word	0x08006d0c
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <HAL_RCC_GetSysClockFreq+0x94>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x30>
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_GetSysClockFreq+0x36>
 80015ea:	e027      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ee:	613b      	str	r3, [r7, #16]
      break;
 80015f0:	e027      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	0c9b      	lsrs	r3, r3, #18
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d010      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_RCC_GetSysClockFreq+0x94>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	0c5b      	lsrs	r3, r3, #17
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <HAL_RCC_GetSysClockFreq+0x98>)
 800161e:	fb03 f202 	mul.w	r2, r3, r2
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e004      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	613b      	str	r3, [r7, #16]
      break;
 800163a:	e002      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_RCC_GetSysClockFreq+0x98>)
 800163e:	613b      	str	r3, [r7, #16]
      break;
 8001640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001642:	693b      	ldr	r3, [r7, #16]
}
 8001644:	4618      	mov	r0, r3
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	007a1200 	.word	0x007a1200
 8001658:	08006d24 	.word	0x08006d24
 800165c:	08006d34 	.word	0x08006d34
 8001660:	003d0900 	.word	0x003d0900

08001664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001668:	4b02      	ldr	r3, [pc, #8]	@ (8001674 <HAL_RCC_GetHCLKFreq+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000000 	.word	0x20000000

08001678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800167c:	f7ff fff2 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	4903      	ldr	r1, [pc, #12]	@ (800169c <HAL_RCC_GetPCLK1Freq+0x24>)
 800168e:	5ccb      	ldrb	r3, [r1, r3]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	08006d1c 	.word	0x08006d1c

080016a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a4:	f7ff ffde 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0adb      	lsrs	r3, r3, #11
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4903      	ldr	r1, [pc, #12]	@ (80016c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	08006d1c 	.word	0x08006d1c

080016c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	220f      	movs	r2, #15
 80016d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_RCC_GetClockConfig+0x58>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_RCC_GetClockConfig+0x58>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_RCC_GetClockConfig+0x58>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_RCC_GetClockConfig+0x58>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_RCC_GetClockConfig+0x5c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0207 	and.w	r2, r3, #7
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	40022000 	.word	0x40022000

08001728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <RCC_Delay+0x34>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <RCC_Delay+0x38>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0a5b      	lsrs	r3, r3, #9
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001744:	bf00      	nop
  }
  while (Delay --);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	60fa      	str	r2, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <RCC_Delay+0x1c>
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000000 	.word	0x20000000
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e041      	b.n	80017fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f839 	bl	8001802 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f000 f99c 	bl	8001ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d001      	beq.n	800182c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e03a      	b.n	80018a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_TIM_Base_Start_IT+0x98>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00e      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x58>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001856:	d009      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x58>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d004      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x58>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b06      	cmp	r3, #6
 800187c:	d010      	beq.n	80018a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188e:	e007      	b.n	80018a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40000400 	.word	0x40000400
 80018b4:	40000800 	.word	0x40000800

080018b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d020      	beq.n	800191c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01b      	beq.n	800191c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0202 	mvn.w	r2, #2
 80018ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8d1 	bl	8001aaa <HAL_TIM_IC_CaptureCallback>
 8001908:	e005      	b.n	8001916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f8c4 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f8d3 	bl	8001abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d020      	beq.n	8001968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01b      	beq.n	8001968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0204 	mvn.w	r2, #4
 8001938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8ab 	bl	8001aaa <HAL_TIM_IC_CaptureCallback>
 8001954:	e005      	b.n	8001962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f89e 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8ad 	bl	8001abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d020      	beq.n	80019b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01b      	beq.n	80019b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0208 	mvn.w	r2, #8
 8001984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f885 	bl	8001aaa <HAL_TIM_IC_CaptureCallback>
 80019a0:	e005      	b.n	80019ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f878 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f887 	bl	8001abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d020      	beq.n	8001a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0210 	mvn.w	r2, #16
 80019d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2208      	movs	r2, #8
 80019d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f85f 	bl	8001aaa <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f852 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f861 	bl	8001abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00c      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0201 	mvn.w	r2, #1
 8001a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe fd0c 	bl	800043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8c3 	bl	8001bce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f831 	bl	8001ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00c      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0220 	mvn.w	r2, #32
 8001a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f896 	bl	8001bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb0 <TIM_Base_SetConfig+0xd0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00b      	beq.n	8001b10 <TIM_Base_SetConfig+0x30>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afe:	d007      	beq.n	8001b10 <TIM_Base_SetConfig+0x30>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <TIM_Base_SetConfig+0xd4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d003      	beq.n	8001b10 <TIM_Base_SetConfig+0x30>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <TIM_Base_SetConfig+0xd8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d108      	bne.n	8001b22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a22      	ldr	r2, [pc, #136]	@ (8001bb0 <TIM_Base_SetConfig+0xd0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00b      	beq.n	8001b42 <TIM_Base_SetConfig+0x62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b30:	d007      	beq.n	8001b42 <TIM_Base_SetConfig+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <TIM_Base_SetConfig+0xd4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d003      	beq.n	8001b42 <TIM_Base_SetConfig+0x62>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <TIM_Base_SetConfig+0xd8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d108      	bne.n	8001b54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <TIM_Base_SetConfig+0xd0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d103      	bne.n	8001b88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f023 0201 	bic.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800

08001bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e042      	b.n	8001c78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fc68 	bl	80004dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	@ 0x24
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fd63 	bl	80026f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d175      	bne.n	8001d8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_UART_Transmit+0x2c>
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e06e      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2221      	movs	r2, #33	@ 0x21
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cbe:	f7fe fdd9 	bl	8000874 <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cd8:	d108      	bne.n	8001cec <HAL_UART_Transmit+0x6c>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	e003      	b.n	8001cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cf4:	e02e      	b.n	8001d54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2180      	movs	r1, #128	@ 0x80
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fb01 	bl	8002308 <UART_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e03a      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10b      	bne.n	8001d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3302      	adds	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	e007      	b.n	8001d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1cb      	bne.n	8001cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2140      	movs	r1, #64	@ 0x40
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 facd 	bl	8002308 <UART_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_UART_IRQHandler+0x66>
 8001dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fbbc 	bl	8002574 <UART_Receive_IT>
      return;
 8001dfc:	e25b      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80de 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x22c>
 8001e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80d1 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xae>
 8001e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
 8001e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_UART_IRQHandler+0xf6>
 8001e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f043 0204 	orr.w	r2, r3, #4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <HAL_UART_IRQHandler+0x126>
 8001e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f043 0208 	orr.w	r2, r3, #8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 81f2 	beq.w	80022ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x14e>
 8001ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fb47 	bl	8002574 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_UART_IRQHandler+0x17a>
 8001f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04f      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fa51 	bl	80023ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d041      	beq.n	8001faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f34:	e853 3f00 	ldrex	r3, [r3]
 8001f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3314      	adds	r3, #20
 8001f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f62:	e841 2300 	strex	r3, r2, [r1]
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1d9      	bne.n	8001f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d013      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002178 <HAL_UART_IRQHandler+0x3e0>)
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fd98 	bl	8000abc <HAL_DMA_Abort_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	e00e      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f99c 	bl	80022e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e00a      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f998 	bl	80022e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	e006      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f994 	bl	80022e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001fbe:	e175      	b.n	80022ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	bf00      	nop
    return;
 8001fc2:	e173      	b.n	80022ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f040 814f 	bne.w	800226c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8148 	beq.w	800226c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8141 	beq.w	800226c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80b6 	beq.w	800217c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800201c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8145 	beq.w	80022b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800202a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800202e:	429a      	cmp	r2, r3
 8002030:	f080 813e 	bcs.w	80022b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800203a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b20      	cmp	r3, #32
 8002044:	f000 8088 	beq.w	8002158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002052:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002066:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002074:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002080:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1d9      	bne.n	8002048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3314      	adds	r3, #20
 800209a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800209e:	e853 3f00 	ldrex	r3, [r3]
 80020a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3314      	adds	r3, #20
 80020b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80020bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80020c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020c4:	e841 2300 	strex	r3, r2, [r1]
 80020c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80020ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e1      	bne.n	8002094 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3314      	adds	r3, #20
 80020d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020da:	e853 3f00 	ldrex	r3, [r3]
 80020de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3314      	adds	r3, #20
 80020f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80020f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80020fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e3      	bne.n	80020d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002128:	f023 0310 	bic.w	r3, r3, #16
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800213a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800213c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fc77 	bl	8000a46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002166:	b29b      	uxth	r3, r3
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	b29b      	uxth	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8bf 	bl	80022f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002174:	e09c      	b.n	80022b0 <HAL_UART_IRQHandler+0x518>
 8002176:	bf00      	nop
 8002178:	0800247f 	.word	0x0800247f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808e 	beq.w	80022b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8089 	beq.w	80022b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ac:	e853 3f00 	ldrex	r3, [r3]
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80021b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80021c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80021c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80021d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e3      	bne.n	80021a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	623b      	str	r3, [r7, #32]
   return(result);
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e3      	bne.n	80021da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	330c      	adds	r3, #12
 8002240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002244:	61fa      	str	r2, [r7, #28]
 8002246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002248:	69b9      	ldr	r1, [r7, #24]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	617b      	str	r3, [r7, #20]
   return(result);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e3      	bne.n	8002220 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800225e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f844 	bl	80022f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800226a:	e023      	b.n	80022b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800226c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_UART_IRQHandler+0x4f4>
 8002278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f90e 	bl	80024a6 <UART_Transmit_IT>
    return;
 800228a:	e014      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800228c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <HAL_UART_IRQHandler+0x51e>
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f94d 	bl	8002544 <UART_EndTransmit_IT>
    return;
 80022aa:	e004      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80022ac:	bf00      	nop
 80022ae:	e002      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022b4:	bf00      	nop
  }
}
 80022b6:	37e8      	adds	r7, #232	@ 0xe8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002318:	e03b      	b.n	8002392 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d037      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7fe faa7 	bl	8000874 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <UART_WaitOnFlagUntilTimeout+0x30>
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e03a      	b.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d023      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0x8a>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b80      	cmp	r3, #128	@ 0x80
 800234e:	d020      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b40      	cmp	r3, #64	@ 0x40
 8002354:	d01d      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b08      	cmp	r3, #8
 8002362:	d116      	bne.n	8002392 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f81d 	bl	80023ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2208      	movs	r2, #8
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	429a      	cmp	r2, r3
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d0b4      	beq.n	800231a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b095      	sub	sp, #84	@ 0x54
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80023e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e5      	bne.n	80023c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3314      	adds	r3, #20
 80023fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	61fb      	str	r3, [r7, #28]
   return(result);
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800241c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e5      	bne.n	80023f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	2b01      	cmp	r3, #1
 8002430:	d119      	bne.n	8002466 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	60bb      	str	r3, [r7, #8]
   return(result);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 0310 	bic.w	r3, r3, #16
 8002448:	647b      	str	r3, [r7, #68]	@ 0x44
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002452:	61ba      	str	r2, [r7, #24]
 8002454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6979      	ldr	r1, [r7, #20]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	613b      	str	r3, [r7, #16]
   return(result);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e5      	bne.n	8002432 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002474:	bf00      	nop
 8002476:	3754      	adds	r7, #84	@ 0x54
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7ff ff21 	bl	80022e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b21      	cmp	r3, #33	@ 0x21
 80024b8:	d13e      	bne.n	8002538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c2:	d114      	bne.n	80024ee <UART_Transmit_IT+0x48>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d110      	bne.n	80024ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	1c9a      	adds	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	621a      	str	r2, [r3, #32]
 80024ec:	e008      	b.n	8002500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6211      	str	r1, [r2, #32]
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29b      	uxth	r3, r3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4619      	mov	r1, r3
 800250e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e000      	b.n	800253a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800255a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fea9 	bl	80022bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	@ 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b22      	cmp	r3, #34	@ 0x22
 8002586:	f040 80ae 	bne.w	80026e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002592:	d117      	bne.n	80025c4 <UART_Receive_IT+0x50>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d113      	bne.n	80025c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	1c9a      	adds	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80025c2:	e026      	b.n	8002612 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d6:	d007      	beq.n	80025e8 <UART_Receive_IT+0x74>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <UART_Receive_IT+0x82>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e008      	b.n	8002608 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002602:	b2da      	uxtb	r2, r3
 8002604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002606:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4619      	mov	r1, r3
 8002620:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002622:	2b00      	cmp	r3, #0
 8002624:	d15d      	bne.n	80026e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0220 	bic.w	r2, r2, #32
 8002634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002644:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	d135      	bne.n	80026d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	613b      	str	r3, [r7, #16]
   return(result);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f023 0310 	bic.w	r3, r3, #16
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002692:	623a      	str	r2, [r7, #32]
 8002694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	69f9      	ldr	r1, [r7, #28]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	61bb      	str	r3, [r7, #24]
   return(result);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e5      	bne.n	8002672 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d10a      	bne.n	80026ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fe0e 	bl	80022f2 <HAL_UARTEx_RxEventCallback>
 80026d6:	e002      	b.n	80026de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fdf8 	bl	80022ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e002      	b.n	80026e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3730      	adds	r7, #48	@ 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800272a:	f023 030c 	bic.w	r3, r3, #12
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	430b      	orrs	r3, r1
 8002736:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2c      	ldr	r2, [pc, #176]	@ (8002804 <UART_SetConfig+0x114>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002758:	f7fe ffa2 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	e002      	b.n	8002766 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002760:	f7fe ff8a 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8002764:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009a      	lsls	r2, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <UART_SetConfig+0x118>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	0119      	lsls	r1, r3, #4
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009a      	lsls	r2, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <UART_SetConfig+0x118>)
 800279e:	fba3 0302 	umull	r0, r3, r3, r2
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2064      	movs	r0, #100	@ 0x64
 80027a6:	fb00 f303 	mul.w	r3, r0, r3
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	3332      	adds	r3, #50	@ 0x32
 80027b0:	4a15      	ldr	r2, [pc, #84]	@ (8002808 <UART_SetConfig+0x118>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027bc:	4419      	add	r1, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009a      	lsls	r2, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <UART_SetConfig+0x118>)
 80027d6:	fba3 0302 	umull	r0, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2064      	movs	r0, #100	@ 0x64
 80027de:	fb00 f303 	mul.w	r3, r0, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	3332      	adds	r3, #50	@ 0x32
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <UART_SetConfig+0x118>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	440a      	add	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40013800 	.word	0x40013800
 8002808:	51eb851f 	.word	0x51eb851f

0800280c <__NVIC_SetPriority>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	@ (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	@ (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <SysTick_Handler+0x1c>)
 8002866:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002868:	f002 f962 	bl	8004b30 <xTaskGetSchedulerState>
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002872:	f002 ff41 	bl	80056f8 <xPortSysTickHandler>
  }
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002884:	2100      	movs	r1, #0
 8002886:	f06f 0004 	mvn.w	r0, #4
 800288a:	f7ff ffbf 	bl	800280c <__NVIC_SetPriority>
#endif
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800289a:	f3ef 8305 	mrs	r3, IPSR
 800289e:	603b      	str	r3, [r7, #0]
  return(result);
 80028a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028a6:	f06f 0305 	mvn.w	r3, #5
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	e00c      	b.n	80028c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <osKernelInitialize+0x40>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028b6:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <osKernelInitialize+0x40>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	e002      	b.n	80028c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000138 	.word	0x20000138

080028d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028de:	f3ef 8305 	mrs	r3, IPSR
 80028e2:	603b      	str	r3, [r7, #0]
  return(result);
 80028e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028ea:	f06f 0305 	mvn.w	r3, #5
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	e010      	b.n	8002914 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <osKernelStart+0x48>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d109      	bne.n	800290e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028fa:	f7ff ffc1 	bl	8002880 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <osKernelStart+0x48>)
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002904:	f001 fc12 	bl	800412c <vTaskStartScheduler>
      stat = osOK;
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	e002      	b.n	8002914 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000138 	.word	0x20000138

08002924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	@ 0x38
 8002928:	af04      	add	r7, sp, #16
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002934:	f3ef 8305 	mrs	r3, IPSR
 8002938:	617b      	str	r3, [r7, #20]
  return(result);
 800293a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800293c:	2b00      	cmp	r3, #0
 800293e:	d17e      	bne.n	8002a3e <osThreadNew+0x11a>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07b      	beq.n	8002a3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800294a:	2318      	movs	r3, #24
 800294c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d045      	beq.n	80029ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <osThreadNew+0x48>
        name = attr->name;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <osThreadNew+0x6e>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b38      	cmp	r3, #56	@ 0x38
 8002984:	d805      	bhi.n	8002992 <osThreadNew+0x6e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <osThreadNew+0x72>
        return (NULL);
 8002992:	2300      	movs	r3, #0
 8002994:	e054      	b.n	8002a40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00e      	beq.n	80029cc <osThreadNew+0xa8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2ba7      	cmp	r3, #167	@ 0xa7
 80029b4:	d90a      	bls.n	80029cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <osThreadNew+0xa8>
        mem = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e010      	b.n	80029ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10c      	bne.n	80029ee <osThreadNew+0xca>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <osThreadNew+0xca>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <osThreadNew+0xca>
          mem = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e001      	b.n	80029ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d110      	bne.n	8002a16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029fc:	9202      	str	r2, [sp, #8]
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f001 f99a 	bl	8003d44 <xTaskCreateStatic>
 8002a10:	4603      	mov	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e013      	b.n	8002a3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d110      	bne.n	8002a3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f001 f9e8 	bl	8003e04 <xTaskCreate>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <osThreadNew+0x11a>
            hTask = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a3e:	693b      	ldr	r3, [r7, #16]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3728      	adds	r7, #40	@ 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a50:	f3ef 8305 	mrs	r3, IPSR
 8002a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <osDelay+0x1c>
    stat = osErrorISR;
 8002a5c:	f06f 0305 	mvn.w	r3, #5
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e007      	b.n	8002a74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f001 fb26 	bl	80040c0 <vTaskDelay>
    }
  }

  return (stat);
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a8a:	f3ef 8305 	mrs	r3, IPSR
 8002a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a90:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d12d      	bne.n	8002af2 <osEventFlagsNew+0x74>
    mem = -1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d015      	beq.n	8002ace <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <osEventFlagsNew+0x3a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b1f      	cmp	r3, #31
 8002ab0:	d902      	bls.n	8002ab8 <osEventFlagsNew+0x3a>
        mem = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e00c      	b.n	8002ad2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d108      	bne.n	8002ad2 <osEventFlagsNew+0x54>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <osEventFlagsNew+0x54>
          mem = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e001      	b.n	8002ad2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f917 	bl	8002d10 <xEventGroupCreateStatic>
 8002ae2:	6178      	str	r0, [r7, #20]
 8002ae4:	e005      	b.n	8002af2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002aec:	f000 f949 	bl	8002d82 <xEventGroupCreate>
 8002af0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002af2:	697b      	ldr	r3, [r7, #20]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <osEventFlagsSet+0x1c>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b16:	d303      	bcc.n	8002b20 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002b18:	f06f 0303 	mvn.w	r3, #3
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e028      	b.n	8002b72 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b20:	f3ef 8305 	mrs	r3, IPSR
 8002b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01d      	beq.n	8002b68 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002b30:	f107 0308 	add.w	r3, r7, #8
 8002b34:	461a      	mov	r2, r3
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	6938      	ldr	r0, [r7, #16]
 8002b3a:	f000 fb47 	bl	80031cc <xEventGroupSetBitsFromISR>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8002b44:	f06f 0302 	mvn.w	r3, #2
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e012      	b.n	8002b72 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <osEventFlagsSet+0x76>
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <osEventFlagsSet+0x80>)
 8002b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	e004      	b.n	8002b72 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	6938      	ldr	r0, [r7, #16]
 8002b6c:	f000 fa67 	bl	800303e <xEventGroupSetBits>
 8002b70:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002b72:	697b      	ldr	r3, [r7, #20]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <osEventFlagsClear+0x1c>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9a:	d303      	bcc.n	8002ba4 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002b9c:	f06f 0303 	mvn.w	r3, #3
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e019      	b.n	8002bd8 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba4:	f3ef 8305 	mrs	r3, IPSR
 8002ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002baa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002bb0:	6938      	ldr	r0, [r7, #16]
 8002bb2:	f000 fa21 	bl	8002ff8 <xEventGroupGetBitsFromISR>
 8002bb6:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	6938      	ldr	r0, [r7, #16]
 8002bbc:	f000 fa08 	bl	8002fd0 <xEventGroupClearBitsFromISR>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 8002bc6:	f06f 0302 	mvn.w	r3, #2
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e004      	b.n	8002bd8 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	6938      	ldr	r0, [r7, #16]
 8002bd2:	f000 f9c3 	bl	8002f5c <xEventGroupClearBits>
 8002bd6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002bd8:	697b      	ldr	r3, [r7, #20]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08c      	sub	sp, #48	@ 0x30
 8002be6:	af02      	add	r7, sp, #8
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <osEventFlagsWait+0x20>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c00:	d303      	bcc.n	8002c0a <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002c02:	f06f 0303 	mvn.w	r3, #3
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	e04b      	b.n	8002ca2 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c0a:	f3ef 8305 	mrs	r3, IPSR
 8002c0e:	617b      	str	r3, [r7, #20]
  return(result);
 8002c10:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002c16:	f06f 0305 	mvn.w	r3, #5
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e041      	b.n	8002ca2 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2c:	e001      	b.n	8002c32 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	e001      	b.n	8002c46 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	69b8      	ldr	r0, [r7, #24]
 8002c52:	f000 f8b1 	bl	8002db8 <xEventGroupWaitBits>
 8002c56:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4013      	ands	r3, r2
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d019      	beq.n	8002ca2 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8002c74:	f06f 0301 	mvn.w	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e012      	b.n	8002ca2 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002c7c:	f06f 0302 	mvn.w	r3, #2
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e00e      	b.n	8002ca2 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8002c94:	f06f 0301 	mvn.w	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e002      	b.n	8002ca2 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002c9c:	f06f 0302 	mvn.w	r3, #2
 8002ca0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a06      	ldr	r2, [pc, #24]	@ (8002cd4 <vApplicationGetIdleTaskMemory+0x28>)
 8002cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4a05      	ldr	r2, [pc, #20]	@ (8002cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	2000013c 	.word	0x2000013c
 8002cd8:	200001e4 	.word	0x200001e4

08002cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a07      	ldr	r2, [pc, #28]	@ (8002d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a06      	ldr	r2, [pc, #24]	@ (8002d0c <vApplicationGetTimerTaskMemory+0x30>)
 8002cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cfa:	601a      	str	r2, [r3, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	200003e4 	.word	0x200003e4
 8002d0c:	2000048c 	.word	0x2000048c

08002d10 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	e7fd      	b.n	8002d32 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002d36:	2320      	movs	r3, #32
 8002d38:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d00b      	beq.n	8002d58 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60fb      	str	r3, [r7, #12]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fa41 	bl	80031f4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2201      	movs	r2, #1
 8002d76:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002d78:	697b      	ldr	r3, [r7, #20]
	}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002d88:	2020      	movs	r0, #32
 8002d8a:	f002 fd39 	bl	8005800 <pvPortMalloc>
 8002d8e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fa27 	bl	80031f4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002dac:	687b      	ldr	r3, [r7, #4]
	}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b090      	sub	sp, #64	@ 0x40
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <xEventGroupWaitBits+0x38>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	623b      	str	r3, [r7, #32]
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df6:	d30b      	bcc.n	8002e10 <xEventGroupWaitBits+0x58>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <xEventGroupWaitBits+0x76>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61bb      	str	r3, [r7, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	e7fd      	b.n	8002e2a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e2e:	f001 fe7f 	bl	8004b30 <xTaskGetSchedulerState>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <xEventGroupWaitBits+0x86>
 8002e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <xEventGroupWaitBits+0x8a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <xEventGroupWaitBits+0x8c>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	617b      	str	r3, [r7, #20]
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8002e60:	f001 f9d4 	bl	800420c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e70:	f000 f98b 	bl	800318a <prvTestWaitCondition>
 8002e74:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e020      	b.n	8002edc <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea8:	e018      	b.n	8002edc <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec8:	1d18      	adds	r0, r3, #4
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f001 fb98 	bl	8004608 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002edc:	f001 f9a4 	bl	8004228 <xTaskResumeAll>
 8002ee0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d031      	beq.n	8002f4c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <xEventGroupWaitBits+0x1a0>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002efe:	f001 fea5 	bl	8004c4c <uxTaskResetEventItemValue>
 8002f02:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11a      	bne.n	8002f44 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8002f0e:	f002 fb75 	bl	80055fc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f1e:	f000 f934 	bl	800318a <prvTestWaitCondition>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d009      	beq.n	8002f3c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8002f40:	f002 fb8c 	bl	800565c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3740      	adds	r7, #64	@ 0x40
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <xEventGroupClearBits+0x2c>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	60fb      	str	r3, [r7, #12]
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f8e:	d30b      	bcc.n	8002fa8 <xEventGroupClearBits+0x4c>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	60bb      	str	r3, [r7, #8]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8002fa8:	f002 fb28 	bl	80055fc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002fc0:	f002 fb4c 	bl	800565c <vPortExitCritical>

	return uxReturn;
 8002fc4:	693b      	ldr	r3, [r7, #16]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002fda:	2300      	movs	r3, #0
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <xEventGroupClearBitsFromISR+0x24>)
 8002fe2:	f002 f9f7 	bl	80053d4 <xTimerPendFunctionCallFromISR>
 8002fe6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
	}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	08003171 	.word	0x08003171

08002ff8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003004:	f3ef 8211 	mrs	r2, BASEPRI
 8003008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	60fa      	str	r2, [r7, #12]
 800301a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800301c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800301e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003030:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8003032:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8003034:	4618      	mov	r0, r3
 8003036:	3724      	adds	r7, #36	@ 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08e      	sub	sp, #56	@ 0x38
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003048:	2300      	movs	r3, #0
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <xEventGroupSetBits+0x34>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	613b      	str	r3, [r7, #16]
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003078:	d30b      	bcc.n	8003092 <xEventGroupSetBits+0x54>
	__asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	60fb      	str	r3, [r7, #12]
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	e7fd      	b.n	800308e <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	3304      	adds	r3, #4
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	3308      	adds	r3, #8
 800309c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800309e:	f001 f8b5 	bl	800420c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80030b4:	e03c      	b.n	8003130 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80030b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80030bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80030cc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030d4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d108      	bne.n	80030f2 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f0:	e008      	b.n	8003104 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d101      	bne.n	8003104 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003124:	4619      	mov	r1, r3
 8003126:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003128:	f001 fb3c 	bl	80047a4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8003130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	429a      	cmp	r2, r3
 8003136:	d1be      	bne.n	80030b6 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	43db      	mvns	r3, r3
 8003140:	401a      	ands	r2, r3
 8003142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003144:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003146:	f001 f86f 	bl	8004228 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314c:	681b      	ldr	r3, [r3, #0]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3738      	adds	r7, #56	@ 0x38
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff6b 	bl	800303e <xEventGroupSetBits>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff feed 	bl	8002f5c <xEventGroupClearBits>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e007      	b.n	80031c0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4013      	ands	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d101      	bne.n	80031c0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80031bc:	2301      	movs	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80031c0:	697b      	ldr	r3, [r7, #20]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	4804      	ldr	r0, [pc, #16]	@ (80031f0 <xEventGroupSetBitsFromISR+0x24>)
 80031e0:	f002 f8f8 	bl	80053d4 <xTimerPendFunctionCallFromISR>
 80031e4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80031e6:	697b      	ldr	r3, [r7, #20]
	}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08003157 	.word	0x08003157

080031f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f103 0208 	add.w	r2, r3, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f103 0208 	add.w	r2, r3, #8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f103 0208 	add.w	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e00c      	b.n	80032ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3308      	adds	r3, #8
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e002      	b.n	80032be <vListInsert+0x2e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d2f6      	bcs.n	80032b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6852      	ldr	r2, [r2, #4]
 8003320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d103      	bne.n	8003334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <xQueueGenericReset+0x2c>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	60bb      	str	r3, [r7, #8]
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003380:	f002 f93c 	bl	80055fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	441a      	add	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	441a      	add	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	22ff      	movs	r2, #255	@ 0xff
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	22ff      	movs	r2, #255	@ 0xff
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01a      	beq.n	8003414 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3310      	adds	r3, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f97a 	bl	80046dc <xTaskRemoveFromEventList>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <xQueueGenericReset+0xd0>)
 80033f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	e009      	b.n	8003414 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3310      	adds	r3, #16
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fef5 	bl	80031f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3324      	adds	r3, #36	@ 0x24
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fef0 	bl	80031f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003414:	f002 f922 	bl	800565c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	@ 0x38
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <xQueueGenericCreateStatic+0x56>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <xQueueGenericCreateStatic+0x5a>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <xQueueGenericCreateStatic+0x5c>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <xQueueGenericCreateStatic+0x84>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <xQueueGenericCreateStatic+0x88>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <xQueueGenericCreateStatic+0x8a>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	61fb      	str	r3, [r7, #28]
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034ce:	2350      	movs	r3, #80	@ 0x50
 80034d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b50      	cmp	r3, #80	@ 0x50
 80034d6:	d00b      	beq.n	80034f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61bb      	str	r3, [r7, #24]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80034f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80034f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003504:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f805 	bl	8003522 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800351a:	4618      	mov	r0, r3
 800351c:	3730      	adds	r7, #48	@ 0x30
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e002      	b.n	8003544 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003550:	2101      	movs	r1, #1
 8003552:	69b8      	ldr	r0, [r7, #24]
 8003554:	f7ff fefe 	bl	8003354 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	@ 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003576:	2300      	movs	r3, #0
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <xQueueGenericSend+0x34>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <xQueueGenericSend+0x42>
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <xQueueGenericSend+0x46>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <xQueueGenericSend+0x48>
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <xQueueGenericSend+0x64>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d103      	bne.n	80035da <xQueueGenericSend+0x72>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <xQueueGenericSend+0x76>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueGenericSend+0x78>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <xQueueGenericSend+0x94>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	623b      	str	r3, [r7, #32]
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035fc:	f001 fa98 	bl	8004b30 <xTaskGetSchedulerState>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <xQueueGenericSend+0xa4>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <xQueueGenericSend+0xa8>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <xQueueGenericSend+0xaa>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <xQueueGenericSend+0xc6>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	61fb      	str	r3, [r7, #28]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800362e:	f001 ffe5 	bl	80055fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <xQueueGenericSend+0xdc>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d129      	bne.n	8003698 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800364a:	f000 fa0f 	bl	8003a6c <prvCopyDataToQueue>
 800364e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	3324      	adds	r3, #36	@ 0x24
 800365c:	4618      	mov	r0, r3
 800365e:	f001 f83d 	bl	80046dc <xTaskRemoveFromEventList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003668:	4b3f      	ldr	r3, [pc, #252]	@ (8003768 <xQueueGenericSend+0x200>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	e00a      	b.n	8003690 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003680:	4b39      	ldr	r3, [pc, #228]	@ (8003768 <xQueueGenericSend+0x200>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003690:	f001 ffe4 	bl	800565c <vPortExitCritical>
				return pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	e063      	b.n	8003760 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800369e:	f001 ffdd 	bl	800565c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e05c      	b.n	8003760 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 f8db 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036ba:	f001 ffcf 	bl	800565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036be:	f000 fda5 	bl	800420c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036c2:	f001 ff9b 	bl	80055fc <vPortEnterCritical>
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d103      	bne.n	80036dc <xQueueGenericSend+0x174>
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d103      	bne.n	80036f2 <xQueueGenericSend+0x18a>
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036f2:	f001 ffb3 	bl	800565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036f6:	1d3a      	adds	r2, r7, #4
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f8ca 	bl	8004898 <xTaskCheckForTimeOut>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d124      	bne.n	8003754 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800370a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800370c:	f000 faa6 	bl	8003c5c <prvIsQueueFull>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	3310      	adds	r3, #16
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 ff4c 	bl	80045bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003726:	f000 fa31 	bl	8003b8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800372a:	f000 fd7d 	bl	8004228 <xTaskResumeAll>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	f47f af7c 	bne.w	800362e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <xQueueGenericSend+0x200>)
 8003738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	e772      	b.n	800362e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800374a:	f000 fa1f 	bl	8003b8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800374e:	f000 fd6b 	bl	8004228 <xTaskResumeAll>
 8003752:	e76c      	b.n	800362e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003756:	f000 fa19 	bl	8003b8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800375a:	f000 fd65 	bl	8004228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800375e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003760:	4618      	mov	r0, r3
 8003762:	3738      	adds	r7, #56	@ 0x38
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b090      	sub	sp, #64	@ 0x40
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <xQueueGenericSendFromISR+0x3e>
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <xQueueGenericSendFromISR+0x42>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueGenericSendFromISR+0x44>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d103      	bne.n	80037da <xQueueGenericSendFromISR+0x6e>
 80037d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <xQueueGenericSendFromISR+0x72>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <xQueueGenericSendFromISR+0x74>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	623b      	str	r3, [r7, #32]
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037fc:	f001 ffc0 	bl	8005780 <vPortValidateInterruptPriority>
	__asm volatile
 8003800:	f3ef 8211 	mrs	r2, BASEPRI
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	61fa      	str	r2, [r7, #28]
 8003816:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003818:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <xQueueGenericSendFromISR+0xc2>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d12f      	bne.n	800388e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003834:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003844:	f000 f912 	bl	8003a6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003848:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d112      	bne.n	8003878 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	3324      	adds	r3, #36	@ 0x24
 800385e:	4618      	mov	r0, r3
 8003860:	f000 ff3c 	bl	80046dc <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e007      	b.n	8003888 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003878:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800387c:	3301      	adds	r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	b25a      	sxtb	r2, r3
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003888:	2301      	movs	r3, #1
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800388c:	e001      	b.n	8003892 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800388e:	2300      	movs	r3, #0
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f383 8811 	msr	BASEPRI, r3
}
 800389c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800389e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3740      	adds	r7, #64	@ 0x40
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	@ 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <xQueueReceive+0x32>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	623b      	str	r3, [r7, #32]
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	e7fd      	b.n	80038d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <xQueueReceive+0x40>
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <xQueueReceive+0x44>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <xQueueReceive+0x46>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <xQueueReceive+0x62>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	61fb      	str	r3, [r7, #28]
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	e7fd      	b.n	8003906 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800390a:	f001 f911 	bl	8004b30 <xTaskGetSchedulerState>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <xQueueReceive+0x72>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <xQueueReceive+0x76>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <xQueueReceive+0x78>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <xQueueReceive+0x94>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	61bb      	str	r3, [r7, #24]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800393c:	f001 fe5e 	bl	80055fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01f      	beq.n	800398c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003950:	f000 f8f6 	bl	8003b40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	1e5a      	subs	r2, r3, #1
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00f      	beq.n	8003984 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	3310      	adds	r3, #16
 8003968:	4618      	mov	r0, r3
 800396a:	f000 feb7 	bl	80046dc <xTaskRemoveFromEventList>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003974:	4b3c      	ldr	r3, [pc, #240]	@ (8003a68 <xQueueReceive+0x1c0>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003984:	f001 fe6a 	bl	800565c <vPortExitCritical>
				return pdPASS;
 8003988:	2301      	movs	r3, #1
 800398a:	e069      	b.n	8003a60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003992:	f001 fe63 	bl	800565c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003996:	2300      	movs	r3, #0
 8003998:	e062      	b.n	8003a60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 ff61 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ae:	f001 fe55 	bl	800565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039b2:	f000 fc2b 	bl	800420c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039b6:	f001 fe21 	bl	80055fc <vPortEnterCritical>
 80039ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d103      	bne.n	80039d0 <xQueueReceive+0x128>
 80039c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d103      	bne.n	80039e6 <xQueueReceive+0x13e>
 80039de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e6:	f001 fe39 	bl	800565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039ea:	1d3a      	adds	r2, r7, #4
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 ff50 	bl	8004898 <xTaskCheckForTimeOut>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d123      	bne.n	8003a46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a00:	f000 f916 	bl	8003c30 <prvIsQueueEmpty>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	3324      	adds	r3, #36	@ 0x24
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fdd2 	bl	80045bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a1a:	f000 f8b7 	bl	8003b8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a1e:	f000 fc03 	bl	8004228 <xTaskResumeAll>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d189      	bne.n	800393c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a28:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <xQueueReceive+0x1c0>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	e780      	b.n	800393c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a3c:	f000 f8a6 	bl	8003b8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a40:	f000 fbf2 	bl	8004228 <xTaskResumeAll>
 8003a44:	e77a      	b.n	800393c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a48:	f000 f8a0 	bl	8003b8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a4c:	f000 fbec 	bl	8004228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a52:	f000 f8ed 	bl	8003c30 <prvIsQueueEmpty>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f43f af6f 	beq.w	800393c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3730      	adds	r7, #48	@ 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d14d      	bne.n	8003b2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f868 	bl	8004b6c <xTaskPriorityDisinherit>
 8003a9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	e043      	b.n	8003b2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d119      	bne.n	8003ae0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6858      	ldr	r0, [r3, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	f002 fb69 	bl	800618e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d32b      	bcc.n	8003b2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	e026      	b.n	8003b2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68d8      	ldr	r0, [r3, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	f002 fb4f 	bl	800618e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	425b      	negs	r3, r3
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d207      	bcs.n	8003b1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	425b      	negs	r3, r3
 8003b16:	441a      	add	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d105      	bne.n	8003b2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b36:	697b      	ldr	r3, [r7, #20]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d303      	bcc.n	8003b74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68d9      	ldr	r1, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6838      	ldr	r0, [r7, #0]
 8003b80:	f002 fb05 	bl	800618e <memcpy>
	}
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b94:	f001 fd32 	bl	80055fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ba0:	e011      	b.n	8003bc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d012      	beq.n	8003bd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	@ 0x24
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fd94 	bl	80046dc <xTaskRemoveFromEventList>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bba:	f000 fed1 	bl	8004960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	dce9      	bgt.n	8003ba2 <prvUnlockQueue+0x16>
 8003bce:	e000      	b.n	8003bd2 <prvUnlockQueue+0x46>
					break;
 8003bd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	22ff      	movs	r2, #255	@ 0xff
 8003bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003bda:	f001 fd3f 	bl	800565c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bde:	f001 fd0d 	bl	80055fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003be8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bea:	e011      	b.n	8003c10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d012      	beq.n	8003c1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fd6f 	bl	80046dc <xTaskRemoveFromEventList>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c04:	f000 feac 	bl	8004960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dce9      	bgt.n	8003bec <prvUnlockQueue+0x60>
 8003c18:	e000      	b.n	8003c1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	22ff      	movs	r2, #255	@ 0xff
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c24:	f001 fd1a 	bl	800565c <vPortExitCritical>
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c38:	f001 fce0 	bl	80055fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e001      	b.n	8003c4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c4e:	f001 fd05 	bl	800565c <vPortExitCritical>

	return xReturn;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c64:	f001 fcca 	bl	80055fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d102      	bne.n	8003c7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e001      	b.n	8003c7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c7e:	f001 fced 	bl	800565c <vPortExitCritical>

	return xReturn;
 8003c82:	68fb      	ldr	r3, [r7, #12]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e014      	b.n	8003cc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd8 <vQueueAddToRegistry+0x4c>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ca8:	490b      	ldr	r1, [pc, #44]	@ (8003cd8 <vQueueAddToRegistry+0x4c>)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cb2:	4a09      	ldr	r2, [pc, #36]	@ (8003cd8 <vQueueAddToRegistry+0x4c>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cbe:	e006      	b.n	8003cce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b07      	cmp	r3, #7
 8003cca:	d9e7      	bls.n	8003c9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	2000088c 	.word	0x2000088c

08003cdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cec:	f001 fc86 	bl	80055fc <vPortEnterCritical>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d103      	bne.n	8003d06 <vQueueWaitForMessageRestricted+0x2a>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d103      	bne.n	8003d1c <vQueueWaitForMessageRestricted+0x40>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d1c:	f001 fc9e 	bl	800565c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3324      	adds	r3, #36	@ 0x24
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fca7 	bl	8004684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7ff ff28 	bl	8003b8c <prvUnlockQueue>
	}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	@ 0x38
 8003d48:	af04      	add	r7, sp, #16
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	623b      	str	r3, [r7, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	61fb      	str	r3, [r7, #28]
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	e7fd      	b.n	8003d8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d8e:	23a8      	movs	r3, #168	@ 0xa8
 8003d90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2ba8      	cmp	r3, #168	@ 0xa8
 8003d96:	d00b      	beq.n	8003db0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61bb      	str	r3, [r7, #24]
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003db0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01e      	beq.n	8003df6 <xTaskCreateStatic+0xb2>
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01b      	beq.n	8003df6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9303      	str	r3, [sp, #12]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	9302      	str	r3, [sp, #8]
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f851 	bl	8003e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003df0:	f000 f8f6 	bl	8003fe0 <prvAddNewTaskToReadyList>
 8003df4:	e001      	b.n	8003dfa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dfa:	697b      	ldr	r3, [r7, #20]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	@ 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	@ 0x30
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fcf1 	bl	8005800 <pvPortMalloc>
 8003e1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e26:	20a8      	movs	r0, #168	@ 0xa8
 8003e28:	f001 fcea 	bl	8005800 <pvPortMalloc>
 8003e2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e3a:	e005      	b.n	8003e48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e3c:	6978      	ldr	r0, [r7, #20]
 8003e3e:	f001 fdad 	bl	800599c <vPortFree>
 8003e42:	e001      	b.n	8003e48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d017      	beq.n	8003e7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9303      	str	r3, [sp, #12]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f80f 	bl	8003e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e72:	69f8      	ldr	r0, [r7, #28]
 8003e74:	f000 f8b4 	bl	8003fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e002      	b.n	8003e84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e84:	69bb      	ldr	r3, [r7, #24]
	}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	21a5      	movs	r1, #165	@ 0xa5
 8003eaa:	f002 f89f 	bl	8005fec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f023 0307 	bic.w	r3, r3, #7
 8003ec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	617b      	str	r3, [r7, #20]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01f      	beq.n	8003f30 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	e012      	b.n	8003f1c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	7819      	ldrb	r1, [r3, #0]
 8003efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	3334      	adds	r3, #52	@ 0x34
 8003f06:	460a      	mov	r2, r1
 8003f08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d9e9      	bls.n	8003ef6 <prvInitialiseNewTask+0x66>
 8003f22:	e000      	b.n	8003f26 <prvInitialiseNewTask+0x96>
			{
				break;
 8003f24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f2e:	e003      	b.n	8003f38 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	2b37      	cmp	r3, #55	@ 0x37
 8003f3c:	d901      	bls.n	8003f42 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f3e:	2337      	movs	r3, #55	@ 0x37
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	2200      	movs	r2, #0
 8003f52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff f96a 	bl	8003232 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	3318      	adds	r3, #24
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f965 	bl	8003232 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	3354      	adds	r3, #84	@ 0x54
 8003f92:	224c      	movs	r2, #76	@ 0x4c
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 f828 	bl	8005fec <memset>
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd4 <prvInitialiseNewTask+0x144>)
 8003fa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd8 <prvInitialiseNewTask+0x148>)
 8003fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	4a0c      	ldr	r2, [pc, #48]	@ (8003fdc <prvInitialiseNewTask+0x14c>)
 8003fac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	69b8      	ldr	r0, [r7, #24]
 8003fb4:	f001 fa2e 	bl	8005414 <pxPortInitialiseStack>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fca:	bf00      	nop
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20001b20 	.word	0x20001b20
 8003fd8:	20001b88 	.word	0x20001b88
 8003fdc:	20001bf0 	.word	0x20001bf0

08003fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fe8:	f001 fb08 	bl	80055fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fec:	4b2d      	ldr	r3, [pc, #180]	@ (80040a4 <prvAddNewTaskToReadyList+0xc4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80040a4 <prvAddNewTaskToReadyList+0xc4>)
 8003ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004004:	4b27      	ldr	r3, [pc, #156]	@ (80040a4 <prvAddNewTaskToReadyList+0xc4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d110      	bne.n	800402e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800400c:	f000 fccc 	bl	80049a8 <prvInitialiseTaskLists>
 8004010:	e00d      	b.n	800402e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004012:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <prvAddNewTaskToReadyList+0xcc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800401a:	4b23      	ldr	r3, [pc, #140]	@ (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	429a      	cmp	r2, r3
 8004026:	d802      	bhi.n	800402e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004028:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <prvAddNewTaskToReadyList+0xd0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <prvAddNewTaskToReadyList+0xd0>)
 8004036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004038:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <prvAddNewTaskToReadyList+0xd0>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <prvAddNewTaskToReadyList+0xd4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d903      	bls.n	8004054 <prvAddNewTaskToReadyList+0x74>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <prvAddNewTaskToReadyList+0xd4>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4a15      	ldr	r2, [pc, #84]	@ (80040b8 <prvAddNewTaskToReadyList+0xd8>)
 8004062:	441a      	add	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7ff f8ed 	bl	800324a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004070:	f001 faf4 	bl	800565c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004074:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <prvAddNewTaskToReadyList+0xcc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800407c:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	429a      	cmp	r2, r3
 8004088:	d207      	bcs.n	800409a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800408a:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <prvAddNewTaskToReadyList+0xdc>)
 800408c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000da0 	.word	0x20000da0
 80040a8:	200008cc 	.word	0x200008cc
 80040ac:	20000dac 	.word	0x20000dac
 80040b0:	20000dbc 	.word	0x20000dbc
 80040b4:	20000da8 	.word	0x20000da8
 80040b8:	200008d0 	.word	0x200008d0
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040d2:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <vTaskDelay+0x64>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <vTaskDelay+0x32>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040f2:	f000 f88b 	bl	800420c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040f6:	2100      	movs	r1, #0
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fdbf 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040fe:	f000 f893 	bl	8004228 <xTaskResumeAll>
 8004102:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800410a:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <vTaskDelay+0x68>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000dc8 	.word	0x20000dc8
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800413a:	463a      	mov	r2, r7
 800413c:	1d39      	adds	r1, r7, #4
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fdb2 	bl	8002cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004148:	6839      	ldr	r1, [r7, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	9202      	str	r2, [sp, #8]
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2300      	movs	r3, #0
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	460a      	mov	r2, r1
 800415a:	4924      	ldr	r1, [pc, #144]	@ (80041ec <vTaskStartScheduler+0xc0>)
 800415c:	4824      	ldr	r0, [pc, #144]	@ (80041f0 <vTaskStartScheduler+0xc4>)
 800415e:	f7ff fdf1 	bl	8003d44 <xTaskCreateStatic>
 8004162:	4603      	mov	r3, r0
 8004164:	4a23      	ldr	r2, [pc, #140]	@ (80041f4 <vTaskStartScheduler+0xc8>)
 8004166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004168:	4b22      	ldr	r3, [pc, #136]	@ (80041f4 <vTaskStartScheduler+0xc8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e001      	b.n	800417a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d102      	bne.n	8004186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004180:	f000 fdd0 	bl	8004d24 <xTimerCreateTimerTask>
 8004184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d11b      	bne.n	80041c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	613b      	str	r3, [r7, #16]
}
 800419e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041a0:	4b15      	ldr	r3, [pc, #84]	@ (80041f8 <vTaskStartScheduler+0xcc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3354      	adds	r3, #84	@ 0x54
 80041a6:	4a15      	ldr	r2, [pc, #84]	@ (80041fc <vTaskStartScheduler+0xd0>)
 80041a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <vTaskStartScheduler+0xd4>)
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041b2:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <vTaskStartScheduler+0xd8>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041b8:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <vTaskStartScheduler+0xdc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041be:	f001 f9ab 	bl	8005518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041c2:	e00f      	b.n	80041e4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d10b      	bne.n	80041e4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	60fb      	str	r3, [r7, #12]
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <vTaskStartScheduler+0xb4>
}
 80041e4:	bf00      	nop
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	08006c68 	.word	0x08006c68
 80041f0:	08004979 	.word	0x08004979
 80041f4:	20000dc4 	.word	0x20000dc4
 80041f8:	200008cc 	.word	0x200008cc
 80041fc:	2000001c 	.word	0x2000001c
 8004200:	20000dc0 	.word	0x20000dc0
 8004204:	20000dac 	.word	0x20000dac
 8004208:	20000da4 	.word	0x20000da4

0800420c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004210:	4b04      	ldr	r3, [pc, #16]	@ (8004224 <vTaskSuspendAll+0x18>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	4a03      	ldr	r2, [pc, #12]	@ (8004224 <vTaskSuspendAll+0x18>)
 8004218:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000dc8 	.word	0x20000dc8

08004228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004236:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <xTaskResumeAll+0x118>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <xTaskResumeAll+0x2e>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	603b      	str	r3, [r7, #0]
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	e7fd      	b.n	8004252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004256:	f001 f9d1 	bl	80055fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800425a:	4b39      	ldr	r3, [pc, #228]	@ (8004340 <xTaskResumeAll+0x118>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3b01      	subs	r3, #1
 8004260:	4a37      	ldr	r2, [pc, #220]	@ (8004340 <xTaskResumeAll+0x118>)
 8004262:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004264:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <xTaskResumeAll+0x118>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d162      	bne.n	8004332 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800426c:	4b35      	ldr	r3, [pc, #212]	@ (8004344 <xTaskResumeAll+0x11c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05e      	beq.n	8004332 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004274:	e02f      	b.n	80042d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <xTaskResumeAll+0x120>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3318      	adds	r3, #24
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f83c 	bl	8003300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f837 	bl	8003300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004296:	4b2d      	ldr	r3, [pc, #180]	@ (800434c <xTaskResumeAll+0x124>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d903      	bls.n	80042a6 <xTaskResumeAll+0x7e>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	4a2a      	ldr	r2, [pc, #168]	@ (800434c <xTaskResumeAll+0x124>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4a27      	ldr	r2, [pc, #156]	@ (8004350 <xTaskResumeAll+0x128>)
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7fe ffc4 	bl	800324a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c6:	4b23      	ldr	r3, [pc, #140]	@ (8004354 <xTaskResumeAll+0x12c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80042d0:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <xTaskResumeAll+0x130>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004348 <xTaskResumeAll+0x120>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1cb      	bne.n	8004276 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042e4:	f000 fc04 	bl	8004af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042e8:	4b1c      	ldr	r3, [pc, #112]	@ (800435c <xTaskResumeAll+0x134>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d010      	beq.n	8004316 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042f4:	f000 f844 	bl	8004380 <xTaskIncrementTick>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <xTaskResumeAll+0x130>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f1      	bne.n	80042f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004310:	4b12      	ldr	r3, [pc, #72]	@ (800435c <xTaskResumeAll+0x134>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <xTaskResumeAll+0x130>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004322:	4b0f      	ldr	r3, [pc, #60]	@ (8004360 <xTaskResumeAll+0x138>)
 8004324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004332:	f001 f993 	bl	800565c <vPortExitCritical>

	return xAlreadyYielded;
 8004336:	68bb      	ldr	r3, [r7, #8]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000dc8 	.word	0x20000dc8
 8004344:	20000da0 	.word	0x20000da0
 8004348:	20000d60 	.word	0x20000d60
 800434c:	20000da8 	.word	0x20000da8
 8004350:	200008d0 	.word	0x200008d0
 8004354:	200008cc 	.word	0x200008cc
 8004358:	20000db4 	.word	0x20000db4
 800435c:	20000db0 	.word	0x20000db0
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800436a:	4b04      	ldr	r3, [pc, #16]	@ (800437c <xTaskGetTickCount+0x18>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004370:	687b      	ldr	r3, [r7, #4]
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	20000da4 	.word	0x20000da4

08004380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438a:	4b4f      	ldr	r3, [pc, #316]	@ (80044c8 <xTaskIncrementTick+0x148>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 8090 	bne.w	80044b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004394:	4b4d      	ldr	r3, [pc, #308]	@ (80044cc <xTaskIncrementTick+0x14c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800439c:	4a4b      	ldr	r2, [pc, #300]	@ (80044cc <xTaskIncrementTick+0x14c>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d121      	bne.n	80043ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80043a8:	4b49      	ldr	r3, [pc, #292]	@ (80044d0 <xTaskIncrementTick+0x150>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	603b      	str	r3, [r7, #0]
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <xTaskIncrementTick+0x46>
 80043ca:	4b41      	ldr	r3, [pc, #260]	@ (80044d0 <xTaskIncrementTick+0x150>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	4b40      	ldr	r3, [pc, #256]	@ (80044d4 <xTaskIncrementTick+0x154>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3e      	ldr	r2, [pc, #248]	@ (80044d0 <xTaskIncrementTick+0x150>)
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4a3e      	ldr	r2, [pc, #248]	@ (80044d4 <xTaskIncrementTick+0x154>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b3e      	ldr	r3, [pc, #248]	@ (80044d8 <xTaskIncrementTick+0x158>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a3c      	ldr	r2, [pc, #240]	@ (80044d8 <xTaskIncrementTick+0x158>)
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	f000 fb82 	bl	8004af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ec:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <xTaskIncrementTick+0x15c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d349      	bcc.n	800448a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f6:	4b36      	ldr	r3, [pc, #216]	@ (80044d0 <xTaskIncrementTick+0x150>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004400:	4b36      	ldr	r3, [pc, #216]	@ (80044dc <xTaskIncrementTick+0x15c>)
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	601a      	str	r2, [r3, #0]
					break;
 8004408:	e03f      	b.n	800448a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440a:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <xTaskIncrementTick+0x150>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d203      	bcs.n	800442a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004422:	4a2e      	ldr	r2, [pc, #184]	@ (80044dc <xTaskIncrementTick+0x15c>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004428:	e02f      	b.n	800448a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe ff66 	bl	8003300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3318      	adds	r3, #24
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe ff5d 	bl	8003300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444a:	4b25      	ldr	r3, [pc, #148]	@ (80044e0 <xTaskIncrementTick+0x160>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d903      	bls.n	800445a <xTaskIncrementTick+0xda>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	4a22      	ldr	r2, [pc, #136]	@ (80044e0 <xTaskIncrementTick+0x160>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a1f      	ldr	r2, [pc, #124]	@ (80044e4 <xTaskIncrementTick+0x164>)
 8004468:	441a      	add	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe feea 	bl	800324a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447a:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <xTaskIncrementTick+0x168>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	429a      	cmp	r2, r3
 8004482:	d3b8      	bcc.n	80043f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004488:	e7b5      	b.n	80043f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800448a:	4b17      	ldr	r3, [pc, #92]	@ (80044e8 <xTaskIncrementTick+0x168>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004490:	4914      	ldr	r1, [pc, #80]	@ (80044e4 <xTaskIncrementTick+0x164>)
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d901      	bls.n	80044a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044a6:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <xTaskIncrementTick+0x16c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e004      	b.n	80044be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044b4:	4b0e      	ldr	r3, [pc, #56]	@ (80044f0 <xTaskIncrementTick+0x170>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a0d      	ldr	r2, [pc, #52]	@ (80044f0 <xTaskIncrementTick+0x170>)
 80044bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000dc8 	.word	0x20000dc8
 80044cc:	20000da4 	.word	0x20000da4
 80044d0:	20000d58 	.word	0x20000d58
 80044d4:	20000d5c 	.word	0x20000d5c
 80044d8:	20000db8 	.word	0x20000db8
 80044dc:	20000dc0 	.word	0x20000dc0
 80044e0:	20000da8 	.word	0x20000da8
 80044e4:	200008d0 	.word	0x200008d0
 80044e8:	200008cc 	.word	0x200008cc
 80044ec:	20000db4 	.word	0x20000db4
 80044f0:	20000db0 	.word	0x20000db0

080044f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044fa:	4b2a      	ldr	r3, [pc, #168]	@ (80045a4 <vTaskSwitchContext+0xb0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004502:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <vTaskSwitchContext+0xb4>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004508:	e047      	b.n	800459a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800450a:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <vTaskSwitchContext+0xb4>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004510:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <vTaskSwitchContext+0xb8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e011      	b.n	800453c <vTaskSwitchContext+0x48>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <vTaskSwitchContext+0x42>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	e7fd      	b.n	8004532 <vTaskSwitchContext+0x3e>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b01      	subs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	491c      	ldr	r1, [pc, #112]	@ (80045b0 <vTaskSwitchContext+0xbc>)
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0e3      	beq.n	8004518 <vTaskSwitchContext+0x24>
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <vTaskSwitchContext+0xbc>)
 800455c:	4413      	add	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	3308      	adds	r3, #8
 8004572:	429a      	cmp	r2, r3
 8004574:	d104      	bne.n	8004580 <vTaskSwitchContext+0x8c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a0b      	ldr	r2, [pc, #44]	@ (80045b4 <vTaskSwitchContext+0xc0>)
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4a08      	ldr	r2, [pc, #32]	@ (80045ac <vTaskSwitchContext+0xb8>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004590:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <vTaskSwitchContext+0xc0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3354      	adds	r3, #84	@ 0x54
 8004596:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <vTaskSwitchContext+0xc4>)
 8004598:	6013      	str	r3, [r2, #0]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	20000dc8 	.word	0x20000dc8
 80045a8:	20000db4 	.word	0x20000db4
 80045ac:	20000da8 	.word	0x20000da8
 80045b0:	200008d0 	.word	0x200008d0
 80045b4:	200008cc 	.word	0x200008cc
 80045b8:	2000001c 	.word	0x2000001c

080045bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60fb      	str	r3, [r7, #12]
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045e4:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <vTaskPlaceOnEventList+0x48>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3318      	adds	r3, #24
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fe fe4f 	bl	8003290 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045f2:	2101      	movs	r1, #1
 80045f4:	6838      	ldr	r0, [r7, #0]
 80045f6:	f000 fb41 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200008cc 	.word	0x200008cc

08004608 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	617b      	str	r3, [r7, #20]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004632:	4b12      	ldr	r3, [pc, #72]	@ (800467c <vTaskPlaceOnUnorderedEventList+0x74>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	613b      	str	r3, [r7, #16]
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	e7fd      	b.n	800464e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800465c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3318      	adds	r3, #24
 8004664:	4619      	mov	r1, r3
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fe fdef 	bl	800324a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800466c:	2101      	movs	r1, #1
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fb04 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
}
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000dc8 	.word	0x20000dc8
 8004680:	200008cc 	.word	0x200008cc

08004684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	617b      	str	r3, [r7, #20]
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	e7fd      	b.n	80046aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046ae:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3318      	adds	r3, #24
 80046b4:	4619      	mov	r1, r3
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7fe fdc7 	bl	800324a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f000 fad6 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
	}
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200008cc 	.word	0x200008cc

080046dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60fb      	str	r3, [r7, #12]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3318      	adds	r3, #24
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fdf6 	bl	8003300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004714:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <xTaskRemoveFromEventList+0xb0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11d      	bne.n	8004758 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fded 	bl	8003300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472a:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <xTaskRemoveFromEventList+0xb4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d903      	bls.n	800473a <xTaskRemoveFromEventList+0x5e>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	4a16      	ldr	r2, [pc, #88]	@ (8004790 <xTaskRemoveFromEventList+0xb4>)
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4a13      	ldr	r2, [pc, #76]	@ (8004794 <xTaskRemoveFromEventList+0xb8>)
 8004748:	441a      	add	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe fd7a 	bl	800324a <vListInsertEnd>
 8004756:	e005      	b.n	8004764 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	3318      	adds	r3, #24
 800475c:	4619      	mov	r1, r3
 800475e:	480e      	ldr	r0, [pc, #56]	@ (8004798 <xTaskRemoveFromEventList+0xbc>)
 8004760:	f7fe fd73 	bl	800324a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004768:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <xTaskRemoveFromEventList+0xc0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	429a      	cmp	r2, r3
 8004770:	d905      	bls.n	800477e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004772:	2301      	movs	r3, #1
 8004774:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004776:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <xTaskRemoveFromEventList+0xc4>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e001      	b.n	8004782 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004782:	697b      	ldr	r3, [r7, #20]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000dc8 	.word	0x20000dc8
 8004790:	20000da8 	.word	0x20000da8
 8004794:	200008d0 	.word	0x200008d0
 8004798:	20000d60 	.word	0x20000d60
 800479c:	200008cc 	.word	0x200008cc
 80047a0:	20000db4 	.word	0x20000db4

080047a4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80047ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004858 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	613b      	str	r3, [r7, #16]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	60fb      	str	r3, [r7, #12]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fe fd7f 	bl	8003300 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fd7a 	bl	8003300 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b12      	ldr	r3, [pc, #72]	@ (800485c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d903      	bls.n	8004820 <vTaskRemoveFromUnorderedEventList+0x7c>
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4a0f      	ldr	r2, [pc, #60]	@ (800485c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800482e:	441a      	add	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe fd07 	bl	800324a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	429a      	cmp	r2, r3
 8004848:	d902      	bls.n	8004850 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800484a:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
	}
}
 8004850:	bf00      	nop
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000dc8 	.word	0x20000dc8
 800485c:	20000da8 	.word	0x20000da8
 8004860:	200008d0 	.word	0x200008d0
 8004864:	200008cc 	.word	0x200008cc
 8004868:	20000db4 	.word	0x20000db4

0800486c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <vTaskInternalSetTimeOutState+0x24>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800487c:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <vTaskInternalSetTimeOutState+0x28>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000db8 	.word	0x20000db8
 8004894:	20000da4 	.word	0x20000da4

08004898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	613b      	str	r3, [r7, #16]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60fb      	str	r3, [r7, #12]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80048de:	f000 fe8d 	bl	80055fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <xTaskCheckForTimeOut+0xc0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d102      	bne.n	8004902 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e023      	b.n	800494a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <xTaskCheckForTimeOut+0xc4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d007      	beq.n	800491e <xTaskCheckForTimeOut+0x86>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e015      	b.n	800494a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	429a      	cmp	r2, r3
 8004926:	d20b      	bcs.n	8004940 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	1ad2      	subs	r2, r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ff99 	bl	800486c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	e004      	b.n	800494a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004946:	2301      	movs	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800494a:	f000 fe87 	bl	800565c <vPortExitCritical>

	return xReturn;
 800494e:	69fb      	ldr	r3, [r7, #28]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000da4 	.word	0x20000da4
 800495c:	20000db8 	.word	0x20000db8

08004960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004964:	4b03      	ldr	r3, [pc, #12]	@ (8004974 <vTaskMissedYield+0x14>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000db4 	.word	0x20000db4

08004978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004980:	f000 f852 	bl	8004a28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <prvIdleTask+0x28>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d9f9      	bls.n	8004980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <prvIdleTask+0x2c>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800499c:	e7f0      	b.n	8004980 <prvIdleTask+0x8>
 800499e:	bf00      	nop
 80049a0:	200008d0 	.word	0x200008d0
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	e00c      	b.n	80049ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4a12      	ldr	r2, [pc, #72]	@ (8004a08 <prvInitialiseTaskLists+0x60>)
 80049c0:	4413      	add	r3, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fc16 	bl	80031f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3301      	adds	r3, #1
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b37      	cmp	r3, #55	@ 0x37
 80049d2:	d9ef      	bls.n	80049b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049d4:	480d      	ldr	r0, [pc, #52]	@ (8004a0c <prvInitialiseTaskLists+0x64>)
 80049d6:	f7fe fc0d 	bl	80031f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049da:	480d      	ldr	r0, [pc, #52]	@ (8004a10 <prvInitialiseTaskLists+0x68>)
 80049dc:	f7fe fc0a 	bl	80031f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049e0:	480c      	ldr	r0, [pc, #48]	@ (8004a14 <prvInitialiseTaskLists+0x6c>)
 80049e2:	f7fe fc07 	bl	80031f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049e6:	480c      	ldr	r0, [pc, #48]	@ (8004a18 <prvInitialiseTaskLists+0x70>)
 80049e8:	f7fe fc04 	bl	80031f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049ec:	480b      	ldr	r0, [pc, #44]	@ (8004a1c <prvInitialiseTaskLists+0x74>)
 80049ee:	f7fe fc01 	bl	80031f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <prvInitialiseTaskLists+0x78>)
 80049f4:	4a05      	ldr	r2, [pc, #20]	@ (8004a0c <prvInitialiseTaskLists+0x64>)
 80049f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <prvInitialiseTaskLists+0x7c>)
 80049fa:	4a05      	ldr	r2, [pc, #20]	@ (8004a10 <prvInitialiseTaskLists+0x68>)
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200008d0 	.word	0x200008d0
 8004a0c:	20000d30 	.word	0x20000d30
 8004a10:	20000d44 	.word	0x20000d44
 8004a14:	20000d60 	.word	0x20000d60
 8004a18:	20000d74 	.word	0x20000d74
 8004a1c:	20000d8c 	.word	0x20000d8c
 8004a20:	20000d58 	.word	0x20000d58
 8004a24:	20000d5c 	.word	0x20000d5c

08004a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a2e:	e019      	b.n	8004a64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a30:	f000 fde4 	bl	80055fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a34:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <prvCheckTasksWaitingTermination+0x50>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fc5d 	bl	8003300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <prvCheckTasksWaitingTermination+0x54>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a7c <prvCheckTasksWaitingTermination+0x54>)
 8004a4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <prvCheckTasksWaitingTermination+0x58>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	4a0a      	ldr	r2, [pc, #40]	@ (8004a80 <prvCheckTasksWaitingTermination+0x58>)
 8004a58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a5a:	f000 fdff 	bl	800565c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f810 	bl	8004a84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <prvCheckTasksWaitingTermination+0x58>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e1      	bne.n	8004a30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000d74 	.word	0x20000d74
 8004a7c:	20000da0 	.word	0x20000da0
 8004a80:	20000d88 	.word	0x20000d88

08004a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3354      	adds	r3, #84	@ 0x54
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 fac3 	bl	800601c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 ff79 	bl	800599c <vPortFree>
				vPortFree( pxTCB );
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 ff76 	bl	800599c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ab0:	e019      	b.n	8004ae6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d103      	bne.n	8004ac4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 ff6d 	bl	800599c <vPortFree>
	}
 8004ac2:	e010      	b.n	8004ae6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d00b      	beq.n	8004ae6 <prvDeleteTCB+0x62>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60fb      	str	r3, [r7, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <prvDeleteTCB+0x5e>
	}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <prvResetNextTaskUnblockTime+0x38>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b00:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <prvResetNextTaskUnblockTime+0x3c>)
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b08:	e008      	b.n	8004b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <prvResetNextTaskUnblockTime+0x38>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a04      	ldr	r2, [pc, #16]	@ (8004b2c <prvResetNextTaskUnblockTime+0x3c>)
 8004b1a:	6013      	str	r3, [r2, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000d58 	.word	0x20000d58
 8004b2c:	20000dc0 	.word	0x20000dc0

08004b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b36:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <xTaskGetSchedulerState+0x34>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	e008      	b.n	8004b56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b44:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <xTaskGetSchedulerState+0x38>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	e001      	b.n	8004b56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b56:	687b      	ldr	r3, [r7, #4]
	}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000dac 	.word	0x20000dac
 8004b68:	20000dc8 	.word	0x20000dc8

08004b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d058      	beq.n	8004c34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b82:	4b2f      	ldr	r3, [pc, #188]	@ (8004c40 <xTaskPriorityDisinherit+0xd4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d00b      	beq.n	8004ba4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60bb      	str	r3, [r7, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	1e5a      	subs	r2, r3, #1
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d02c      	beq.n	8004c34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d128      	bne.n	8004c34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fb8a 	bl	8003300 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c04:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <xTaskPriorityDisinherit+0xd8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d903      	bls.n	8004c14 <xTaskPriorityDisinherit+0xa8>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c10:	4a0c      	ldr	r2, [pc, #48]	@ (8004c44 <xTaskPriorityDisinherit+0xd8>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4a09      	ldr	r2, [pc, #36]	@ (8004c48 <xTaskPriorityDisinherit+0xdc>)
 8004c22:	441a      	add	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f7fe fb0d 	bl	800324a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c34:	697b      	ldr	r3, [r7, #20]
	}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200008cc 	.word	0x200008cc
 8004c44:	20000da8 	.word	0x20000da8
 8004c48:	200008d0 	.word	0x200008d0

08004c4c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004c52:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <uxTaskResetEventItemValue+0x2c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5a:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <uxTaskResetEventItemValue+0x2c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <uxTaskResetEventItemValue+0x2c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004c68:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004c6a:	687b      	ldr	r3, [r7, #4]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	200008cc 	.word	0x200008cc

08004c7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b21      	ldr	r3, [pc, #132]	@ (8004d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	4b20      	ldr	r3, [pc, #128]	@ (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fb34 	bl	8003300 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d10a      	bne.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4819      	ldr	r0, [pc, #100]	@ (8004d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cb0:	f7fe facb 	bl	800324a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cb4:	e026      	b.n	8004d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cbe:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d209      	bcs.n	8004ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f7fe fad8 	bl	8003290 <vListInsert>
}
 8004ce0:	e010      	b.n	8004d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7fe face 	bl	8003290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d202      	bcs.n	8004d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cfe:	4a08      	ldr	r2, [pc, #32]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000da4 	.word	0x20000da4
 8004d10:	200008cc 	.word	0x200008cc
 8004d14:	20000d8c 	.word	0x20000d8c
 8004d18:	20000d5c 	.word	0x20000d5c
 8004d1c:	20000d58 	.word	0x20000d58
 8004d20:	20000dc0 	.word	0x20000dc0

08004d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	@ 0x28
 8004d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d2e:	f000 fb11 	bl	8005354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <xTimerCreateTimerTask+0x84>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d021      	beq.n	8004d7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d42:	1d3a      	adds	r2, r7, #4
 8004d44:	f107 0108 	add.w	r1, r7, #8
 8004d48:	f107 030c 	add.w	r3, r7, #12
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fd ffc5 	bl	8002cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	9202      	str	r2, [sp, #8]
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	460a      	mov	r2, r1
 8004d64:	4911      	ldr	r1, [pc, #68]	@ (8004dac <xTimerCreateTimerTask+0x88>)
 8004d66:	4812      	ldr	r0, [pc, #72]	@ (8004db0 <xTimerCreateTimerTask+0x8c>)
 8004d68:	f7fe ffec 	bl	8003d44 <xTaskCreateStatic>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <xTimerCreateTimerTask+0x90>)
 8004d70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d72:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <xTimerCreateTimerTask+0x90>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d9c:	697b      	ldr	r3, [r7, #20]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000dfc 	.word	0x20000dfc
 8004dac:	08006c70 	.word	0x08006c70
 8004db0:	08004ef1 	.word	0x08004ef1
 8004db4:	20000e00 	.word	0x20000e00

08004db8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	@ 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004de8:	4b19      	ldr	r3, [pc, #100]	@ (8004e50 <xTimerGenericCommand+0x98>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02a      	beq.n	8004e46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	dc18      	bgt.n	8004e34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e02:	f7ff fe95 	bl	8004b30 <xTaskGetSchedulerState>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d109      	bne.n	8004e20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e0c:	4b10      	ldr	r3, [pc, #64]	@ (8004e50 <xTimerGenericCommand+0x98>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	f107 0110 	add.w	r1, r7, #16
 8004e14:	2300      	movs	r3, #0
 8004e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e18:	f7fe fba6 	bl	8003568 <xQueueGenericSend>
 8004e1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e1e:	e012      	b.n	8004e46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <xTimerGenericCommand+0x98>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	f107 0110 	add.w	r1, r7, #16
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f7fe fb9c 	bl	8003568 <xQueueGenericSend>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e32:	e008      	b.n	8004e46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <xTimerGenericCommand+0x98>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	f107 0110 	add.w	r1, r7, #16
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	f7fe fc94 	bl	800376c <xQueueGenericSendFromISR>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	@ 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000dfc 	.word	0x20000dfc

08004e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5e:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <prvProcessExpiredTimer+0x98>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fa47 	bl	8003300 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d023      	beq.n	8004ec8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	18d1      	adds	r1, r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	6978      	ldr	r0, [r7, #20]
 8004e8e:	f000 f8d3 	bl	8005038 <prvInsertTimerInActiveList>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f7ff ff88 	bl	8004db8 <xTimerGenericCommand>
 8004ea8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d114      	bne.n	8004eda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60fb      	str	r3, [r7, #12]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	4798      	blx	r3
}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000df4 	.word	0x20000df4

08004ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f859 	bl	8004fb4 <prvGetNextExpireTime>
 8004f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4619      	mov	r1, r3
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f805 	bl	8004f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f0e:	f000 f8d5 	bl	80050bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f12:	bf00      	nop
 8004f14:	e7f0      	b.n	8004ef8 <prvTimerTask+0x8>
	...

08004f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f22:	f7ff f973 	bl	800420c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f864 	bl	8004ff8 <prvSampleTimeNow>
 8004f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d130      	bne.n	8004f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <prvProcessTimerOrBlockTask+0x3c>
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d806      	bhi.n	8004f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f46:	f7ff f96f 	bl	8004228 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff81 	bl	8004e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f52:	e024      	b.n	8004f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f5a:	4b13      	ldr	r3, [pc, #76]	@ (8004fa8 <prvProcessTimerOrBlockTask+0x90>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <prvProcessTimerOrBlockTask+0x50>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <prvProcessTimerOrBlockTask+0x52>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <prvProcessTimerOrBlockTask+0x94>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fe feaf 	bl	8003cdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f7e:	f7ff f953 	bl	8004228 <xTaskResumeAll>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <prvProcessTimerOrBlockTask+0x98>)
 8004f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
}
 8004f98:	e001      	b.n	8004f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f9a:	f7ff f945 	bl	8004228 <xTaskResumeAll>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000df8 	.word	0x20000df8
 8004fac:	20000dfc 	.word	0x20000dfc
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <prvGetNextExpireTime+0x40>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <prvGetNextExpireTime+0x16>
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	e000      	b.n	8004fcc <prvGetNextExpireTime+0x18>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <prvGetNextExpireTime+0x40>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e001      	b.n	8004fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	20000df4 	.word	0x20000df4

08004ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005000:	f7ff f9b0 	bl	8004364 <xTaskGetTickCount>
 8005004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005006:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <prvSampleTimeNow+0x3c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	429a      	cmp	r2, r3
 800500e:	d205      	bcs.n	800501c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005010:	f000 f93a 	bl	8005288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e002      	b.n	8005022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005022:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <prvSampleTimeNow+0x3c>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000e04 	.word	0x20000e04

08005038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d812      	bhi.n	8005084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	d302      	bcc.n	8005072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e01b      	b.n	80050aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <prvInsertTimerInActiveList+0x7c>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7fe f907 	bl	8003290 <vListInsert>
 8005082:	e012      	b.n	80050aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d206      	bcs.n	800509a <prvInsertTimerInActiveList+0x62>
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e007      	b.n	80050aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800509a:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <prvInsertTimerInActiveList+0x80>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fe f8f3 	bl	8003290 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050aa:	697b      	ldr	r3, [r7, #20]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000df8 	.word	0x20000df8
 80050b8:	20000df4 	.word	0x20000df4

080050bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	@ 0x38
 80050c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050c2:	e0ce      	b.n	8005262 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	da19      	bge.n	80050fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	3304      	adds	r3, #4
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	61fb      	str	r3, [r7, #28]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f4:	6850      	ldr	r0, [r2, #4]
 80050f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f8:	6892      	ldr	r2, [r2, #8]
 80050fa:	4611      	mov	r1, r2
 80050fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f2c0 80ae 	blt.w	8005262 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	3304      	adds	r3, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe f8f2 	bl	8003300 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800511c:	463b      	mov	r3, r7
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff ff6a 	bl	8004ff8 <prvSampleTimeNow>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b09      	cmp	r3, #9
 800512a:	f200 8097 	bhi.w	800525c <prvProcessReceivedCommands+0x1a0>
 800512e:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <prvProcessReceivedCommands+0x78>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	0800515d 	.word	0x0800515d
 8005138:	0800515d 	.word	0x0800515d
 800513c:	0800515d 	.word	0x0800515d
 8005140:	080051d3 	.word	0x080051d3
 8005144:	080051e7 	.word	0x080051e7
 8005148:	08005233 	.word	0x08005233
 800514c:	0800515d 	.word	0x0800515d
 8005150:	0800515d 	.word	0x0800515d
 8005154:	080051d3 	.word	0x080051d3
 8005158:	080051e7 	.word	0x080051e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	18d1      	adds	r1, r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800517c:	f7ff ff5c 	bl	8005038 <prvInsertTimerInActiveList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d06c      	beq.n	8005260 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800518c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d061      	beq.n	8005260 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	441a      	add	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	2300      	movs	r3, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051ae:	f7ff fe03 	bl	8004db8 <xTimerGenericCommand>
 80051b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d152      	bne.n	8005260 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	61bb      	str	r3, [r7, #24]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80051e4:	e03d      	b.n	8005262 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	617b      	str	r3, [r7, #20]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	18d1      	adds	r1, r2, r3
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800522c:	f7ff ff04 	bl	8005038 <prvInsertTimerInActiveList>
					break;
 8005230:	e017      	b.n	8005262 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005242:	f000 fbab 	bl	800599c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005246:	e00c      	b.n	8005262 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800525a:	e002      	b.n	8005262 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800525c:	bf00      	nop
 800525e:	e000      	b.n	8005262 <prvProcessReceivedCommands+0x1a6>
					break;
 8005260:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005262:	4b08      	ldr	r3, [pc, #32]	@ (8005284 <prvProcessReceivedCommands+0x1c8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	1d39      	adds	r1, r7, #4
 8005268:	2200      	movs	r2, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fb1c 	bl	80038a8 <xQueueReceive>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f47f af26 	bne.w	80050c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	3730      	adds	r7, #48	@ 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000dfc 	.word	0x20000dfc

08005288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800528e:	e049      	b.n	8005324 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005290:	4b2e      	ldr	r3, [pc, #184]	@ (800534c <prvSwitchTimerLists+0xc4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529a:	4b2c      	ldr	r3, [pc, #176]	@ (800534c <prvSwitchTimerLists+0xc4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe f829 	bl	8003300 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02f      	beq.n	8005324 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d90e      	bls.n	80052f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052e2:	4b1a      	ldr	r3, [pc, #104]	@ (800534c <prvSwitchTimerLists+0xc4>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7fd ffcf 	bl	8003290 <vListInsert>
 80052f2:	e017      	b.n	8005324 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052f4:	2300      	movs	r3, #0
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	2100      	movs	r1, #0
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff fd5a 	bl	8004db8 <xTimerGenericCommand>
 8005304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	603b      	str	r3, [r7, #0]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005324:	4b09      	ldr	r3, [pc, #36]	@ (800534c <prvSwitchTimerLists+0xc4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1b0      	bne.n	8005290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800532e:	4b07      	ldr	r3, [pc, #28]	@ (800534c <prvSwitchTimerLists+0xc4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <prvSwitchTimerLists+0xc8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a04      	ldr	r2, [pc, #16]	@ (800534c <prvSwitchTimerLists+0xc4>)
 800533a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800533c:	4a04      	ldr	r2, [pc, #16]	@ (8005350 <prvSwitchTimerLists+0xc8>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	6013      	str	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000df4 	.word	0x20000df4
 8005350:	20000df8 	.word	0x20000df8

08005354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800535a:	f000 f94f 	bl	80055fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <prvCheckForValidListAndQueue+0x60>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d120      	bne.n	80053a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005366:	4814      	ldr	r0, [pc, #80]	@ (80053b8 <prvCheckForValidListAndQueue+0x64>)
 8005368:	f7fd ff44 	bl	80031f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800536c:	4813      	ldr	r0, [pc, #76]	@ (80053bc <prvCheckForValidListAndQueue+0x68>)
 800536e:	f7fd ff41 	bl	80031f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005372:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <prvCheckForValidListAndQueue+0x6c>)
 8005374:	4a10      	ldr	r2, [pc, #64]	@ (80053b8 <prvCheckForValidListAndQueue+0x64>)
 8005376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005378:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <prvCheckForValidListAndQueue+0x70>)
 800537a:	4a10      	ldr	r2, [pc, #64]	@ (80053bc <prvCheckForValidListAndQueue+0x68>)
 800537c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800537e:	2300      	movs	r3, #0
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <prvCheckForValidListAndQueue+0x74>)
 8005384:	4a11      	ldr	r2, [pc, #68]	@ (80053cc <prvCheckForValidListAndQueue+0x78>)
 8005386:	2110      	movs	r1, #16
 8005388:	200a      	movs	r0, #10
 800538a:	f7fe f84d 	bl	8003428 <xQueueGenericCreateStatic>
 800538e:	4603      	mov	r3, r0
 8005390:	4a08      	ldr	r2, [pc, #32]	@ (80053b4 <prvCheckForValidListAndQueue+0x60>)
 8005392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005394:	4b07      	ldr	r3, [pc, #28]	@ (80053b4 <prvCheckForValidListAndQueue+0x60>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <prvCheckForValidListAndQueue+0x60>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	490b      	ldr	r1, [pc, #44]	@ (80053d0 <prvCheckForValidListAndQueue+0x7c>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fc72 	bl	8003c8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a8:	f000 f958 	bl	800565c <vPortExitCritical>
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000dfc 	.word	0x20000dfc
 80053b8:	20000dcc 	.word	0x20000dcc
 80053bc:	20000de0 	.word	0x20000de0
 80053c0:	20000df4 	.word	0x20000df4
 80053c4:	20000df8 	.word	0x20000df8
 80053c8:	20000ea8 	.word	0x20000ea8
 80053cc:	20000e08 	.word	0x20000e08
 80053d0:	08006c78 	.word	0x08006c78

080053d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80053e2:	f06f 0301 	mvn.w	r3, #1
 80053e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <xTimerPendFunctionCallFromISR+0x3c>)
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	f107 0114 	add.w	r1, r7, #20
 80053fc:	2300      	movs	r3, #0
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	f7fe f9b4 	bl	800376c <xQueueGenericSendFromISR>
 8005404:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005408:	4618      	mov	r0, r3
 800540a:	3728      	adds	r7, #40	@ 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000dfc 	.word	0x20000dfc

08005414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3b04      	subs	r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800542c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3b04      	subs	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b04      	subs	r3, #4
 8005442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005444:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <pxPortInitialiseStack+0x54>)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3b14      	subs	r3, #20
 800544e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b20      	subs	r3, #32
 800545a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800545c:	68fb      	ldr	r3, [r7, #12]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	0800546d 	.word	0x0800546d

0800546c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005476:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <prvTaskExitError+0x54>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d00b      	beq.n	8005498 <prvTaskExitError+0x2c>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <prvTaskExitError+0x28>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	60bb      	str	r3, [r7, #8]
}
 80054aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054ac:	bf00      	nop
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0fc      	beq.n	80054ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	2000000c 	.word	0x2000000c
	...

080054d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054d0:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <pxCurrentTCBConst2>)
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	6808      	ldr	r0, [r1, #0]
 80054d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054da:	f380 8809 	msr	PSP, r0
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8811 	msr	BASEPRI, r0
 80054ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80054ee:	4770      	bx	lr

080054f0 <pxCurrentTCBConst2>:
 80054f0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054f8:	4806      	ldr	r0, [pc, #24]	@ (8005514 <prvPortStartFirstTask+0x1c>)
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	6800      	ldr	r0, [r0, #0]
 80054fe:	f380 8808 	msr	MSP, r0
 8005502:	b662      	cpsie	i
 8005504:	b661      	cpsie	f
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	df00      	svc	0
 8005510:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005512:	bf00      	nop
 8005514:	e000ed08 	.word	0xe000ed08

08005518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800551e:	4b32      	ldr	r3, [pc, #200]	@ (80055e8 <xPortStartScheduler+0xd0>)
 8005520:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	22ff      	movs	r2, #255	@ 0xff
 800552e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4b2a      	ldr	r3, [pc, #168]	@ (80055ec <xPortStartScheduler+0xd4>)
 8005544:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005546:	4b2a      	ldr	r3, [pc, #168]	@ (80055f0 <xPortStartScheduler+0xd8>)
 8005548:	2207      	movs	r2, #7
 800554a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800554c:	e009      	b.n	8005562 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800554e:	4b28      	ldr	r3, [pc, #160]	@ (80055f0 <xPortStartScheduler+0xd8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3b01      	subs	r3, #1
 8005554:	4a26      	ldr	r2, [pc, #152]	@ (80055f0 <xPortStartScheduler+0xd8>)
 8005556:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	b2db      	uxtb	r3, r3
 8005560:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d0ef      	beq.n	800554e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800556e:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <xPortStartScheduler+0xd8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f1c3 0307 	rsb	r3, r3, #7
 8005576:	2b04      	cmp	r3, #4
 8005578:	d00b      	beq.n	8005592 <xPortStartScheduler+0x7a>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	60bb      	str	r3, [r7, #8]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005592:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <xPortStartScheduler+0xd8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	4a15      	ldr	r2, [pc, #84]	@ (80055f0 <xPortStartScheduler+0xd8>)
 800559a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <xPortStartScheduler+0xd8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055a4:	4a12      	ldr	r2, [pc, #72]	@ (80055f0 <xPortStartScheduler+0xd8>)
 80055a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055b0:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <xPortStartScheduler+0xdc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a0f      	ldr	r2, [pc, #60]	@ (80055f4 <xPortStartScheduler+0xdc>)
 80055b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055bc:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <xPortStartScheduler+0xdc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <xPortStartScheduler+0xdc>)
 80055c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80055c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055c8:	f000 f8b8 	bl	800573c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <xPortStartScheduler+0xe0>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055d2:	f7ff ff91 	bl	80054f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055d6:	f7fe ff8d 	bl	80044f4 <vTaskSwitchContext>
	prvTaskExitError();
 80055da:	f7ff ff47 	bl	800546c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	e000e400 	.word	0xe000e400
 80055ec:	20000ef8 	.word	0x20000ef8
 80055f0:	20000efc 	.word	0x20000efc
 80055f4:	e000ed20 	.word	0xe000ed20
 80055f8:	2000000c 	.word	0x2000000c

080055fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
}
 8005614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <vPortEnterCritical+0x58>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a0d      	ldr	r2, [pc, #52]	@ (8005654 <vPortEnterCritical+0x58>)
 800561e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <vPortEnterCritical+0x58>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d110      	bne.n	800564a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <vPortEnterCritical+0x5c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <vPortEnterCritical+0x4e>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	603b      	str	r3, [r7, #0]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <vPortEnterCritical+0x4a>
	}
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	2000000c 	.word	0x2000000c
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005662:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <vPortExitCritical+0x50>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <vPortExitCritical+0x26>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	607b      	str	r3, [r7, #4]
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	e7fd      	b.n	800567e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005682:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3b01      	subs	r3, #1
 8005688:	4a08      	ldr	r2, [pc, #32]	@ (80056ac <vPortExitCritical+0x50>)
 800568a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800568c:	4b07      	ldr	r3, [pc, #28]	@ (80056ac <vPortExitCritical+0x50>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d105      	bne.n	80056a0 <vPortExitCritical+0x44>
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	2000000c 	.word	0x2000000c

080056b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056b0:	f3ef 8009 	mrs	r0, PSP
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <pxCurrentTCBConst>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056c0:	6010      	str	r0, [r2, #0]
 80056c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056ca:	f380 8811 	msr	BASEPRI, r0
 80056ce:	f7fe ff11 	bl	80044f4 <vTaskSwitchContext>
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8811 	msr	BASEPRI, r0
 80056da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056e6:	f380 8809 	msr	PSP, r0
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	4770      	bx	lr

080056f0 <pxCurrentTCBConst>:
 80056f0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	607b      	str	r3, [r7, #4]
}
 8005710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005712:	f7fe fe35 	bl	8004380 <xTaskIncrementTick>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800571c:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <xPortSysTickHandler+0x40>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f383 8811 	msr	BASEPRI, r3
}
 800572e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <vPortSetupTimerInterrupt+0x30>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005746:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <vPortSetupTimerInterrupt+0x34>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800574c:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <vPortSetupTimerInterrupt+0x38>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a09      	ldr	r2, [pc, #36]	@ (8005778 <vPortSetupTimerInterrupt+0x3c>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	099b      	lsrs	r3, r3, #6
 8005758:	4a08      	ldr	r2, [pc, #32]	@ (800577c <vPortSetupTimerInterrupt+0x40>)
 800575a:	3b01      	subs	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800575e:	4b03      	ldr	r3, [pc, #12]	@ (800576c <vPortSetupTimerInterrupt+0x30>)
 8005760:	2207      	movs	r2, #7
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	e000e010 	.word	0xe000e010
 8005770:	e000e018 	.word	0xe000e018
 8005774:	20000000 	.word	0x20000000
 8005778:	10624dd3 	.word	0x10624dd3
 800577c:	e000e014 	.word	0xe000e014

08005780 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005786:	f3ef 8305 	mrs	r3, IPSR
 800578a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b0f      	cmp	r3, #15
 8005790:	d915      	bls.n	80057be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005792:	4a17      	ldr	r2, [pc, #92]	@ (80057f0 <vPortValidateInterruptPriority+0x70>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800579c:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <vPortValidateInterruptPriority+0x74>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	7afa      	ldrb	r2, [r7, #11]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d20b      	bcs.n	80057be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	607b      	str	r3, [r7, #4]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057be:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <vPortValidateInterruptPriority+0x78>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <vPortValidateInterruptPriority+0x7c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d90b      	bls.n	80057e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	603b      	str	r3, [r7, #0]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <vPortValidateInterruptPriority+0x62>
	}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	e000e3f0 	.word	0xe000e3f0
 80057f4:	20000ef8 	.word	0x20000ef8
 80057f8:	e000ed0c 	.word	0xe000ed0c
 80057fc:	20000efc 	.word	0x20000efc

08005800 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	@ 0x28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800580c:	f7fe fcfe 	bl	800420c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005810:	4b5c      	ldr	r3, [pc, #368]	@ (8005984 <pvPortMalloc+0x184>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005818:	f000 f924 	bl	8005a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800581c:	4b5a      	ldr	r3, [pc, #360]	@ (8005988 <pvPortMalloc+0x188>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 8095 	bne.w	8005954 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01e      	beq.n	800586e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005830:	2208      	movs	r2, #8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b00      	cmp	r3, #0
 8005840:	d015      	beq.n	800586e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f023 0307 	bic.w	r3, r3, #7
 8005848:	3308      	adds	r3, #8
 800584a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <pvPortMalloc+0x6e>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	617b      	str	r3, [r7, #20]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d06f      	beq.n	8005954 <pvPortMalloc+0x154>
 8005874:	4b45      	ldr	r3, [pc, #276]	@ (800598c <pvPortMalloc+0x18c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	429a      	cmp	r2, r3
 800587c:	d86a      	bhi.n	8005954 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800587e:	4b44      	ldr	r3, [pc, #272]	@ (8005990 <pvPortMalloc+0x190>)
 8005880:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005882:	4b43      	ldr	r3, [pc, #268]	@ (8005990 <pvPortMalloc+0x190>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005888:	e004      	b.n	8005894 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d903      	bls.n	80058a6 <pvPortMalloc+0xa6>
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f1      	bne.n	800588a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058a6:	4b37      	ldr	r3, [pc, #220]	@ (8005984 <pvPortMalloc+0x184>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d051      	beq.n	8005954 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2208      	movs	r2, #8
 80058b6:	4413      	add	r3, r2
 80058b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	2308      	movs	r3, #8
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d920      	bls.n	8005914 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00b      	beq.n	80058fc <pvPortMalloc+0xfc>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	613b      	str	r3, [r7, #16]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800590e:	69b8      	ldr	r0, [r7, #24]
 8005910:	f000 f90a 	bl	8005b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005914:	4b1d      	ldr	r3, [pc, #116]	@ (800598c <pvPortMalloc+0x18c>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <pvPortMalloc+0x18c>)
 8005920:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005922:	4b1a      	ldr	r3, [pc, #104]	@ (800598c <pvPortMalloc+0x18c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <pvPortMalloc+0x194>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d203      	bcs.n	8005936 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800592e:	4b17      	ldr	r3, [pc, #92]	@ (800598c <pvPortMalloc+0x18c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a18      	ldr	r2, [pc, #96]	@ (8005994 <pvPortMalloc+0x194>)
 8005934:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b13      	ldr	r3, [pc, #76]	@ (8005988 <pvPortMalloc+0x188>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	431a      	orrs	r2, r3
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800594a:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <pvPortMalloc+0x198>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3301      	adds	r3, #1
 8005950:	4a11      	ldr	r2, [pc, #68]	@ (8005998 <pvPortMalloc+0x198>)
 8005952:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005954:	f7fe fc68 	bl	8004228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <pvPortMalloc+0x17a>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60fb      	str	r3, [r7, #12]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <pvPortMalloc+0x176>
	return pvReturn;
 800597a:	69fb      	ldr	r3, [r7, #28]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3728      	adds	r7, #40	@ 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20001b08 	.word	0x20001b08
 8005988:	20001b1c 	.word	0x20001b1c
 800598c:	20001b0c 	.word	0x20001b0c
 8005990:	20001b00 	.word	0x20001b00
 8005994:	20001b10 	.word	0x20001b10
 8005998:	20001b14 	.word	0x20001b14

0800599c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d04f      	beq.n	8005a4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059ae:	2308      	movs	r3, #8
 80059b0:	425b      	negs	r3, r3
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4b25      	ldr	r3, [pc, #148]	@ (8005a58 <vPortFree+0xbc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <vPortFree+0x46>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60fb      	str	r3, [r7, #12]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <vPortFree+0x66>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	60bb      	str	r3, [r7, #8]
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	4b14      	ldr	r3, [pc, #80]	@ (8005a58 <vPortFree+0xbc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01e      	beq.n	8005a4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11a      	bne.n	8005a4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <vPortFree+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	401a      	ands	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a28:	f7fe fbf0 	bl	800420c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <vPortFree+0xc0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <vPortFree+0xc0>)
 8005a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a3a:	6938      	ldr	r0, [r7, #16]
 8005a3c:	f000 f874 	bl	8005b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a40:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <vPortFree+0xc4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a06      	ldr	r2, [pc, #24]	@ (8005a60 <vPortFree+0xc4>)
 8005a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a4a:	f7fe fbed 	bl	8004228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a4e:	bf00      	nop
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20001b1c 	.word	0x20001b1c
 8005a5c:	20001b0c 	.word	0x20001b0c
 8005a60:	20001b18 	.word	0x20001b18

08005a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a70:	4b27      	ldr	r3, [pc, #156]	@ (8005b10 <prvHeapInit+0xac>)
 8005a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00c      	beq.n	8005a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3307      	adds	r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	4a1f      	ldr	r2, [pc, #124]	@ (8005b10 <prvHeapInit+0xac>)
 8005a94:	4413      	add	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b14 <prvHeapInit+0xb0>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b14 <prvHeapInit+0xb0>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4413      	add	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0307 	bic.w	r3, r3, #7
 8005abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <prvHeapInit+0xb4>)
 8005ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ac6:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <prvHeapInit+0xb4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ace:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <prvHeapInit+0xb4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8005b18 <prvHeapInit+0xb4>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a0a      	ldr	r2, [pc, #40]	@ (8005b1c <prvHeapInit+0xb8>)
 8005af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	4a09      	ldr	r2, [pc, #36]	@ (8005b20 <prvHeapInit+0xbc>)
 8005afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005afc:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <prvHeapInit+0xc0>)
 8005afe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b02:	601a      	str	r2, [r3, #0]
}
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000f00 	.word	0x20000f00
 8005b14:	20001b00 	.word	0x20001b00
 8005b18:	20001b08 	.word	0x20001b08
 8005b1c:	20001b10 	.word	0x20001b10
 8005b20:	20001b0c 	.word	0x20001b0c
 8005b24:	20001b1c 	.word	0x20001b1c

08005b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <prvInsertBlockIntoFreeList+0xa8>)
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e002      	b.n	8005b3c <prvInsertBlockIntoFreeList+0x14>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d8f7      	bhi.n	8005b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4413      	add	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d108      	bne.n	8005b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	441a      	add	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d118      	bne.n	8005bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <prvInsertBlockIntoFreeList+0xac>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d00d      	beq.n	8005ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e008      	b.n	8005bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <prvInsertBlockIntoFreeList+0xac>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e003      	b.n	8005bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d002      	beq.n	8005bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	20001b00 	.word	0x20001b00
 8005bd4:	20001b08 	.word	0x20001b08

08005bd8 <std>:
 8005bd8:	2300      	movs	r3, #0
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	e9c0 3300 	strd	r3, r3, [r0]
 8005be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005be6:	6083      	str	r3, [r0, #8]
 8005be8:	8181      	strh	r1, [r0, #12]
 8005bea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bec:	81c2      	strh	r2, [r0, #14]
 8005bee:	6183      	str	r3, [r0, #24]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	305c      	adds	r0, #92	@ 0x5c
 8005bf6:	f000 f9f9 	bl	8005fec <memset>
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x58>)
 8005bfc:	6224      	str	r4, [r4, #32]
 8005bfe:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c00:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <std+0x5c>)
 8005c02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c04:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <std+0x60>)
 8005c06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c08:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <std+0x64>)
 8005c0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <std+0x68>)
 8005c0e:	429c      	cmp	r4, r3
 8005c10:	d006      	beq.n	8005c20 <std+0x48>
 8005c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c16:	4294      	cmp	r4, r2
 8005c18:	d002      	beq.n	8005c20 <std+0x48>
 8005c1a:	33d0      	adds	r3, #208	@ 0xd0
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d105      	bne.n	8005c2c <std+0x54>
 8005c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f000 baae 	b.w	8006188 <__retarget_lock_init_recursive>
 8005c2c:	bd10      	pop	{r4, pc}
 8005c2e:	bf00      	nop
 8005c30:	08005e3d 	.word	0x08005e3d
 8005c34:	08005e5f 	.word	0x08005e5f
 8005c38:	08005e97 	.word	0x08005e97
 8005c3c:	08005ebb 	.word	0x08005ebb
 8005c40:	20001b20 	.word	0x20001b20

08005c44 <stdio_exit_handler>:
 8005c44:	4a02      	ldr	r2, [pc, #8]	@ (8005c50 <stdio_exit_handler+0xc>)
 8005c46:	4903      	ldr	r1, [pc, #12]	@ (8005c54 <stdio_exit_handler+0x10>)
 8005c48:	4803      	ldr	r0, [pc, #12]	@ (8005c58 <stdio_exit_handler+0x14>)
 8005c4a:	f000 b869 	b.w	8005d20 <_fwalk_sglue>
 8005c4e:	bf00      	nop
 8005c50:	20000010 	.word	0x20000010
 8005c54:	08006a3d 	.word	0x08006a3d
 8005c58:	20000020 	.word	0x20000020

08005c5c <cleanup_stdio>:
 8005c5c:	6841      	ldr	r1, [r0, #4]
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <cleanup_stdio+0x34>)
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4299      	cmp	r1, r3
 8005c64:	4604      	mov	r4, r0
 8005c66:	d001      	beq.n	8005c6c <cleanup_stdio+0x10>
 8005c68:	f000 fee8 	bl	8006a3c <_fflush_r>
 8005c6c:	68a1      	ldr	r1, [r4, #8]
 8005c6e:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <cleanup_stdio+0x38>)
 8005c70:	4299      	cmp	r1, r3
 8005c72:	d002      	beq.n	8005c7a <cleanup_stdio+0x1e>
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 fee1 	bl	8006a3c <_fflush_r>
 8005c7a:	68e1      	ldr	r1, [r4, #12]
 8005c7c:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <cleanup_stdio+0x3c>)
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	d004      	beq.n	8005c8c <cleanup_stdio+0x30>
 8005c82:	4620      	mov	r0, r4
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c88:	f000 bed8 	b.w	8006a3c <_fflush_r>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	bf00      	nop
 8005c90:	20001b20 	.word	0x20001b20
 8005c94:	20001b88 	.word	0x20001b88
 8005c98:	20001bf0 	.word	0x20001bf0

08005c9c <global_stdio_init.part.0>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <global_stdio_init.part.0+0x30>)
 8005ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8005cd0 <global_stdio_init.part.0+0x34>)
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <global_stdio_init.part.0+0x38>)
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	2104      	movs	r1, #4
 8005caa:	2200      	movs	r2, #0
 8005cac:	f7ff ff94 	bl	8005bd8 <std>
 8005cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2109      	movs	r1, #9
 8005cb8:	f7ff ff8e 	bl	8005bd8 <std>
 8005cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc6:	2112      	movs	r1, #18
 8005cc8:	f7ff bf86 	b.w	8005bd8 <std>
 8005ccc:	20001c58 	.word	0x20001c58
 8005cd0:	20001b20 	.word	0x20001b20
 8005cd4:	08005c45 	.word	0x08005c45

08005cd8 <__sfp_lock_acquire>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	@ (8005ce0 <__sfp_lock_acquire+0x8>)
 8005cda:	f000 ba56 	b.w	800618a <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	20001c61 	.word	0x20001c61

08005ce4 <__sfp_lock_release>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	@ (8005cec <__sfp_lock_release+0x8>)
 8005ce6:	f000 ba51 	b.w	800618c <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	20001c61 	.word	0x20001c61

08005cf0 <__sinit>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	f7ff fff0 	bl	8005cd8 <__sfp_lock_acquire>
 8005cf8:	6a23      	ldr	r3, [r4, #32]
 8005cfa:	b11b      	cbz	r3, 8005d04 <__sinit+0x14>
 8005cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d00:	f7ff bff0 	b.w	8005ce4 <__sfp_lock_release>
 8005d04:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <__sinit+0x28>)
 8005d06:	6223      	str	r3, [r4, #32]
 8005d08:	4b04      	ldr	r3, [pc, #16]	@ (8005d1c <__sinit+0x2c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f5      	bne.n	8005cfc <__sinit+0xc>
 8005d10:	f7ff ffc4 	bl	8005c9c <global_stdio_init.part.0>
 8005d14:	e7f2      	b.n	8005cfc <__sinit+0xc>
 8005d16:	bf00      	nop
 8005d18:	08005c5d 	.word	0x08005c5d
 8005d1c:	20001c58 	.word	0x20001c58

08005d20 <_fwalk_sglue>:
 8005d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d24:	4607      	mov	r7, r0
 8005d26:	4688      	mov	r8, r1
 8005d28:	4614      	mov	r4, r2
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d30:	f1b9 0901 	subs.w	r9, r9, #1
 8005d34:	d505      	bpl.n	8005d42 <_fwalk_sglue+0x22>
 8005d36:	6824      	ldr	r4, [r4, #0]
 8005d38:	2c00      	cmp	r4, #0
 8005d3a:	d1f7      	bne.n	8005d2c <_fwalk_sglue+0xc>
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d907      	bls.n	8005d58 <_fwalk_sglue+0x38>
 8005d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	d003      	beq.n	8005d58 <_fwalk_sglue+0x38>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4638      	mov	r0, r7
 8005d54:	47c0      	blx	r8
 8005d56:	4306      	orrs	r6, r0
 8005d58:	3568      	adds	r5, #104	@ 0x68
 8005d5a:	e7e9      	b.n	8005d30 <_fwalk_sglue+0x10>

08005d5c <iprintf>:
 8005d5c:	b40f      	push	{r0, r1, r2, r3}
 8005d5e:	b507      	push	{r0, r1, r2, lr}
 8005d60:	4906      	ldr	r1, [pc, #24]	@ (8005d7c <iprintf+0x20>)
 8005d62:	ab04      	add	r3, sp, #16
 8005d64:	6808      	ldr	r0, [r1, #0]
 8005d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d6a:	6881      	ldr	r1, [r0, #8]
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	f000 fb3b 	bl	80063e8 <_vfiprintf_r>
 8005d72:	b003      	add	sp, #12
 8005d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d78:	b004      	add	sp, #16
 8005d7a:	4770      	bx	lr
 8005d7c:	2000001c 	.word	0x2000001c

08005d80 <_puts_r>:
 8005d80:	6a03      	ldr	r3, [r0, #32]
 8005d82:	b570      	push	{r4, r5, r6, lr}
 8005d84:	4605      	mov	r5, r0
 8005d86:	460e      	mov	r6, r1
 8005d88:	6884      	ldr	r4, [r0, #8]
 8005d8a:	b90b      	cbnz	r3, 8005d90 <_puts_r+0x10>
 8005d8c:	f7ff ffb0 	bl	8005cf0 <__sinit>
 8005d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d92:	07db      	lsls	r3, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <_puts_r+0x22>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	0598      	lsls	r0, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_puts_r+0x22>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d9e:	f000 f9f4 	bl	800618a <__retarget_lock_acquire_recursive>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	0719      	lsls	r1, r3, #28
 8005da6:	d502      	bpl.n	8005dae <_puts_r+0x2e>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d135      	bne.n	8005e1a <_puts_r+0x9a>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 f8c5 	bl	8005f40 <__swsetup_r>
 8005db6:	b380      	cbz	r0, 8005e1a <_puts_r+0x9a>
 8005db8:	f04f 35ff 	mov.w	r5, #4294967295
 8005dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d405      	bmi.n	8005dce <_puts_r+0x4e>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	059b      	lsls	r3, r3, #22
 8005dc6:	d402      	bmi.n	8005dce <_puts_r+0x4e>
 8005dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dca:	f000 f9df 	bl	800618c <__retarget_lock_release_recursive>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da04      	bge.n	8005de0 <_puts_r+0x60>
 8005dd6:	69a2      	ldr	r2, [r4, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	dc17      	bgt.n	8005e0c <_puts_r+0x8c>
 8005ddc:	290a      	cmp	r1, #10
 8005dde:	d015      	beq.n	8005e0c <_puts_r+0x8c>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	7019      	strb	r1, [r3, #0]
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	2900      	cmp	r1, #0
 8005df4:	d1ed      	bne.n	8005dd2 <_puts_r+0x52>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da11      	bge.n	8005e1e <_puts_r+0x9e>
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	210a      	movs	r1, #10
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f85f 	bl	8005ec2 <__swbuf_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d0d7      	beq.n	8005db8 <_puts_r+0x38>
 8005e08:	250a      	movs	r5, #10
 8005e0a:	e7d7      	b.n	8005dbc <_puts_r+0x3c>
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f857 	bl	8005ec2 <__swbuf_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	d1e7      	bne.n	8005de8 <_puts_r+0x68>
 8005e18:	e7ce      	b.n	8005db8 <_puts_r+0x38>
 8005e1a:	3e01      	subs	r6, #1
 8005e1c:	e7e4      	b.n	8005de8 <_puts_r+0x68>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	220a      	movs	r2, #10
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e7ee      	b.n	8005e08 <_puts_r+0x88>
	...

08005e2c <puts>:
 8005e2c:	4b02      	ldr	r3, [pc, #8]	@ (8005e38 <puts+0xc>)
 8005e2e:	4601      	mov	r1, r0
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f7ff bfa5 	b.w	8005d80 <_puts_r>
 8005e36:	bf00      	nop
 8005e38:	2000001c 	.word	0x2000001c

08005e3c <__sread>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	f000 f952 	bl	80060ec <_read_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	bfab      	itete	ge
 8005e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e50:	181b      	addge	r3, r3, r0
 8005e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e56:	bfac      	ite	ge
 8005e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e5a:	81a3      	strhlt	r3, [r4, #12]
 8005e5c:	bd10      	pop	{r4, pc}

08005e5e <__swrite>:
 8005e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	461f      	mov	r7, r3
 8005e64:	898b      	ldrh	r3, [r1, #12]
 8005e66:	4605      	mov	r5, r0
 8005e68:	05db      	lsls	r3, r3, #23
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	d505      	bpl.n	8005e7c <__swrite+0x1e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	2200      	movs	r2, #0
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	f000 f926 	bl	80060c8 <_lseek_r>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	4632      	mov	r2, r6
 8005e80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	4628      	mov	r0, r5
 8005e88:	463b      	mov	r3, r7
 8005e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	f000 b93d 	b.w	8006110 <_write_r>

08005e96 <__sseek>:
 8005e96:	b510      	push	{r4, lr}
 8005e98:	460c      	mov	r4, r1
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 f913 	bl	80060c8 <_lseek_r>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	bf15      	itete	ne
 8005ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005eb2:	81a3      	strheq	r3, [r4, #12]
 8005eb4:	bf18      	it	ne
 8005eb6:	81a3      	strhne	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__sclose>:
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 b89d 	b.w	8005ffc <_close_r>

08005ec2 <__swbuf_r>:
 8005ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	4605      	mov	r5, r0
 8005eca:	b118      	cbz	r0, 8005ed4 <__swbuf_r+0x12>
 8005ecc:	6a03      	ldr	r3, [r0, #32]
 8005ece:	b90b      	cbnz	r3, 8005ed4 <__swbuf_r+0x12>
 8005ed0:	f7ff ff0e 	bl	8005cf0 <__sinit>
 8005ed4:	69a3      	ldr	r3, [r4, #24]
 8005ed6:	60a3      	str	r3, [r4, #8]
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	071a      	lsls	r2, r3, #28
 8005edc:	d501      	bpl.n	8005ee2 <__swbuf_r+0x20>
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	b943      	cbnz	r3, 8005ef4 <__swbuf_r+0x32>
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	f000 f82b 	bl	8005f40 <__swsetup_r>
 8005eea:	b118      	cbz	r0, 8005ef4 <__swbuf_r+0x32>
 8005eec:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	6922      	ldr	r2, [r4, #16]
 8005ef8:	b2f6      	uxtb	r6, r6
 8005efa:	1a98      	subs	r0, r3, r2
 8005efc:	6963      	ldr	r3, [r4, #20]
 8005efe:	4637      	mov	r7, r6
 8005f00:	4283      	cmp	r3, r0
 8005f02:	dc05      	bgt.n	8005f10 <__swbuf_r+0x4e>
 8005f04:	4621      	mov	r1, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fd98 	bl	8006a3c <_fflush_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d1ed      	bne.n	8005eec <__swbuf_r+0x2a>
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	60a3      	str	r3, [r4, #8]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	6022      	str	r2, [r4, #0]
 8005f1c:	701e      	strb	r6, [r3, #0]
 8005f1e:	6962      	ldr	r2, [r4, #20]
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d004      	beq.n	8005f30 <__swbuf_r+0x6e>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	07db      	lsls	r3, r3, #31
 8005f2a:	d5e1      	bpl.n	8005ef0 <__swbuf_r+0x2e>
 8005f2c:	2e0a      	cmp	r6, #10
 8005f2e:	d1df      	bne.n	8005ef0 <__swbuf_r+0x2e>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 fd82 	bl	8006a3c <_fflush_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d0d9      	beq.n	8005ef0 <__swbuf_r+0x2e>
 8005f3c:	e7d6      	b.n	8005eec <__swbuf_r+0x2a>
	...

08005f40 <__swsetup_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4b29      	ldr	r3, [pc, #164]	@ (8005fe8 <__swsetup_r+0xa8>)
 8005f44:	4605      	mov	r5, r0
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	460c      	mov	r4, r1
 8005f4a:	b118      	cbz	r0, 8005f54 <__swsetup_r+0x14>
 8005f4c:	6a03      	ldr	r3, [r0, #32]
 8005f4e:	b90b      	cbnz	r3, 8005f54 <__swsetup_r+0x14>
 8005f50:	f7ff fece 	bl	8005cf0 <__sinit>
 8005f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f58:	0719      	lsls	r1, r3, #28
 8005f5a:	d422      	bmi.n	8005fa2 <__swsetup_r+0x62>
 8005f5c:	06da      	lsls	r2, r3, #27
 8005f5e:	d407      	bmi.n	8005f70 <__swsetup_r+0x30>
 8005f60:	2209      	movs	r2, #9
 8005f62:	602a      	str	r2, [r5, #0]
 8005f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	e033      	b.n	8005fd8 <__swsetup_r+0x98>
 8005f70:	0758      	lsls	r0, r3, #29
 8005f72:	d512      	bpl.n	8005f9a <__swsetup_r+0x5a>
 8005f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f76:	b141      	cbz	r1, 8005f8a <__swsetup_r+0x4a>
 8005f78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f7c:	4299      	cmp	r1, r3
 8005f7e:	d002      	beq.n	8005f86 <__swsetup_r+0x46>
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 f913 	bl	80061ac <_free_r>
 8005f86:	2300      	movs	r3, #0
 8005f88:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	2300      	movs	r3, #0
 8005f94:	6063      	str	r3, [r4, #4]
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f043 0308 	orr.w	r3, r3, #8
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	b94b      	cbnz	r3, 8005fba <__swsetup_r+0x7a>
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb0:	d003      	beq.n	8005fba <__swsetup_r+0x7a>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 fd8e 	bl	8006ad6 <__smakebuf_r>
 8005fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fbe:	f013 0201 	ands.w	r2, r3, #1
 8005fc2:	d00a      	beq.n	8005fda <__swsetup_r+0x9a>
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	60a2      	str	r2, [r4, #8]
 8005fc8:	6962      	ldr	r2, [r4, #20]
 8005fca:	4252      	negs	r2, r2
 8005fcc:	61a2      	str	r2, [r4, #24]
 8005fce:	6922      	ldr	r2, [r4, #16]
 8005fd0:	b942      	cbnz	r2, 8005fe4 <__swsetup_r+0xa4>
 8005fd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fd6:	d1c5      	bne.n	8005f64 <__swsetup_r+0x24>
 8005fd8:	bd38      	pop	{r3, r4, r5, pc}
 8005fda:	0799      	lsls	r1, r3, #30
 8005fdc:	bf58      	it	pl
 8005fde:	6962      	ldrpl	r2, [r4, #20]
 8005fe0:	60a2      	str	r2, [r4, #8]
 8005fe2:	e7f4      	b.n	8005fce <__swsetup_r+0x8e>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e7f7      	b.n	8005fd8 <__swsetup_r+0x98>
 8005fe8:	2000001c 	.word	0x2000001c

08005fec <memset>:
 8005fec:	4603      	mov	r3, r0
 8005fee:	4402      	add	r2, r0
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d100      	bne.n	8005ff6 <memset+0xa>
 8005ff4:	4770      	bx	lr
 8005ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffa:	e7f9      	b.n	8005ff0 <memset+0x4>

08005ffc <_close_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	2300      	movs	r3, #0
 8006000:	4d05      	ldr	r5, [pc, #20]	@ (8006018 <_close_r+0x1c>)
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	f7fa fb79 	bl	80006fe <_close>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_close_r+0x1a>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_close_r+0x1a>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20001c5c 	.word	0x20001c5c

0800601c <_reclaim_reent>:
 800601c:	4b29      	ldr	r3, [pc, #164]	@ (80060c4 <_reclaim_reent+0xa8>)
 800601e:	b570      	push	{r4, r5, r6, lr}
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4604      	mov	r4, r0
 8006024:	4283      	cmp	r3, r0
 8006026:	d04b      	beq.n	80060c0 <_reclaim_reent+0xa4>
 8006028:	69c3      	ldr	r3, [r0, #28]
 800602a:	b1ab      	cbz	r3, 8006058 <_reclaim_reent+0x3c>
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	b16b      	cbz	r3, 800604c <_reclaim_reent+0x30>
 8006030:	2500      	movs	r5, #0
 8006032:	69e3      	ldr	r3, [r4, #28]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	5959      	ldr	r1, [r3, r5]
 8006038:	2900      	cmp	r1, #0
 800603a:	d13b      	bne.n	80060b4 <_reclaim_reent+0x98>
 800603c:	3504      	adds	r5, #4
 800603e:	2d80      	cmp	r5, #128	@ 0x80
 8006040:	d1f7      	bne.n	8006032 <_reclaim_reent+0x16>
 8006042:	69e3      	ldr	r3, [r4, #28]
 8006044:	4620      	mov	r0, r4
 8006046:	68d9      	ldr	r1, [r3, #12]
 8006048:	f000 f8b0 	bl	80061ac <_free_r>
 800604c:	69e3      	ldr	r3, [r4, #28]
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	b111      	cbz	r1, 8006058 <_reclaim_reent+0x3c>
 8006052:	4620      	mov	r0, r4
 8006054:	f000 f8aa 	bl	80061ac <_free_r>
 8006058:	6961      	ldr	r1, [r4, #20]
 800605a:	b111      	cbz	r1, 8006062 <_reclaim_reent+0x46>
 800605c:	4620      	mov	r0, r4
 800605e:	f000 f8a5 	bl	80061ac <_free_r>
 8006062:	69e1      	ldr	r1, [r4, #28]
 8006064:	b111      	cbz	r1, 800606c <_reclaim_reent+0x50>
 8006066:	4620      	mov	r0, r4
 8006068:	f000 f8a0 	bl	80061ac <_free_r>
 800606c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800606e:	b111      	cbz	r1, 8006076 <_reclaim_reent+0x5a>
 8006070:	4620      	mov	r0, r4
 8006072:	f000 f89b 	bl	80061ac <_free_r>
 8006076:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006078:	b111      	cbz	r1, 8006080 <_reclaim_reent+0x64>
 800607a:	4620      	mov	r0, r4
 800607c:	f000 f896 	bl	80061ac <_free_r>
 8006080:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006082:	b111      	cbz	r1, 800608a <_reclaim_reent+0x6e>
 8006084:	4620      	mov	r0, r4
 8006086:	f000 f891 	bl	80061ac <_free_r>
 800608a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800608c:	b111      	cbz	r1, 8006094 <_reclaim_reent+0x78>
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f88c 	bl	80061ac <_free_r>
 8006094:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006096:	b111      	cbz	r1, 800609e <_reclaim_reent+0x82>
 8006098:	4620      	mov	r0, r4
 800609a:	f000 f887 	bl	80061ac <_free_r>
 800609e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060a0:	b111      	cbz	r1, 80060a8 <_reclaim_reent+0x8c>
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 f882 	bl	80061ac <_free_r>
 80060a8:	6a23      	ldr	r3, [r4, #32]
 80060aa:	b14b      	cbz	r3, 80060c0 <_reclaim_reent+0xa4>
 80060ac:	4620      	mov	r0, r4
 80060ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060b2:	4718      	bx	r3
 80060b4:	680e      	ldr	r6, [r1, #0]
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 f878 	bl	80061ac <_free_r>
 80060bc:	4631      	mov	r1, r6
 80060be:	e7bb      	b.n	8006038 <_reclaim_reent+0x1c>
 80060c0:	bd70      	pop	{r4, r5, r6, pc}
 80060c2:	bf00      	nop
 80060c4:	2000001c 	.word	0x2000001c

080060c8 <_lseek_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	4611      	mov	r1, r2
 80060d0:	2200      	movs	r2, #0
 80060d2:	4d05      	ldr	r5, [pc, #20]	@ (80060e8 <_lseek_r+0x20>)
 80060d4:	602a      	str	r2, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fa fb35 	bl	8000746 <_lseek>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_lseek_r+0x1e>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_lseek_r+0x1e>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20001c5c 	.word	0x20001c5c

080060ec <_read_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	4d05      	ldr	r5, [pc, #20]	@ (800610c <_read_r+0x20>)
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fa fae2 	bl	80006c4 <_read>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_read_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_read_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20001c5c 	.word	0x20001c5c

08006110 <_write_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	2200      	movs	r2, #0
 800611a:	4d05      	ldr	r5, [pc, #20]	@ (8006130 <_write_r+0x20>)
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fa f816 	bl	8000150 <_write>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_write_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_write_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20001c5c 	.word	0x20001c5c

08006134 <__errno>:
 8006134:	4b01      	ldr	r3, [pc, #4]	@ (800613c <__errno+0x8>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	2000001c 	.word	0x2000001c

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	2600      	movs	r6, #0
 8006144:	4d0c      	ldr	r5, [pc, #48]	@ (8006178 <__libc_init_array+0x38>)
 8006146:	4c0d      	ldr	r4, [pc, #52]	@ (800617c <__libc_init_array+0x3c>)
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	42a6      	cmp	r6, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	f000 fd3e 	bl	8006bd0 <_init>
 8006154:	2600      	movs	r6, #0
 8006156:	4d0a      	ldr	r5, [pc, #40]	@ (8006180 <__libc_init_array+0x40>)
 8006158:	4c0a      	ldr	r4, [pc, #40]	@ (8006184 <__libc_init_array+0x44>)
 800615a:	1b64      	subs	r4, r4, r5
 800615c:	10a4      	asrs	r4, r4, #2
 800615e:	42a6      	cmp	r6, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f855 3b04 	ldr.w	r3, [r5], #4
 8006168:	4798      	blx	r3
 800616a:	3601      	adds	r6, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006172:	4798      	blx	r3
 8006174:	3601      	adds	r6, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	08006d6c 	.word	0x08006d6c
 800617c:	08006d6c 	.word	0x08006d6c
 8006180:	08006d6c 	.word	0x08006d6c
 8006184:	08006d70 	.word	0x08006d70

08006188 <__retarget_lock_init_recursive>:
 8006188:	4770      	bx	lr

0800618a <__retarget_lock_acquire_recursive>:
 800618a:	4770      	bx	lr

0800618c <__retarget_lock_release_recursive>:
 800618c:	4770      	bx	lr

0800618e <memcpy>:
 800618e:	440a      	add	r2, r1
 8006190:	4291      	cmp	r1, r2
 8006192:	f100 33ff 	add.w	r3, r0, #4294967295
 8006196:	d100      	bne.n	800619a <memcpy+0xc>
 8006198:	4770      	bx	lr
 800619a:	b510      	push	{r4, lr}
 800619c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a0:	4291      	cmp	r1, r2
 80061a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a6:	d1f9      	bne.n	800619c <memcpy+0xe>
 80061a8:	bd10      	pop	{r4, pc}
	...

080061ac <_free_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4605      	mov	r5, r0
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d040      	beq.n	8006236 <_free_r+0x8a>
 80061b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b8:	1f0c      	subs	r4, r1, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bfb8      	it	lt
 80061be:	18e4      	addlt	r4, r4, r3
 80061c0:	f000 f8de 	bl	8006380 <__malloc_lock>
 80061c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <_free_r+0x8c>)
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	b933      	cbnz	r3, 80061d8 <_free_r+0x2c>
 80061ca:	6063      	str	r3, [r4, #4]
 80061cc:	6014      	str	r4, [r2, #0]
 80061ce:	4628      	mov	r0, r5
 80061d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d4:	f000 b8da 	b.w	800638c <__malloc_unlock>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d908      	bls.n	80061ee <_free_r+0x42>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	1821      	adds	r1, r4, r0
 80061e0:	428b      	cmp	r3, r1
 80061e2:	bf01      	itttt	eq
 80061e4:	6819      	ldreq	r1, [r3, #0]
 80061e6:	685b      	ldreq	r3, [r3, #4]
 80061e8:	1809      	addeq	r1, r1, r0
 80061ea:	6021      	streq	r1, [r4, #0]
 80061ec:	e7ed      	b.n	80061ca <_free_r+0x1e>
 80061ee:	461a      	mov	r2, r3
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b10b      	cbz	r3, 80061f8 <_free_r+0x4c>
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d9fa      	bls.n	80061ee <_free_r+0x42>
 80061f8:	6811      	ldr	r1, [r2, #0]
 80061fa:	1850      	adds	r0, r2, r1
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d10b      	bne.n	8006218 <_free_r+0x6c>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	4401      	add	r1, r0
 8006204:	1850      	adds	r0, r2, r1
 8006206:	4283      	cmp	r3, r0
 8006208:	6011      	str	r1, [r2, #0]
 800620a:	d1e0      	bne.n	80061ce <_free_r+0x22>
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4408      	add	r0, r1
 8006212:	6010      	str	r0, [r2, #0]
 8006214:	6053      	str	r3, [r2, #4]
 8006216:	e7da      	b.n	80061ce <_free_r+0x22>
 8006218:	d902      	bls.n	8006220 <_free_r+0x74>
 800621a:	230c      	movs	r3, #12
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	e7d6      	b.n	80061ce <_free_r+0x22>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	1821      	adds	r1, r4, r0
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1809      	addeq	r1, r1, r0
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	6063      	str	r3, [r4, #4]
 8006232:	6054      	str	r4, [r2, #4]
 8006234:	e7cb      	b.n	80061ce <_free_r+0x22>
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	20001c68 	.word	0x20001c68

0800623c <sbrk_aligned>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4e0f      	ldr	r6, [pc, #60]	@ (800627c <sbrk_aligned+0x40>)
 8006240:	460c      	mov	r4, r1
 8006242:	6831      	ldr	r1, [r6, #0]
 8006244:	4605      	mov	r5, r0
 8006246:	b911      	cbnz	r1, 800624e <sbrk_aligned+0x12>
 8006248:	f000 fca4 	bl	8006b94 <_sbrk_r>
 800624c:	6030      	str	r0, [r6, #0]
 800624e:	4621      	mov	r1, r4
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fc9f 	bl	8006b94 <_sbrk_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	d103      	bne.n	8006262 <sbrk_aligned+0x26>
 800625a:	f04f 34ff 	mov.w	r4, #4294967295
 800625e:	4620      	mov	r0, r4
 8006260:	bd70      	pop	{r4, r5, r6, pc}
 8006262:	1cc4      	adds	r4, r0, #3
 8006264:	f024 0403 	bic.w	r4, r4, #3
 8006268:	42a0      	cmp	r0, r4
 800626a:	d0f8      	beq.n	800625e <sbrk_aligned+0x22>
 800626c:	1a21      	subs	r1, r4, r0
 800626e:	4628      	mov	r0, r5
 8006270:	f000 fc90 	bl	8006b94 <_sbrk_r>
 8006274:	3001      	adds	r0, #1
 8006276:	d1f2      	bne.n	800625e <sbrk_aligned+0x22>
 8006278:	e7ef      	b.n	800625a <sbrk_aligned+0x1e>
 800627a:	bf00      	nop
 800627c:	20001c64 	.word	0x20001c64

08006280 <_malloc_r>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	1ccd      	adds	r5, r1, #3
 8006286:	f025 0503 	bic.w	r5, r5, #3
 800628a:	3508      	adds	r5, #8
 800628c:	2d0c      	cmp	r5, #12
 800628e:	bf38      	it	cc
 8006290:	250c      	movcc	r5, #12
 8006292:	2d00      	cmp	r5, #0
 8006294:	4606      	mov	r6, r0
 8006296:	db01      	blt.n	800629c <_malloc_r+0x1c>
 8006298:	42a9      	cmp	r1, r5
 800629a:	d904      	bls.n	80062a6 <_malloc_r+0x26>
 800629c:	230c      	movs	r3, #12
 800629e:	6033      	str	r3, [r6, #0]
 80062a0:	2000      	movs	r0, #0
 80062a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800637c <_malloc_r+0xfc>
 80062aa:	f000 f869 	bl	8006380 <__malloc_lock>
 80062ae:	f8d8 3000 	ldr.w	r3, [r8]
 80062b2:	461c      	mov	r4, r3
 80062b4:	bb44      	cbnz	r4, 8006308 <_malloc_r+0x88>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7ff ffbf 	bl	800623c <sbrk_aligned>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	4604      	mov	r4, r0
 80062c2:	d158      	bne.n	8006376 <_malloc_r+0xf6>
 80062c4:	f8d8 4000 	ldr.w	r4, [r8]
 80062c8:	4627      	mov	r7, r4
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	d143      	bne.n	8006356 <_malloc_r+0xd6>
 80062ce:	2c00      	cmp	r4, #0
 80062d0:	d04b      	beq.n	800636a <_malloc_r+0xea>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	4639      	mov	r1, r7
 80062d6:	4630      	mov	r0, r6
 80062d8:	eb04 0903 	add.w	r9, r4, r3
 80062dc:	f000 fc5a 	bl	8006b94 <_sbrk_r>
 80062e0:	4581      	cmp	r9, r0
 80062e2:	d142      	bne.n	800636a <_malloc_r+0xea>
 80062e4:	6821      	ldr	r1, [r4, #0]
 80062e6:	4630      	mov	r0, r6
 80062e8:	1a6d      	subs	r5, r5, r1
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7ff ffa6 	bl	800623c <sbrk_aligned>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d03a      	beq.n	800636a <_malloc_r+0xea>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	442b      	add	r3, r5
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	f8d8 3000 	ldr.w	r3, [r8]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	bb62      	cbnz	r2, 800635c <_malloc_r+0xdc>
 8006302:	f8c8 7000 	str.w	r7, [r8]
 8006306:	e00f      	b.n	8006328 <_malloc_r+0xa8>
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	1b52      	subs	r2, r2, r5
 800630c:	d420      	bmi.n	8006350 <_malloc_r+0xd0>
 800630e:	2a0b      	cmp	r2, #11
 8006310:	d917      	bls.n	8006342 <_malloc_r+0xc2>
 8006312:	1961      	adds	r1, r4, r5
 8006314:	42a3      	cmp	r3, r4
 8006316:	6025      	str	r5, [r4, #0]
 8006318:	bf18      	it	ne
 800631a:	6059      	strne	r1, [r3, #4]
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	bf08      	it	eq
 8006320:	f8c8 1000 	streq.w	r1, [r8]
 8006324:	5162      	str	r2, [r4, r5]
 8006326:	604b      	str	r3, [r1, #4]
 8006328:	4630      	mov	r0, r6
 800632a:	f000 f82f 	bl	800638c <__malloc_unlock>
 800632e:	f104 000b 	add.w	r0, r4, #11
 8006332:	1d23      	adds	r3, r4, #4
 8006334:	f020 0007 	bic.w	r0, r0, #7
 8006338:	1ac2      	subs	r2, r0, r3
 800633a:	bf1c      	itt	ne
 800633c:	1a1b      	subne	r3, r3, r0
 800633e:	50a3      	strne	r3, [r4, r2]
 8006340:	e7af      	b.n	80062a2 <_malloc_r+0x22>
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	42a3      	cmp	r3, r4
 8006346:	bf0c      	ite	eq
 8006348:	f8c8 2000 	streq.w	r2, [r8]
 800634c:	605a      	strne	r2, [r3, #4]
 800634e:	e7eb      	b.n	8006328 <_malloc_r+0xa8>
 8006350:	4623      	mov	r3, r4
 8006352:	6864      	ldr	r4, [r4, #4]
 8006354:	e7ae      	b.n	80062b4 <_malloc_r+0x34>
 8006356:	463c      	mov	r4, r7
 8006358:	687f      	ldr	r7, [r7, #4]
 800635a:	e7b6      	b.n	80062ca <_malloc_r+0x4a>
 800635c:	461a      	mov	r2, r3
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	42a3      	cmp	r3, r4
 8006362:	d1fb      	bne.n	800635c <_malloc_r+0xdc>
 8006364:	2300      	movs	r3, #0
 8006366:	6053      	str	r3, [r2, #4]
 8006368:	e7de      	b.n	8006328 <_malloc_r+0xa8>
 800636a:	230c      	movs	r3, #12
 800636c:	4630      	mov	r0, r6
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f000 f80c 	bl	800638c <__malloc_unlock>
 8006374:	e794      	b.n	80062a0 <_malloc_r+0x20>
 8006376:	6005      	str	r5, [r0, #0]
 8006378:	e7d6      	b.n	8006328 <_malloc_r+0xa8>
 800637a:	bf00      	nop
 800637c:	20001c68 	.word	0x20001c68

08006380 <__malloc_lock>:
 8006380:	4801      	ldr	r0, [pc, #4]	@ (8006388 <__malloc_lock+0x8>)
 8006382:	f7ff bf02 	b.w	800618a <__retarget_lock_acquire_recursive>
 8006386:	bf00      	nop
 8006388:	20001c60 	.word	0x20001c60

0800638c <__malloc_unlock>:
 800638c:	4801      	ldr	r0, [pc, #4]	@ (8006394 <__malloc_unlock+0x8>)
 800638e:	f7ff befd 	b.w	800618c <__retarget_lock_release_recursive>
 8006392:	bf00      	nop
 8006394:	20001c60 	.word	0x20001c60

08006398 <__sfputc_r>:
 8006398:	6893      	ldr	r3, [r2, #8]
 800639a:	b410      	push	{r4}
 800639c:	3b01      	subs	r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	6093      	str	r3, [r2, #8]
 80063a2:	da07      	bge.n	80063b4 <__sfputc_r+0x1c>
 80063a4:	6994      	ldr	r4, [r2, #24]
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	db01      	blt.n	80063ae <__sfputc_r+0x16>
 80063aa:	290a      	cmp	r1, #10
 80063ac:	d102      	bne.n	80063b4 <__sfputc_r+0x1c>
 80063ae:	bc10      	pop	{r4}
 80063b0:	f7ff bd87 	b.w	8005ec2 <__swbuf_r>
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	1c58      	adds	r0, r3, #1
 80063b8:	6010      	str	r0, [r2, #0]
 80063ba:	7019      	strb	r1, [r3, #0]
 80063bc:	4608      	mov	r0, r1
 80063be:	bc10      	pop	{r4}
 80063c0:	4770      	bx	lr

080063c2 <__sfputs_r>:
 80063c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4614      	mov	r4, r2
 80063ca:	18d5      	adds	r5, r2, r3
 80063cc:	42ac      	cmp	r4, r5
 80063ce:	d101      	bne.n	80063d4 <__sfputs_r+0x12>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e007      	b.n	80063e4 <__sfputs_r+0x22>
 80063d4:	463a      	mov	r2, r7
 80063d6:	4630      	mov	r0, r6
 80063d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063dc:	f7ff ffdc 	bl	8006398 <__sfputc_r>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d1f3      	bne.n	80063cc <__sfputs_r+0xa>
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063e8 <_vfiprintf_r>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	460d      	mov	r5, r1
 80063ee:	4614      	mov	r4, r2
 80063f0:	4698      	mov	r8, r3
 80063f2:	4606      	mov	r6, r0
 80063f4:	b09d      	sub	sp, #116	@ 0x74
 80063f6:	b118      	cbz	r0, 8006400 <_vfiprintf_r+0x18>
 80063f8:	6a03      	ldr	r3, [r0, #32]
 80063fa:	b90b      	cbnz	r3, 8006400 <_vfiprintf_r+0x18>
 80063fc:	f7ff fc78 	bl	8005cf0 <__sinit>
 8006400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006402:	07d9      	lsls	r1, r3, #31
 8006404:	d405      	bmi.n	8006412 <_vfiprintf_r+0x2a>
 8006406:	89ab      	ldrh	r3, [r5, #12]
 8006408:	059a      	lsls	r2, r3, #22
 800640a:	d402      	bmi.n	8006412 <_vfiprintf_r+0x2a>
 800640c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800640e:	f7ff febc 	bl	800618a <__retarget_lock_acquire_recursive>
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	071b      	lsls	r3, r3, #28
 8006416:	d501      	bpl.n	800641c <_vfiprintf_r+0x34>
 8006418:	692b      	ldr	r3, [r5, #16]
 800641a:	b99b      	cbnz	r3, 8006444 <_vfiprintf_r+0x5c>
 800641c:	4629      	mov	r1, r5
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff fd8e 	bl	8005f40 <__swsetup_r>
 8006424:	b170      	cbz	r0, 8006444 <_vfiprintf_r+0x5c>
 8006426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006428:	07dc      	lsls	r4, r3, #31
 800642a:	d504      	bpl.n	8006436 <_vfiprintf_r+0x4e>
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	b01d      	add	sp, #116	@ 0x74
 8006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	0598      	lsls	r0, r3, #22
 800643a:	d4f7      	bmi.n	800642c <_vfiprintf_r+0x44>
 800643c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800643e:	f7ff fea5 	bl	800618c <__retarget_lock_release_recursive>
 8006442:	e7f3      	b.n	800642c <_vfiprintf_r+0x44>
 8006444:	2300      	movs	r3, #0
 8006446:	9309      	str	r3, [sp, #36]	@ 0x24
 8006448:	2320      	movs	r3, #32
 800644a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800644e:	2330      	movs	r3, #48	@ 0x30
 8006450:	f04f 0901 	mov.w	r9, #1
 8006454:	f8cd 800c 	str.w	r8, [sp, #12]
 8006458:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006604 <_vfiprintf_r+0x21c>
 800645c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006460:	4623      	mov	r3, r4
 8006462:	469a      	mov	sl, r3
 8006464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006468:	b10a      	cbz	r2, 800646e <_vfiprintf_r+0x86>
 800646a:	2a25      	cmp	r2, #37	@ 0x25
 800646c:	d1f9      	bne.n	8006462 <_vfiprintf_r+0x7a>
 800646e:	ebba 0b04 	subs.w	fp, sl, r4
 8006472:	d00b      	beq.n	800648c <_vfiprintf_r+0xa4>
 8006474:	465b      	mov	r3, fp
 8006476:	4622      	mov	r2, r4
 8006478:	4629      	mov	r1, r5
 800647a:	4630      	mov	r0, r6
 800647c:	f7ff ffa1 	bl	80063c2 <__sfputs_r>
 8006480:	3001      	adds	r0, #1
 8006482:	f000 80a7 	beq.w	80065d4 <_vfiprintf_r+0x1ec>
 8006486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006488:	445a      	add	r2, fp
 800648a:	9209      	str	r2, [sp, #36]	@ 0x24
 800648c:	f89a 3000 	ldrb.w	r3, [sl]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 809f 	beq.w	80065d4 <_vfiprintf_r+0x1ec>
 8006496:	2300      	movs	r3, #0
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064a0:	f10a 0a01 	add.w	sl, sl, #1
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	9307      	str	r3, [sp, #28]
 80064a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80064ae:	4654      	mov	r4, sl
 80064b0:	2205      	movs	r2, #5
 80064b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b6:	4853      	ldr	r0, [pc, #332]	@ (8006604 <_vfiprintf_r+0x21c>)
 80064b8:	f000 fb7c 	bl	8006bb4 <memchr>
 80064bc:	9a04      	ldr	r2, [sp, #16]
 80064be:	b9d8      	cbnz	r0, 80064f8 <_vfiprintf_r+0x110>
 80064c0:	06d1      	lsls	r1, r2, #27
 80064c2:	bf44      	itt	mi
 80064c4:	2320      	movmi	r3, #32
 80064c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ca:	0713      	lsls	r3, r2, #28
 80064cc:	bf44      	itt	mi
 80064ce:	232b      	movmi	r3, #43	@ 0x2b
 80064d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d4:	f89a 3000 	ldrb.w	r3, [sl]
 80064d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064da:	d015      	beq.n	8006508 <_vfiprintf_r+0x120>
 80064dc:	4654      	mov	r4, sl
 80064de:	2000      	movs	r0, #0
 80064e0:	f04f 0c0a 	mov.w	ip, #10
 80064e4:	9a07      	ldr	r2, [sp, #28]
 80064e6:	4621      	mov	r1, r4
 80064e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ec:	3b30      	subs	r3, #48	@ 0x30
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d94b      	bls.n	800658a <_vfiprintf_r+0x1a2>
 80064f2:	b1b0      	cbz	r0, 8006522 <_vfiprintf_r+0x13a>
 80064f4:	9207      	str	r2, [sp, #28]
 80064f6:	e014      	b.n	8006522 <_vfiprintf_r+0x13a>
 80064f8:	eba0 0308 	sub.w	r3, r0, r8
 80064fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	46a2      	mov	sl, r4
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	e7d2      	b.n	80064ae <_vfiprintf_r+0xc6>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	1d19      	adds	r1, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	bfbb      	ittet	lt
 8006514:	425b      	neglt	r3, r3
 8006516:	f042 0202 	orrlt.w	r2, r2, #2
 800651a:	9307      	strge	r3, [sp, #28]
 800651c:	9307      	strlt	r3, [sp, #28]
 800651e:	bfb8      	it	lt
 8006520:	9204      	strlt	r2, [sp, #16]
 8006522:	7823      	ldrb	r3, [r4, #0]
 8006524:	2b2e      	cmp	r3, #46	@ 0x2e
 8006526:	d10a      	bne.n	800653e <_vfiprintf_r+0x156>
 8006528:	7863      	ldrb	r3, [r4, #1]
 800652a:	2b2a      	cmp	r3, #42	@ 0x2a
 800652c:	d132      	bne.n	8006594 <_vfiprintf_r+0x1ac>
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	3402      	adds	r4, #2
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9203      	str	r2, [sp, #12]
 8006538:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800653c:	9305      	str	r3, [sp, #20]
 800653e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006608 <_vfiprintf_r+0x220>
 8006542:	2203      	movs	r2, #3
 8006544:	4650      	mov	r0, sl
 8006546:	7821      	ldrb	r1, [r4, #0]
 8006548:	f000 fb34 	bl	8006bb4 <memchr>
 800654c:	b138      	cbz	r0, 800655e <_vfiprintf_r+0x176>
 800654e:	2240      	movs	r2, #64	@ 0x40
 8006550:	9b04      	ldr	r3, [sp, #16]
 8006552:	eba0 000a 	sub.w	r0, r0, sl
 8006556:	4082      	lsls	r2, r0
 8006558:	4313      	orrs	r3, r2
 800655a:	3401      	adds	r4, #1
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006562:	2206      	movs	r2, #6
 8006564:	4829      	ldr	r0, [pc, #164]	@ (800660c <_vfiprintf_r+0x224>)
 8006566:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800656a:	f000 fb23 	bl	8006bb4 <memchr>
 800656e:	2800      	cmp	r0, #0
 8006570:	d03f      	beq.n	80065f2 <_vfiprintf_r+0x20a>
 8006572:	4b27      	ldr	r3, [pc, #156]	@ (8006610 <_vfiprintf_r+0x228>)
 8006574:	bb1b      	cbnz	r3, 80065be <_vfiprintf_r+0x1d6>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	3307      	adds	r3, #7
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	3308      	adds	r3, #8
 8006580:	9303      	str	r3, [sp, #12]
 8006582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006584:	443b      	add	r3, r7
 8006586:	9309      	str	r3, [sp, #36]	@ 0x24
 8006588:	e76a      	b.n	8006460 <_vfiprintf_r+0x78>
 800658a:	460c      	mov	r4, r1
 800658c:	2001      	movs	r0, #1
 800658e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006592:	e7a8      	b.n	80064e6 <_vfiprintf_r+0xfe>
 8006594:	2300      	movs	r3, #0
 8006596:	f04f 0c0a 	mov.w	ip, #10
 800659a:	4619      	mov	r1, r3
 800659c:	3401      	adds	r4, #1
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	4620      	mov	r0, r4
 80065a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a6:	3a30      	subs	r2, #48	@ 0x30
 80065a8:	2a09      	cmp	r2, #9
 80065aa:	d903      	bls.n	80065b4 <_vfiprintf_r+0x1cc>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0c6      	beq.n	800653e <_vfiprintf_r+0x156>
 80065b0:	9105      	str	r1, [sp, #20]
 80065b2:	e7c4      	b.n	800653e <_vfiprintf_r+0x156>
 80065b4:	4604      	mov	r4, r0
 80065b6:	2301      	movs	r3, #1
 80065b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80065bc:	e7f0      	b.n	80065a0 <_vfiprintf_r+0x1b8>
 80065be:	ab03      	add	r3, sp, #12
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	462a      	mov	r2, r5
 80065c4:	4630      	mov	r0, r6
 80065c6:	4b13      	ldr	r3, [pc, #76]	@ (8006614 <_vfiprintf_r+0x22c>)
 80065c8:	a904      	add	r1, sp, #16
 80065ca:	f3af 8000 	nop.w
 80065ce:	4607      	mov	r7, r0
 80065d0:	1c78      	adds	r0, r7, #1
 80065d2:	d1d6      	bne.n	8006582 <_vfiprintf_r+0x19a>
 80065d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065d6:	07d9      	lsls	r1, r3, #31
 80065d8:	d405      	bmi.n	80065e6 <_vfiprintf_r+0x1fe>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	059a      	lsls	r2, r3, #22
 80065de:	d402      	bmi.n	80065e6 <_vfiprintf_r+0x1fe>
 80065e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065e2:	f7ff fdd3 	bl	800618c <__retarget_lock_release_recursive>
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	065b      	lsls	r3, r3, #25
 80065ea:	f53f af1f 	bmi.w	800642c <_vfiprintf_r+0x44>
 80065ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f0:	e71e      	b.n	8006430 <_vfiprintf_r+0x48>
 80065f2:	ab03      	add	r3, sp, #12
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	462a      	mov	r2, r5
 80065f8:	4630      	mov	r0, r6
 80065fa:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <_vfiprintf_r+0x22c>)
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	f000 f87d 	bl	80066fc <_printf_i>
 8006602:	e7e4      	b.n	80065ce <_vfiprintf_r+0x1e6>
 8006604:	08006d36 	.word	0x08006d36
 8006608:	08006d3c 	.word	0x08006d3c
 800660c:	08006d40 	.word	0x08006d40
 8006610:	00000000 	.word	0x00000000
 8006614:	080063c3 	.word	0x080063c3

08006618 <_printf_common>:
 8006618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661c:	4616      	mov	r6, r2
 800661e:	4698      	mov	r8, r3
 8006620:	688a      	ldr	r2, [r1, #8]
 8006622:	690b      	ldr	r3, [r1, #16]
 8006624:	4607      	mov	r7, r0
 8006626:	4293      	cmp	r3, r2
 8006628:	bfb8      	it	lt
 800662a:	4613      	movlt	r3, r2
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006638:	b10a      	cbz	r2, 800663e <_printf_common+0x26>
 800663a:	3301      	adds	r3, #1
 800663c:	6033      	str	r3, [r6, #0]
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	0699      	lsls	r1, r3, #26
 8006642:	bf42      	ittt	mi
 8006644:	6833      	ldrmi	r3, [r6, #0]
 8006646:	3302      	addmi	r3, #2
 8006648:	6033      	strmi	r3, [r6, #0]
 800664a:	6825      	ldr	r5, [r4, #0]
 800664c:	f015 0506 	ands.w	r5, r5, #6
 8006650:	d106      	bne.n	8006660 <_printf_common+0x48>
 8006652:	f104 0a19 	add.w	sl, r4, #25
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	6832      	ldr	r2, [r6, #0]
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	42ab      	cmp	r3, r5
 800665e:	dc2b      	bgt.n	80066b8 <_printf_common+0xa0>
 8006660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	3b00      	subs	r3, #0
 8006668:	bf18      	it	ne
 800666a:	2301      	movne	r3, #1
 800666c:	0692      	lsls	r2, r2, #26
 800666e:	d430      	bmi.n	80066d2 <_printf_common+0xba>
 8006670:	4641      	mov	r1, r8
 8006672:	4638      	mov	r0, r7
 8006674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006678:	47c8      	blx	r9
 800667a:	3001      	adds	r0, #1
 800667c:	d023      	beq.n	80066c6 <_printf_common+0xae>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	6922      	ldr	r2, [r4, #16]
 8006682:	f003 0306 	and.w	r3, r3, #6
 8006686:	2b04      	cmp	r3, #4
 8006688:	bf14      	ite	ne
 800668a:	2500      	movne	r5, #0
 800668c:	6833      	ldreq	r3, [r6, #0]
 800668e:	f04f 0600 	mov.w	r6, #0
 8006692:	bf08      	it	eq
 8006694:	68e5      	ldreq	r5, [r4, #12]
 8006696:	f104 041a 	add.w	r4, r4, #26
 800669a:	bf08      	it	eq
 800669c:	1aed      	subeq	r5, r5, r3
 800669e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80066a2:	bf08      	it	eq
 80066a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066a8:	4293      	cmp	r3, r2
 80066aa:	bfc4      	itt	gt
 80066ac:	1a9b      	subgt	r3, r3, r2
 80066ae:	18ed      	addgt	r5, r5, r3
 80066b0:	42b5      	cmp	r5, r6
 80066b2:	d11a      	bne.n	80066ea <_printf_common+0xd2>
 80066b4:	2000      	movs	r0, #0
 80066b6:	e008      	b.n	80066ca <_printf_common+0xb2>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4652      	mov	r2, sl
 80066bc:	4641      	mov	r1, r8
 80066be:	4638      	mov	r0, r7
 80066c0:	47c8      	blx	r9
 80066c2:	3001      	adds	r0, #1
 80066c4:	d103      	bne.n	80066ce <_printf_common+0xb6>
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ce:	3501      	adds	r5, #1
 80066d0:	e7c1      	b.n	8006656 <_printf_common+0x3e>
 80066d2:	2030      	movs	r0, #48	@ 0x30
 80066d4:	18e1      	adds	r1, r4, r3
 80066d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066e0:	4422      	add	r2, r4
 80066e2:	3302      	adds	r3, #2
 80066e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066e8:	e7c2      	b.n	8006670 <_printf_common+0x58>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4622      	mov	r2, r4
 80066ee:	4641      	mov	r1, r8
 80066f0:	4638      	mov	r0, r7
 80066f2:	47c8      	blx	r9
 80066f4:	3001      	adds	r0, #1
 80066f6:	d0e6      	beq.n	80066c6 <_printf_common+0xae>
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7d9      	b.n	80066b0 <_printf_common+0x98>

080066fc <_printf_i>:
 80066fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	7e0f      	ldrb	r7, [r1, #24]
 8006702:	4691      	mov	r9, r2
 8006704:	2f78      	cmp	r7, #120	@ 0x78
 8006706:	4680      	mov	r8, r0
 8006708:	460c      	mov	r4, r1
 800670a:	469a      	mov	sl, r3
 800670c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800670e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006712:	d807      	bhi.n	8006724 <_printf_i+0x28>
 8006714:	2f62      	cmp	r7, #98	@ 0x62
 8006716:	d80a      	bhi.n	800672e <_printf_i+0x32>
 8006718:	2f00      	cmp	r7, #0
 800671a:	f000 80d3 	beq.w	80068c4 <_printf_i+0x1c8>
 800671e:	2f58      	cmp	r7, #88	@ 0x58
 8006720:	f000 80ba 	beq.w	8006898 <_printf_i+0x19c>
 8006724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800672c:	e03a      	b.n	80067a4 <_printf_i+0xa8>
 800672e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006732:	2b15      	cmp	r3, #21
 8006734:	d8f6      	bhi.n	8006724 <_printf_i+0x28>
 8006736:	a101      	add	r1, pc, #4	@ (adr r1, 800673c <_printf_i+0x40>)
 8006738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800673c:	08006795 	.word	0x08006795
 8006740:	080067a9 	.word	0x080067a9
 8006744:	08006725 	.word	0x08006725
 8006748:	08006725 	.word	0x08006725
 800674c:	08006725 	.word	0x08006725
 8006750:	08006725 	.word	0x08006725
 8006754:	080067a9 	.word	0x080067a9
 8006758:	08006725 	.word	0x08006725
 800675c:	08006725 	.word	0x08006725
 8006760:	08006725 	.word	0x08006725
 8006764:	08006725 	.word	0x08006725
 8006768:	080068ab 	.word	0x080068ab
 800676c:	080067d3 	.word	0x080067d3
 8006770:	08006865 	.word	0x08006865
 8006774:	08006725 	.word	0x08006725
 8006778:	08006725 	.word	0x08006725
 800677c:	080068cd 	.word	0x080068cd
 8006780:	08006725 	.word	0x08006725
 8006784:	080067d3 	.word	0x080067d3
 8006788:	08006725 	.word	0x08006725
 800678c:	08006725 	.word	0x08006725
 8006790:	0800686d 	.word	0x0800686d
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	1d1a      	adds	r2, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6032      	str	r2, [r6, #0]
 800679c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067a4:	2301      	movs	r3, #1
 80067a6:	e09e      	b.n	80068e6 <_printf_i+0x1ea>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	1d19      	adds	r1, r3, #4
 80067ae:	6031      	str	r1, [r6, #0]
 80067b0:	0606      	lsls	r6, r0, #24
 80067b2:	d501      	bpl.n	80067b8 <_printf_i+0xbc>
 80067b4:	681d      	ldr	r5, [r3, #0]
 80067b6:	e003      	b.n	80067c0 <_printf_i+0xc4>
 80067b8:	0645      	lsls	r5, r0, #25
 80067ba:	d5fb      	bpl.n	80067b4 <_printf_i+0xb8>
 80067bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	da03      	bge.n	80067cc <_printf_i+0xd0>
 80067c4:	232d      	movs	r3, #45	@ 0x2d
 80067c6:	426d      	negs	r5, r5
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067cc:	230a      	movs	r3, #10
 80067ce:	4859      	ldr	r0, [pc, #356]	@ (8006934 <_printf_i+0x238>)
 80067d0:	e011      	b.n	80067f6 <_printf_i+0xfa>
 80067d2:	6821      	ldr	r1, [r4, #0]
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	0608      	lsls	r0, r1, #24
 80067d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067dc:	d402      	bmi.n	80067e4 <_printf_i+0xe8>
 80067de:	0649      	lsls	r1, r1, #25
 80067e0:	bf48      	it	mi
 80067e2:	b2ad      	uxthmi	r5, r5
 80067e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067e6:	6033      	str	r3, [r6, #0]
 80067e8:	bf14      	ite	ne
 80067ea:	230a      	movne	r3, #10
 80067ec:	2308      	moveq	r3, #8
 80067ee:	4851      	ldr	r0, [pc, #324]	@ (8006934 <_printf_i+0x238>)
 80067f0:	2100      	movs	r1, #0
 80067f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067f6:	6866      	ldr	r6, [r4, #4]
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	bfa8      	it	ge
 80067fc:	6821      	ldrge	r1, [r4, #0]
 80067fe:	60a6      	str	r6, [r4, #8]
 8006800:	bfa4      	itt	ge
 8006802:	f021 0104 	bicge.w	r1, r1, #4
 8006806:	6021      	strge	r1, [r4, #0]
 8006808:	b90d      	cbnz	r5, 800680e <_printf_i+0x112>
 800680a:	2e00      	cmp	r6, #0
 800680c:	d04b      	beq.n	80068a6 <_printf_i+0x1aa>
 800680e:	4616      	mov	r6, r2
 8006810:	fbb5 f1f3 	udiv	r1, r5, r3
 8006814:	fb03 5711 	mls	r7, r3, r1, r5
 8006818:	5dc7      	ldrb	r7, [r0, r7]
 800681a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800681e:	462f      	mov	r7, r5
 8006820:	42bb      	cmp	r3, r7
 8006822:	460d      	mov	r5, r1
 8006824:	d9f4      	bls.n	8006810 <_printf_i+0x114>
 8006826:	2b08      	cmp	r3, #8
 8006828:	d10b      	bne.n	8006842 <_printf_i+0x146>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	07df      	lsls	r7, r3, #31
 800682e:	d508      	bpl.n	8006842 <_printf_i+0x146>
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	6861      	ldr	r1, [r4, #4]
 8006834:	4299      	cmp	r1, r3
 8006836:	bfde      	ittt	le
 8006838:	2330      	movle	r3, #48	@ 0x30
 800683a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800683e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006842:	1b92      	subs	r2, r2, r6
 8006844:	6122      	str	r2, [r4, #16]
 8006846:	464b      	mov	r3, r9
 8006848:	4621      	mov	r1, r4
 800684a:	4640      	mov	r0, r8
 800684c:	f8cd a000 	str.w	sl, [sp]
 8006850:	aa03      	add	r2, sp, #12
 8006852:	f7ff fee1 	bl	8006618 <_printf_common>
 8006856:	3001      	adds	r0, #1
 8006858:	d14a      	bne.n	80068f0 <_printf_i+0x1f4>
 800685a:	f04f 30ff 	mov.w	r0, #4294967295
 800685e:	b004      	add	sp, #16
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	f043 0320 	orr.w	r3, r3, #32
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	2778      	movs	r7, #120	@ 0x78
 800686e:	4832      	ldr	r0, [pc, #200]	@ (8006938 <_printf_i+0x23c>)
 8006870:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	6831      	ldr	r1, [r6, #0]
 8006878:	061f      	lsls	r7, r3, #24
 800687a:	f851 5b04 	ldr.w	r5, [r1], #4
 800687e:	d402      	bmi.n	8006886 <_printf_i+0x18a>
 8006880:	065f      	lsls	r7, r3, #25
 8006882:	bf48      	it	mi
 8006884:	b2ad      	uxthmi	r5, r5
 8006886:	6031      	str	r1, [r6, #0]
 8006888:	07d9      	lsls	r1, r3, #31
 800688a:	bf44      	itt	mi
 800688c:	f043 0320 	orrmi.w	r3, r3, #32
 8006890:	6023      	strmi	r3, [r4, #0]
 8006892:	b11d      	cbz	r5, 800689c <_printf_i+0x1a0>
 8006894:	2310      	movs	r3, #16
 8006896:	e7ab      	b.n	80067f0 <_printf_i+0xf4>
 8006898:	4826      	ldr	r0, [pc, #152]	@ (8006934 <_printf_i+0x238>)
 800689a:	e7e9      	b.n	8006870 <_printf_i+0x174>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	f023 0320 	bic.w	r3, r3, #32
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	e7f6      	b.n	8006894 <_printf_i+0x198>
 80068a6:	4616      	mov	r6, r2
 80068a8:	e7bd      	b.n	8006826 <_printf_i+0x12a>
 80068aa:	6833      	ldr	r3, [r6, #0]
 80068ac:	6825      	ldr	r5, [r4, #0]
 80068ae:	1d18      	adds	r0, r3, #4
 80068b0:	6961      	ldr	r1, [r4, #20]
 80068b2:	6030      	str	r0, [r6, #0]
 80068b4:	062e      	lsls	r6, r5, #24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	d501      	bpl.n	80068be <_printf_i+0x1c2>
 80068ba:	6019      	str	r1, [r3, #0]
 80068bc:	e002      	b.n	80068c4 <_printf_i+0x1c8>
 80068be:	0668      	lsls	r0, r5, #25
 80068c0:	d5fb      	bpl.n	80068ba <_printf_i+0x1be>
 80068c2:	8019      	strh	r1, [r3, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	4616      	mov	r6, r2
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	e7bc      	b.n	8006846 <_printf_i+0x14a>
 80068cc:	6833      	ldr	r3, [r6, #0]
 80068ce:	2100      	movs	r1, #0
 80068d0:	1d1a      	adds	r2, r3, #4
 80068d2:	6032      	str	r2, [r6, #0]
 80068d4:	681e      	ldr	r6, [r3, #0]
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 f96b 	bl	8006bb4 <memchr>
 80068de:	b108      	cbz	r0, 80068e4 <_printf_i+0x1e8>
 80068e0:	1b80      	subs	r0, r0, r6
 80068e2:	6060      	str	r0, [r4, #4]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	2300      	movs	r3, #0
 80068ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ee:	e7aa      	b.n	8006846 <_printf_i+0x14a>
 80068f0:	4632      	mov	r2, r6
 80068f2:	4649      	mov	r1, r9
 80068f4:	4640      	mov	r0, r8
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	47d0      	blx	sl
 80068fa:	3001      	adds	r0, #1
 80068fc:	d0ad      	beq.n	800685a <_printf_i+0x15e>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	079b      	lsls	r3, r3, #30
 8006902:	d413      	bmi.n	800692c <_printf_i+0x230>
 8006904:	68e0      	ldr	r0, [r4, #12]
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	4298      	cmp	r0, r3
 800690a:	bfb8      	it	lt
 800690c:	4618      	movlt	r0, r3
 800690e:	e7a6      	b.n	800685e <_printf_i+0x162>
 8006910:	2301      	movs	r3, #1
 8006912:	4632      	mov	r2, r6
 8006914:	4649      	mov	r1, r9
 8006916:	4640      	mov	r0, r8
 8006918:	47d0      	blx	sl
 800691a:	3001      	adds	r0, #1
 800691c:	d09d      	beq.n	800685a <_printf_i+0x15e>
 800691e:	3501      	adds	r5, #1
 8006920:	68e3      	ldr	r3, [r4, #12]
 8006922:	9903      	ldr	r1, [sp, #12]
 8006924:	1a5b      	subs	r3, r3, r1
 8006926:	42ab      	cmp	r3, r5
 8006928:	dcf2      	bgt.n	8006910 <_printf_i+0x214>
 800692a:	e7eb      	b.n	8006904 <_printf_i+0x208>
 800692c:	2500      	movs	r5, #0
 800692e:	f104 0619 	add.w	r6, r4, #25
 8006932:	e7f5      	b.n	8006920 <_printf_i+0x224>
 8006934:	08006d47 	.word	0x08006d47
 8006938:	08006d58 	.word	0x08006d58

0800693c <__sflush_r>:
 800693c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	0716      	lsls	r6, r2, #28
 8006944:	4605      	mov	r5, r0
 8006946:	460c      	mov	r4, r1
 8006948:	d454      	bmi.n	80069f4 <__sflush_r+0xb8>
 800694a:	684b      	ldr	r3, [r1, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dc02      	bgt.n	8006956 <__sflush_r+0x1a>
 8006950:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	dd48      	ble.n	80069e8 <__sflush_r+0xac>
 8006956:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006958:	2e00      	cmp	r6, #0
 800695a:	d045      	beq.n	80069e8 <__sflush_r+0xac>
 800695c:	2300      	movs	r3, #0
 800695e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006962:	682f      	ldr	r7, [r5, #0]
 8006964:	6a21      	ldr	r1, [r4, #32]
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	d030      	beq.n	80069cc <__sflush_r+0x90>
 800696a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	0759      	lsls	r1, r3, #29
 8006970:	d505      	bpl.n	800697e <__sflush_r+0x42>
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	1ad2      	subs	r2, r2, r3
 8006976:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006978:	b10b      	cbz	r3, 800697e <__sflush_r+0x42>
 800697a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	2300      	movs	r3, #0
 8006980:	4628      	mov	r0, r5
 8006982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006984:	6a21      	ldr	r1, [r4, #32]
 8006986:	47b0      	blx	r6
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	d106      	bne.n	800699c <__sflush_r+0x60>
 800698e:	6829      	ldr	r1, [r5, #0]
 8006990:	291d      	cmp	r1, #29
 8006992:	d82b      	bhi.n	80069ec <__sflush_r+0xb0>
 8006994:	4a28      	ldr	r2, [pc, #160]	@ (8006a38 <__sflush_r+0xfc>)
 8006996:	410a      	asrs	r2, r1
 8006998:	07d6      	lsls	r6, r2, #31
 800699a:	d427      	bmi.n	80069ec <__sflush_r+0xb0>
 800699c:	2200      	movs	r2, #0
 800699e:	6062      	str	r2, [r4, #4]
 80069a0:	6922      	ldr	r2, [r4, #16]
 80069a2:	04d9      	lsls	r1, r3, #19
 80069a4:	6022      	str	r2, [r4, #0]
 80069a6:	d504      	bpl.n	80069b2 <__sflush_r+0x76>
 80069a8:	1c42      	adds	r2, r0, #1
 80069aa:	d101      	bne.n	80069b0 <__sflush_r+0x74>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b903      	cbnz	r3, 80069b2 <__sflush_r+0x76>
 80069b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80069b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069b4:	602f      	str	r7, [r5, #0]
 80069b6:	b1b9      	cbz	r1, 80069e8 <__sflush_r+0xac>
 80069b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069bc:	4299      	cmp	r1, r3
 80069be:	d002      	beq.n	80069c6 <__sflush_r+0x8a>
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7ff fbf3 	bl	80061ac <_free_r>
 80069c6:	2300      	movs	r3, #0
 80069c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ca:	e00d      	b.n	80069e8 <__sflush_r+0xac>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b0      	blx	r6
 80069d2:	4602      	mov	r2, r0
 80069d4:	1c50      	adds	r0, r2, #1
 80069d6:	d1c9      	bne.n	800696c <__sflush_r+0x30>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0c6      	beq.n	800696c <__sflush_r+0x30>
 80069de:	2b1d      	cmp	r3, #29
 80069e0:	d001      	beq.n	80069e6 <__sflush_r+0xaa>
 80069e2:	2b16      	cmp	r3, #22
 80069e4:	d11d      	bne.n	8006a22 <__sflush_r+0xe6>
 80069e6:	602f      	str	r7, [r5, #0]
 80069e8:	2000      	movs	r0, #0
 80069ea:	e021      	b.n	8006a30 <__sflush_r+0xf4>
 80069ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	e01a      	b.n	8006a2a <__sflush_r+0xee>
 80069f4:	690f      	ldr	r7, [r1, #16]
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	d0f6      	beq.n	80069e8 <__sflush_r+0xac>
 80069fa:	0793      	lsls	r3, r2, #30
 80069fc:	bf18      	it	ne
 80069fe:	2300      	movne	r3, #0
 8006a00:	680e      	ldr	r6, [r1, #0]
 8006a02:	bf08      	it	eq
 8006a04:	694b      	ldreq	r3, [r1, #20]
 8006a06:	1bf6      	subs	r6, r6, r7
 8006a08:	600f      	str	r7, [r1, #0]
 8006a0a:	608b      	str	r3, [r1, #8]
 8006a0c:	2e00      	cmp	r6, #0
 8006a0e:	ddeb      	ble.n	80069e8 <__sflush_r+0xac>
 8006a10:	4633      	mov	r3, r6
 8006a12:	463a      	mov	r2, r7
 8006a14:	4628      	mov	r0, r5
 8006a16:	6a21      	ldr	r1, [r4, #32]
 8006a18:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a1c:	47e0      	blx	ip
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	dc07      	bgt.n	8006a32 <__sflush_r+0xf6>
 8006a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a32:	4407      	add	r7, r0
 8006a34:	1a36      	subs	r6, r6, r0
 8006a36:	e7e9      	b.n	8006a0c <__sflush_r+0xd0>
 8006a38:	dfbffffe 	.word	0xdfbffffe

08006a3c <_fflush_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	690b      	ldr	r3, [r1, #16]
 8006a40:	4605      	mov	r5, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b913      	cbnz	r3, 8006a4c <_fflush_r+0x10>
 8006a46:	2500      	movs	r5, #0
 8006a48:	4628      	mov	r0, r5
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	b118      	cbz	r0, 8006a56 <_fflush_r+0x1a>
 8006a4e:	6a03      	ldr	r3, [r0, #32]
 8006a50:	b90b      	cbnz	r3, 8006a56 <_fflush_r+0x1a>
 8006a52:	f7ff f94d 	bl	8005cf0 <__sinit>
 8006a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f3      	beq.n	8006a46 <_fflush_r+0xa>
 8006a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a60:	07d0      	lsls	r0, r2, #31
 8006a62:	d404      	bmi.n	8006a6e <_fflush_r+0x32>
 8006a64:	0599      	lsls	r1, r3, #22
 8006a66:	d402      	bmi.n	8006a6e <_fflush_r+0x32>
 8006a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a6a:	f7ff fb8e 	bl	800618a <__retarget_lock_acquire_recursive>
 8006a6e:	4628      	mov	r0, r5
 8006a70:	4621      	mov	r1, r4
 8006a72:	f7ff ff63 	bl	800693c <__sflush_r>
 8006a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a78:	4605      	mov	r5, r0
 8006a7a:	07da      	lsls	r2, r3, #31
 8006a7c:	d4e4      	bmi.n	8006a48 <_fflush_r+0xc>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	059b      	lsls	r3, r3, #22
 8006a82:	d4e1      	bmi.n	8006a48 <_fflush_r+0xc>
 8006a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a86:	f7ff fb81 	bl	800618c <__retarget_lock_release_recursive>
 8006a8a:	e7dd      	b.n	8006a48 <_fflush_r+0xc>

08006a8c <__swhatbuf_r>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	460c      	mov	r4, r1
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	4615      	mov	r5, r2
 8006a96:	2900      	cmp	r1, #0
 8006a98:	461e      	mov	r6, r3
 8006a9a:	b096      	sub	sp, #88	@ 0x58
 8006a9c:	da0c      	bge.n	8006ab8 <__swhatbuf_r+0x2c>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aa6:	bf14      	ite	ne
 8006aa8:	2340      	movne	r3, #64	@ 0x40
 8006aaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006aae:	2000      	movs	r0, #0
 8006ab0:	6031      	str	r1, [r6, #0]
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	b016      	add	sp, #88	@ 0x58
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	466a      	mov	r2, sp
 8006aba:	f000 f849 	bl	8006b50 <_fstat_r>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	dbed      	blt.n	8006a9e <__swhatbuf_r+0x12>
 8006ac2:	9901      	ldr	r1, [sp, #4]
 8006ac4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ac8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006acc:	4259      	negs	r1, r3
 8006ace:	4159      	adcs	r1, r3
 8006ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ad4:	e7eb      	b.n	8006aae <__swhatbuf_r+0x22>

08006ad6 <__smakebuf_r>:
 8006ad6:	898b      	ldrh	r3, [r1, #12]
 8006ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ada:	079d      	lsls	r5, r3, #30
 8006adc:	4606      	mov	r6, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	d507      	bpl.n	8006af2 <__smakebuf_r+0x1c>
 8006ae2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	2301      	movs	r3, #1
 8006aec:	6163      	str	r3, [r4, #20]
 8006aee:	b003      	add	sp, #12
 8006af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af2:	466a      	mov	r2, sp
 8006af4:	ab01      	add	r3, sp, #4
 8006af6:	f7ff ffc9 	bl	8006a8c <__swhatbuf_r>
 8006afa:	9f00      	ldr	r7, [sp, #0]
 8006afc:	4605      	mov	r5, r0
 8006afe:	4639      	mov	r1, r7
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff fbbd 	bl	8006280 <_malloc_r>
 8006b06:	b948      	cbnz	r0, 8006b1c <__smakebuf_r+0x46>
 8006b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0c:	059a      	lsls	r2, r3, #22
 8006b0e:	d4ee      	bmi.n	8006aee <__smakebuf_r+0x18>
 8006b10:	f023 0303 	bic.w	r3, r3, #3
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e7e2      	b.n	8006ae2 <__smakebuf_r+0xc>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	6020      	str	r0, [r4, #0]
 8006b2c:	b15b      	cbz	r3, 8006b46 <__smakebuf_r+0x70>
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b34:	f000 f81e 	bl	8006b74 <_isatty_r>
 8006b38:	b128      	cbz	r0, 8006b46 <__smakebuf_r+0x70>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f023 0303 	bic.w	r3, r3, #3
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	431d      	orrs	r5, r3
 8006b4a:	81a5      	strh	r5, [r4, #12]
 8006b4c:	e7cf      	b.n	8006aee <__smakebuf_r+0x18>
	...

08006b50 <_fstat_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	2300      	movs	r3, #0
 8006b54:	4d06      	ldr	r5, [pc, #24]	@ (8006b70 <_fstat_r+0x20>)
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	f7f9 fdd9 	bl	8000714 <_fstat>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d102      	bne.n	8006b6c <_fstat_r+0x1c>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b103      	cbz	r3, 8006b6c <_fstat_r+0x1c>
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	bf00      	nop
 8006b70:	20001c5c 	.word	0x20001c5c

08006b74 <_isatty_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	2300      	movs	r3, #0
 8006b78:	4d05      	ldr	r5, [pc, #20]	@ (8006b90 <_isatty_r+0x1c>)
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7f9 fdd7 	bl	8000732 <_isatty>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_isatty_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_isatty_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	20001c5c 	.word	0x20001c5c

08006b94 <_sbrk_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	2300      	movs	r3, #0
 8006b98:	4d05      	ldr	r5, [pc, #20]	@ (8006bb0 <_sbrk_r+0x1c>)
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	f7f9 fdde 	bl	8000760 <_sbrk>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_sbrk_r+0x1a>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_sbrk_r+0x1a>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	20001c5c 	.word	0x20001c5c

08006bb4 <memchr>:
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	b2c9      	uxtb	r1, r1
 8006bba:	4402      	add	r2, r0
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	d101      	bne.n	8006bc6 <memchr+0x12>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	e003      	b.n	8006bce <memchr+0x1a>
 8006bc6:	7804      	ldrb	r4, [r0, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	428c      	cmp	r4, r1
 8006bcc:	d1f6      	bne.n	8006bbc <memchr+0x8>
 8006bce:	bd10      	pop	{r4, pc}

08006bd0 <_init>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr

08006bdc <_fini>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr
